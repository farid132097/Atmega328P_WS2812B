
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000082e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000023  00800100  00800100  000008a2  2**0
                  ALLOC
  2 .debug_aranges 00000060  00000000  00000000  000008a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000225  00000000  00000000  00000902  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000917  00000000  00000000  00000b27  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000380  00000000  00000000  0000143e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000d80  00000000  00000000  000017be  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000120  00000000  00000000  00002540  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000002d9  00000000  00000000  00002660  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000569  00000000  00000000  00002939  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000198  00000000  00000000  00002ea2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a3 32       	cpi	r26, 0x23	; 35
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 15 04 	jmp	0x82a	; 0x82a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
#include <avr/io.h>
#include <util/delay.h>
#include "ws2812b.h"
#include "animation.h"

int main(void){
  90:	cf 93       	push	r28
  92:	df 93       	push	r29

  WS2812B_Init();
  94:	0e 94 33 01 	call	0x266	; 0x266 <WS2812B_Init>
  
  RGB_Animation_Init();
  98:	0e 94 ef 03 	call	0x7de	; 0x7de <RGB_Animation_Init>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9c:	c8 eb       	ldi	r28, 0xB8	; 184
  9e:	db e0       	ldi	r29, 0x0B	; 11
  //WS2812B_Send_Pixel(0,0,0);
  //WS2812B_Send_Pixel(0,100,200);
  //RGB_Brightness_Inc(0,100,200,1);
  //WS2812B_Send_Pixel(0,100,200);
  while(1){
    RGB_Animation_Slide_Fill(0,100,200);
  a0:	80 e0       	ldi	r24, 0x00	; 0
  a2:	64 e6       	ldi	r22, 0x64	; 100
  a4:	48 ec       	ldi	r20, 0xC8	; 200
  a6:	0e 94 bc 03 	call	0x778	; 0x778 <RGB_Animation_Slide_Fill>
	RGB_Animation_Slide_Unfill(0,100,200);
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	64 e6       	ldi	r22, 0x64	; 100
  ae:	48 ec       	ldi	r20, 0xC8	; 200
  b0:	0e 94 2b 03 	call	0x656	; 0x656 <RGB_Animation_Slide_Unfill>
  b4:	ce 01       	movw	r24, r28
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <main+0x26>
  ba:	f2 cf       	rjmp	.-28     	; 0xa0 <main+0x10>

000000bc <WS2812B_Gpio_Init>:
#include <util/delay.h>
#include "ws2812b.h"


void WS2812B_Gpio_Init(void){
  WS2812B_DDR  |=  (1<<WS2812B_bp);
  bc:	55 9a       	sbi	0x0a, 5	; 10
  WS2812B_PORT &=~ (1<<WS2812B_bp);
  be:	5d 98       	cbi	0x0b, 5	; 11
}
  c0:	08 95       	ret

000000c2 <WS2812B_Send_Byte>:

void WS2812B_Send_Byte(uint8_t val){
  if(val & 0x80){
  c2:	87 ff       	sbrs	r24, 7
  c4:	0b c0       	rjmp	.+22     	; 0xdc <WS2812B_Send_Byte+0x1a>
	WS2812B_PORT |=  (1<<WS2812B_bp);
  c6:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
  c8:	00 00       	nop
    asm( "nop ");
  ca:	00 00       	nop
    asm( "nop ");
  cc:	00 00       	nop
    asm( "nop ");
  ce:	00 00       	nop
    asm( "nop ");
  d0:	00 00       	nop
    asm( "nop ");
  d2:	00 00       	nop
	asm( "nop ");
  d4:	00 00       	nop
    asm( "nop ");
  d6:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
  d8:	5d 98       	cbi	0x0b, 5	; 11
  da:	0a c0       	rjmp	.+20     	; 0xf0 <WS2812B_Send_Byte+0x2e>
  }else{
	WS2812B_PORT |=  (1<<WS2812B_bp);
  dc:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
  de:	00 00       	nop
    asm( "nop ");
  e0:	00 00       	nop
    asm( "nop ");
  e2:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
  e4:	5d 98       	cbi	0x0b, 5	; 11
    asm( "nop ");
  e6:	00 00       	nop
	asm( "nop ");
  e8:	00 00       	nop
    asm( "nop ");
  ea:	00 00       	nop
    asm( "nop ");
  ec:	00 00       	nop
	asm( "nop ");
  ee:	00 00       	nop
  }
  
  
  if(val & 0x40){
  f0:	86 ff       	sbrs	r24, 6
  f2:	0b c0       	rjmp	.+22     	; 0x10a <WS2812B_Send_Byte+0x48>
	WS2812B_PORT |=  (1<<WS2812B_bp);
  f4:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
  f6:	00 00       	nop
    asm( "nop ");
  f8:	00 00       	nop
    asm( "nop ");
  fa:	00 00       	nop
    asm( "nop ");
  fc:	00 00       	nop
    asm( "nop ");
  fe:	00 00       	nop
    asm( "nop ");
 100:	00 00       	nop
	asm( "nop ");
 102:	00 00       	nop
    asm( "nop ");
 104:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
 106:	5d 98       	cbi	0x0b, 5	; 11
 108:	0a c0       	rjmp	.+20     	; 0x11e <WS2812B_Send_Byte+0x5c>
  }else{
	WS2812B_PORT |=  (1<<WS2812B_bp);
 10a:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
 10c:	00 00       	nop
    asm( "nop ");
 10e:	00 00       	nop
    asm( "nop ");
 110:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
 112:	5d 98       	cbi	0x0b, 5	; 11
    asm( "nop ");
 114:	00 00       	nop
	asm( "nop ");
 116:	00 00       	nop
    asm( "nop ");
 118:	00 00       	nop
    asm( "nop ");
 11a:	00 00       	nop
	asm( "nop ");
 11c:	00 00       	nop
  }
  
  
  if(val & 0x20){
 11e:	85 ff       	sbrs	r24, 5
 120:	0b c0       	rjmp	.+22     	; 0x138 <WS2812B_Send_Byte+0x76>
	WS2812B_PORT |=  (1<<WS2812B_bp);
 122:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
 124:	00 00       	nop
    asm( "nop ");
 126:	00 00       	nop
    asm( "nop ");
 128:	00 00       	nop
    asm( "nop ");
 12a:	00 00       	nop
    asm( "nop ");
 12c:	00 00       	nop
    asm( "nop ");
 12e:	00 00       	nop
	asm( "nop ");
 130:	00 00       	nop
    asm( "nop ");
 132:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
 134:	5d 98       	cbi	0x0b, 5	; 11
 136:	0a c0       	rjmp	.+20     	; 0x14c <WS2812B_Send_Byte+0x8a>
  }else{
	WS2812B_PORT |=  (1<<WS2812B_bp);
 138:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
 13a:	00 00       	nop
    asm( "nop ");
 13c:	00 00       	nop
    asm( "nop ");
 13e:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
 140:	5d 98       	cbi	0x0b, 5	; 11
    asm( "nop ");
 142:	00 00       	nop
	asm( "nop ");
 144:	00 00       	nop
    asm( "nop ");
 146:	00 00       	nop
    asm( "nop ");
 148:	00 00       	nop
	asm( "nop ");
 14a:	00 00       	nop
  }
  
  
  if(val & 0x10){
 14c:	84 ff       	sbrs	r24, 4
 14e:	0b c0       	rjmp	.+22     	; 0x166 <WS2812B_Send_Byte+0xa4>
	WS2812B_PORT |=  (1<<WS2812B_bp);
 150:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
 152:	00 00       	nop
    asm( "nop ");
 154:	00 00       	nop
    asm( "nop ");
 156:	00 00       	nop
    asm( "nop ");
 158:	00 00       	nop
    asm( "nop ");
 15a:	00 00       	nop
    asm( "nop ");
 15c:	00 00       	nop
	asm( "nop ");
 15e:	00 00       	nop
    asm( "nop ");
 160:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
 162:	5d 98       	cbi	0x0b, 5	; 11
 164:	0a c0       	rjmp	.+20     	; 0x17a <WS2812B_Send_Byte+0xb8>
  }else{
	WS2812B_PORT |=  (1<<WS2812B_bp);
 166:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
 168:	00 00       	nop
    asm( "nop ");
 16a:	00 00       	nop
    asm( "nop ");
 16c:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
 16e:	5d 98       	cbi	0x0b, 5	; 11
    asm( "nop ");
 170:	00 00       	nop
	asm( "nop ");
 172:	00 00       	nop
    asm( "nop ");
 174:	00 00       	nop
    asm( "nop ");
 176:	00 00       	nop
	asm( "nop ");
 178:	00 00       	nop
  }
  
  
  if(val & 0x08){
 17a:	83 ff       	sbrs	r24, 3
 17c:	0b c0       	rjmp	.+22     	; 0x194 <WS2812B_Send_Byte+0xd2>
	WS2812B_PORT |=  (1<<WS2812B_bp);
 17e:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
 180:	00 00       	nop
    asm( "nop ");
 182:	00 00       	nop
    asm( "nop ");
 184:	00 00       	nop
    asm( "nop ");
 186:	00 00       	nop
    asm( "nop ");
 188:	00 00       	nop
    asm( "nop ");
 18a:	00 00       	nop
	asm( "nop ");
 18c:	00 00       	nop
    asm( "nop ");
 18e:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
 190:	5d 98       	cbi	0x0b, 5	; 11
 192:	0a c0       	rjmp	.+20     	; 0x1a8 <WS2812B_Send_Byte+0xe6>
  }else{
	WS2812B_PORT |=  (1<<WS2812B_bp);
 194:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
 196:	00 00       	nop
    asm( "nop ");
 198:	00 00       	nop
    asm( "nop ");
 19a:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
 19c:	5d 98       	cbi	0x0b, 5	; 11
    asm( "nop ");
 19e:	00 00       	nop
	asm( "nop ");
 1a0:	00 00       	nop
    asm( "nop ");
 1a2:	00 00       	nop
    asm( "nop ");
 1a4:	00 00       	nop
	asm( "nop ");
 1a6:	00 00       	nop
  }
  
  
  if(val & 0x04){
 1a8:	82 ff       	sbrs	r24, 2
 1aa:	0b c0       	rjmp	.+22     	; 0x1c2 <WS2812B_Send_Byte+0x100>
	WS2812B_PORT |=  (1<<WS2812B_bp);
 1ac:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
 1ae:	00 00       	nop
    asm( "nop ");
 1b0:	00 00       	nop
    asm( "nop ");
 1b2:	00 00       	nop
    asm( "nop ");
 1b4:	00 00       	nop
    asm( "nop ");
 1b6:	00 00       	nop
    asm( "nop ");
 1b8:	00 00       	nop
	asm( "nop ");
 1ba:	00 00       	nop
    asm( "nop ");
 1bc:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
 1be:	5d 98       	cbi	0x0b, 5	; 11
 1c0:	0a c0       	rjmp	.+20     	; 0x1d6 <WS2812B_Send_Byte+0x114>
  }else{
	WS2812B_PORT |=  (1<<WS2812B_bp);
 1c2:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
 1c4:	00 00       	nop
    asm( "nop ");
 1c6:	00 00       	nop
    asm( "nop ");
 1c8:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
 1ca:	5d 98       	cbi	0x0b, 5	; 11
    asm( "nop ");
 1cc:	00 00       	nop
	asm( "nop ");
 1ce:	00 00       	nop
    asm( "nop ");
 1d0:	00 00       	nop
    asm( "nop ");
 1d2:	00 00       	nop
	asm( "nop ");
 1d4:	00 00       	nop
  }
  
  
  if(val & 0x02){
 1d6:	81 ff       	sbrs	r24, 1
 1d8:	0b c0       	rjmp	.+22     	; 0x1f0 <WS2812B_Send_Byte+0x12e>
	WS2812B_PORT |=  (1<<WS2812B_bp);
 1da:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
 1dc:	00 00       	nop
    asm( "nop ");
 1de:	00 00       	nop
    asm( "nop ");
 1e0:	00 00       	nop
    asm( "nop ");
 1e2:	00 00       	nop
    asm( "nop ");
 1e4:	00 00       	nop
    asm( "nop ");
 1e6:	00 00       	nop
	asm( "nop ");
 1e8:	00 00       	nop
    asm( "nop ");
 1ea:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
 1ec:	5d 98       	cbi	0x0b, 5	; 11
 1ee:	0a c0       	rjmp	.+20     	; 0x204 <WS2812B_Send_Byte+0x142>
  }else{
	WS2812B_PORT |=  (1<<WS2812B_bp);
 1f0:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
 1f2:	00 00       	nop
    asm( "nop ");
 1f4:	00 00       	nop
    asm( "nop ");
 1f6:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
 1f8:	5d 98       	cbi	0x0b, 5	; 11
    asm( "nop ");
 1fa:	00 00       	nop
	asm( "nop ");
 1fc:	00 00       	nop
    asm( "nop ");
 1fe:	00 00       	nop
    asm( "nop ");
 200:	00 00       	nop
	asm( "nop ");
 202:	00 00       	nop
  }
  
  
  if(val & 0x01){
 204:	80 ff       	sbrs	r24, 0
 206:	0b c0       	rjmp	.+22     	; 0x21e <WS2812B_Send_Byte+0x15c>
	WS2812B_PORT |=  (1<<WS2812B_bp);
 208:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
 20a:	00 00       	nop
    asm( "nop ");
 20c:	00 00       	nop
    asm( "nop ");
 20e:	00 00       	nop
    asm( "nop ");
 210:	00 00       	nop
    asm( "nop ");
 212:	00 00       	nop
    asm( "nop ");
 214:	00 00       	nop
	asm( "nop ");
 216:	00 00       	nop
    asm( "nop ");
 218:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
 21a:	5d 98       	cbi	0x0b, 5	; 11
 21c:	08 95       	ret
  }else{
	WS2812B_PORT |=  (1<<WS2812B_bp);
 21e:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
 220:	00 00       	nop
    asm( "nop ");
 222:	00 00       	nop
    asm( "nop ");
 224:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
 226:	5d 98       	cbi	0x0b, 5	; 11
    asm( "nop ");
 228:	00 00       	nop
	asm( "nop ");
 22a:	00 00       	nop
    asm( "nop ");
 22c:	00 00       	nop
    asm( "nop ");
 22e:	00 00       	nop
	asm( "nop ");
 230:	00 00       	nop
 232:	08 95       	ret

00000234 <WS2812B_Send_Pixel>:
  }
}

void WS2812B_Send_Pixel(uint8_t r, uint8_t g, uint8_t b){
 234:	0f 93       	push	r16
 236:	1f 93       	push	r17
 238:	18 2f       	mov	r17, r24
 23a:	86 2f       	mov	r24, r22
 23c:	04 2f       	mov	r16, r20
  WS2812B_Send_Byte(g);
 23e:	0e 94 61 00 	call	0xc2	; 0xc2 <WS2812B_Send_Byte>
  WS2812B_Send_Byte(r);
 242:	81 2f       	mov	r24, r17
 244:	0e 94 61 00 	call	0xc2	; 0xc2 <WS2812B_Send_Byte>
  WS2812B_Send_Byte(b);
 248:	80 2f       	mov	r24, r16
 24a:	0e 94 61 00 	call	0xc2	; 0xc2 <WS2812B_Send_Byte>
}
 24e:	1f 91       	pop	r17
 250:	0f 91       	pop	r16
 252:	08 95       	ret

00000254 <WS2812B_Pixel_Delay>:

void WS2812B_Pixel_Delay(void){
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	90 e0       	ldi	r25, 0x00	; 0
  for(uint32_t i=0;i<40000;i++){
	asm( "nop ");
 258:	00 00       	nop
 25a:	01 96       	adiw	r24, 0x01	; 1
  WS2812B_Send_Byte(r);
  WS2812B_Send_Byte(b);
}

void WS2812B_Pixel_Delay(void){
  for(uint32_t i=0;i<40000;i++){
 25c:	2c e9       	ldi	r18, 0x9C	; 156
 25e:	80 34       	cpi	r24, 0x40	; 64
 260:	92 07       	cpc	r25, r18
 262:	d1 f7       	brne	.-12     	; 0x258 <WS2812B_Pixel_Delay+0x4>
	asm( "nop ");
  }
}
 264:	08 95       	ret

00000266 <WS2812B_Init>:
#include <util/delay.h>
#include "ws2812b.h"


void WS2812B_Gpio_Init(void){
  WS2812B_DDR  |=  (1<<WS2812B_bp);
 266:	55 9a       	sbi	0x0a, 5	; 10
  WS2812B_PORT &=~ (1<<WS2812B_bp);
 268:	5d 98       	cbi	0x0b, 5	; 11
}

  
void WS2812B_Init(void){
  WS2812B_Gpio_Init();
}
 26a:	08 95       	ret

0000026c <RGB_Animation_Clear_Pixel_Buf>:
  uint8_t PixelBuf[WS2812B_ANIMATION_PIXELS];
}rgb_anim_t;

rgb_anim_t RGBAnim;

void RGB_Animation_Clear_Pixel_Buf(void){
 26c:	ef e0       	ldi	r30, 0x0F	; 15
 26e:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint16_t i=0;i<WS2812B_ANIMATION_PIXELS;i++){
	RGBAnim.PixelBuf[i]=0;
 270:	11 92       	st	Z+, r1
}rgb_anim_t;

rgb_anim_t RGBAnim;

void RGB_Animation_Clear_Pixel_Buf(void){
  for(uint16_t i=0;i<WS2812B_ANIMATION_PIXELS;i++){
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	e3 32       	cpi	r30, 0x23	; 35
 276:	f8 07       	cpc	r31, r24
 278:	d9 f7       	brne	.-10     	; 0x270 <RGB_Animation_Clear_Pixel_Buf+0x4>
	RGBAnim.PixelBuf[i]=0;
  }
}
 27a:	08 95       	ret

0000027c <RGB_Animation_Slide>:
}


uint16_t  color=0,color1=0,color2=0,color3=0;

void RGB_Animation_Slide(void){
 27c:	8f 92       	push	r8
 27e:	9f 92       	push	r9
 280:	af 92       	push	r10
 282:	bf 92       	push	r11
 284:	cf 92       	push	r12
 286:	df 92       	push	r13
 288:	ef 92       	push	r14
 28a:	ff 92       	push	r15
 28c:	0f 93       	push	r16
 28e:	1f 93       	push	r17
 290:	cf 93       	push	r28
 292:	df 93       	push	r29
  uint16_t leading_blank=0;
  uint16_t trailing_blank=0;
  
  if(color==0){
 294:	80 91 06 01 	lds	r24, 0x0106
 298:	90 91 07 01 	lds	r25, 0x0107
 29c:	00 97       	sbiw	r24, 0x00	; 0
 29e:	d1 f4       	brne	.+52     	; 0x2d4 <RGB_Animation_Slide+0x58>
	  color1=0xFF;
 2a0:	8f ef       	ldi	r24, 0xFF	; 255
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	90 93 09 01 	sts	0x0109, r25
 2a8:	80 93 08 01 	sts	0x0108, r24
	  color2=0x00;
 2ac:	10 92 0b 01 	sts	0x010B, r1
 2b0:	10 92 0a 01 	sts	0x010A, r1
	  color3=0x00;
 2b4:	10 92 0d 01 	sts	0x010D, r1
 2b8:	10 92 0c 01 	sts	0x010C, r1
 2bc:	00 e0       	ldi	r16, 0x00	; 0
 2be:	10 e0       	ldi	r17, 0x00	; 0
 2c0:	ee 24       	eor	r14, r14
 2c2:	ff 24       	eor	r15, r15
	}
  
  for(uint16_t i=0;i<WS2812B_ANIMATION_PIXELS;i++){
    
	trailing_blank = WS2812B_ANIMATION_PIXELS;
	trailing_blank-= leading_blank;
 2c4:	94 e1       	ldi	r25, 0x14	; 20
 2c6:	89 2e       	mov	r8, r25
 2c8:	91 2c       	mov	r9, r1
 2ca:	88 eb       	ldi	r24, 0xB8	; 184
 2cc:	a8 2e       	mov	r10, r24
 2ce:	8b e0       	ldi	r24, 0x0B	; 11
 2d0:	b8 2e       	mov	r11, r24
 2d2:	37 c0       	rjmp	.+110    	; 0x342 <RGB_Animation_Slide+0xc6>
  if(color==0){
	  color1=0xFF;
	  color2=0x00;
	  color3=0x00;
	}
	else if(color==1){
 2d4:	81 30       	cpi	r24, 0x01	; 1
 2d6:	91 05       	cpc	r25, r1
 2d8:	39 f4       	brne	.+14     	; 0x2e8 <RGB_Animation_Slide+0x6c>
	  color1=0xFF;
 2da:	8f ef       	ldi	r24, 0xFF	; 255
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	90 93 09 01 	sts	0x0109, r25
 2e2:	80 93 08 01 	sts	0x0108, r24
 2e6:	09 c0       	rjmp	.+18     	; 0x2fa <RGB_Animation_Slide+0x7e>
	  color2=0xFF;
	  color3=0x00;
	}
	else if(color==2){
 2e8:	82 30       	cpi	r24, 0x02	; 2
 2ea:	91 05       	cpc	r25, r1
 2ec:	59 f4       	brne	.+22     	; 0x304 <RGB_Animation_Slide+0x88>
	  color1=0x00;
 2ee:	10 92 09 01 	sts	0x0109, r1
 2f2:	10 92 08 01 	sts	0x0108, r1
	  color2=0xFF;
 2f6:	8f ef       	ldi	r24, 0xFF	; 255
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	90 93 0b 01 	sts	0x010B, r25
 2fe:	80 93 0a 01 	sts	0x010A, r24
 302:	d8 cf       	rjmp	.-80     	; 0x2b4 <RGB_Animation_Slide+0x38>
	  color3=0x00;
	}
	else if(color==3){
 304:	83 30       	cpi	r24, 0x03	; 3
 306:	91 05       	cpc	r25, r1
 308:	59 f4       	brne	.+22     	; 0x320 <RGB_Animation_Slide+0xa4>
	  color1=0x00;
 30a:	10 92 09 01 	sts	0x0109, r1
 30e:	10 92 08 01 	sts	0x0108, r1
	  color2=0xFF;
 312:	8f ef       	ldi	r24, 0xFF	; 255
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	90 93 0b 01 	sts	0x010B, r25
 31a:	80 93 0a 01 	sts	0x010A, r24
 31e:	0c c0       	rjmp	.+24     	; 0x338 <RGB_Animation_Slide+0xbc>
	  color3=0xFF;
	}
	else if(color==4){
 320:	04 97       	sbiw	r24, 0x04	; 4
 322:	61 f6       	brne	.-104    	; 0x2bc <RGB_Animation_Slide+0x40>
	  color1=0x00;
 324:	10 92 09 01 	sts	0x0109, r1
 328:	10 92 08 01 	sts	0x0108, r1
	  color2=0x00;
 32c:	10 92 0b 01 	sts	0x010B, r1
 330:	10 92 0a 01 	sts	0x010A, r1
	  color3=0xFF;
 334:	8f ef       	ldi	r24, 0xFF	; 255
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	90 93 0d 01 	sts	0x010D, r25
 33c:	80 93 0c 01 	sts	0x010C, r24
 340:	bd cf       	rjmp	.-134    	; 0x2bc <RGB_Animation_Slide+0x40>
	}
  
  for(uint16_t i=0;i<WS2812B_ANIMATION_PIXELS;i++){
    
	trailing_blank = WS2812B_ANIMATION_PIXELS;
	trailing_blank-= leading_blank;
 342:	64 01       	movw	r12, r8
 344:	c0 1a       	sub	r12, r16
 346:	d1 0a       	sbc	r13, r17
 348:	c0 e0       	ldi	r28, 0x00	; 0
 34a:	d0 e0       	ldi	r29, 0x00	; 0
 34c:	06 c0       	rjmp	.+12     	; 0x35a <RGB_Animation_Slide+0xde>
	
	
	
    for(uint16_t i=0;i<leading_blank;i++){
      WS2812B_Send_Pixel(0x00,0x00,0x00);
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	60 e0       	ldi	r22, 0x00	; 0
 352:	40 e0       	ldi	r20, 0x00	; 0
 354:	0e 94 1a 01 	call	0x234	; 0x234 <WS2812B_Send_Pixel>
	trailing_blank = WS2812B_ANIMATION_PIXELS;
	trailing_blank-= leading_blank;
	
	
	
    for(uint16_t i=0;i<leading_blank;i++){
 358:	21 96       	adiw	r28, 0x01	; 1
 35a:	c0 17       	cp	r28, r16
 35c:	d1 07       	cpc	r29, r17
 35e:	b8 f3       	brcs	.-18     	; 0x34e <RGB_Animation_Slide+0xd2>
      WS2812B_Send_Pixel(0x00,0x00,0x00);
    }
	
	for(uint16_t i=0;i<3;i++){
	  WS2812B_Send_Pixel(color1,color2,color3);
 360:	80 91 08 01 	lds	r24, 0x0108
 364:	60 91 0a 01 	lds	r22, 0x010A
 368:	40 91 0c 01 	lds	r20, 0x010C
 36c:	0e 94 1a 01 	call	0x234	; 0x234 <WS2812B_Send_Pixel>
 370:	80 91 08 01 	lds	r24, 0x0108
 374:	60 91 0a 01 	lds	r22, 0x010A
 378:	40 91 0c 01 	lds	r20, 0x010C
 37c:	0e 94 1a 01 	call	0x234	; 0x234 <WS2812B_Send_Pixel>
 380:	80 91 08 01 	lds	r24, 0x0108
 384:	60 91 0a 01 	lds	r22, 0x010A
 388:	40 91 0c 01 	lds	r20, 0x010C
 38c:	0e 94 1a 01 	call	0x234	; 0x234 <WS2812B_Send_Pixel>
 390:	c0 e0       	ldi	r28, 0x00	; 0
 392:	d0 e0       	ldi	r29, 0x00	; 0
 394:	06 c0       	rjmp	.+12     	; 0x3a2 <RGB_Animation_Slide+0x126>
	}
	
    for(uint16_t i=0;i<trailing_blank;i++){
      WS2812B_Send_Pixel(0x00,0x00,0x00);
 396:	80 e0       	ldi	r24, 0x00	; 0
 398:	60 e0       	ldi	r22, 0x00	; 0
 39a:	40 e0       	ldi	r20, 0x00	; 0
 39c:	0e 94 1a 01 	call	0x234	; 0x234 <WS2812B_Send_Pixel>
	
	for(uint16_t i=0;i<3;i++){
	  WS2812B_Send_Pixel(color1,color2,color3);
	}
	
    for(uint16_t i=0;i<trailing_blank;i++){
 3a0:	21 96       	adiw	r28, 0x01	; 1
 3a2:	cc 15       	cp	r28, r12
 3a4:	dd 05       	cpc	r29, r13
 3a6:	b8 f3       	brcs	.-18     	; 0x396 <RGB_Animation_Slide+0x11a>
      WS2812B_Send_Pixel(0x00,0x00,0x00);
    }
	
	leading_blank++;
 3a8:	0f 5f       	subi	r16, 0xFF	; 255
 3aa:	1f 4f       	sbci	r17, 0xFF	; 255
	if(leading_blank>=WS2812B_ANIMATION_PIXELS){
 3ac:	04 31       	cpi	r16, 0x14	; 20
 3ae:	11 05       	cpc	r17, r1
 3b0:	10 f0       	brcs	.+4      	; 0x3b6 <RGB_Animation_Slide+0x13a>
 3b2:	00 e0       	ldi	r16, 0x00	; 0
 3b4:	10 e0       	ldi	r17, 0x00	; 0
 3b6:	c5 01       	movw	r24, r10
 3b8:	01 97       	sbiw	r24, 0x01	; 1
 3ba:	f1 f7       	brne	.-4      	; 0x3b8 <RGB_Animation_Slide+0x13c>
	  color1=0xFF;
	  color2=0x00;
	  color3=0xFF;
	}
  
  for(uint16_t i=0;i<WS2812B_ANIMATION_PIXELS;i++){
 3bc:	08 94       	sec
 3be:	e1 1c       	adc	r14, r1
 3c0:	f1 1c       	adc	r15, r1
 3c2:	84 e1       	ldi	r24, 0x14	; 20
 3c4:	e8 16       	cp	r14, r24
 3c6:	f1 04       	cpc	r15, r1
 3c8:	09 f0       	breq	.+2      	; 0x3cc <RGB_Animation_Slide+0x150>
 3ca:	bb cf       	rjmp	.-138    	; 0x342 <RGB_Animation_Slide+0xc6>
	
	
	_delay_ms(1);
  }
  
  color++;
 3cc:	80 91 06 01 	lds	r24, 0x0106
 3d0:	90 91 07 01 	lds	r25, 0x0107
 3d4:	01 96       	adiw	r24, 0x01	; 1
 3d6:	90 93 07 01 	sts	0x0107, r25
 3da:	80 93 06 01 	sts	0x0106, r24
	if(color>4){
 3de:	05 97       	sbiw	r24, 0x05	; 5
 3e0:	20 f0       	brcs	.+8      	; 0x3ea <RGB_Animation_Slide+0x16e>
	  color=0;
 3e2:	10 92 07 01 	sts	0x0107, r1
 3e6:	10 92 06 01 	sts	0x0106, r1
	}
}
 3ea:	df 91       	pop	r29
 3ec:	cf 91       	pop	r28
 3ee:	1f 91       	pop	r17
 3f0:	0f 91       	pop	r16
 3f2:	ff 90       	pop	r15
 3f4:	ef 90       	pop	r14
 3f6:	df 90       	pop	r13
 3f8:	cf 90       	pop	r12
 3fa:	bf 90       	pop	r11
 3fc:	af 90       	pop	r10
 3fe:	9f 90       	pop	r9
 400:	8f 90       	pop	r8
 402:	08 95       	ret

00000404 <RGB_Animation_Rotate_All_Color>:
	_delay_us(100);
  }
}


void RGB_Animation_Rotate_All_Color(void){
 404:	cf 93       	push	r28
 406:	df 93       	push	r29
 408:	c0 e0       	ldi	r28, 0x00	; 0
 40a:	d0 e0       	ldi	r29, 0x00	; 0
  for(uint16_t j=0;j<WS2812B_ANIMATION_PIXELS;j++){
	WS2812B_Send_Pixel(red,green,blue);
 40c:	80 91 00 01 	lds	r24, 0x0100
 410:	60 91 01 01 	lds	r22, 0x0101
 414:	40 91 02 01 	lds	r20, 0x0102
 418:	0e 94 1a 01 	call	0x234	; 0x234 <WS2812B_Send_Pixel>
  }
}


void RGB_Animation_Rotate_All_Color(void){
  for(uint16_t j=0;j<WS2812B_ANIMATION_PIXELS;j++){
 41c:	21 96       	adiw	r28, 0x01	; 1
 41e:	c4 31       	cpi	r28, 0x14	; 20
 420:	d1 05       	cpc	r29, r1
 422:	a1 f7       	brne	.-24     	; 0x40c <RGB_Animation_Rotate_All_Color+0x8>
	WS2812B_Send_Pixel(red,green,blue);
  }

  if(red_dir==UPCOUNT){
 424:	80 91 03 01 	lds	r24, 0x0103
 428:	88 23       	and	r24, r24
 42a:	31 f4       	brne	.+12     	; 0x438 <RGB_Animation_Rotate_All_Color+0x34>
	if(red<RED_MAX){
 42c:	80 91 00 01 	lds	r24, 0x0100
 430:	8f 3f       	cpi	r24, 0xFF	; 255
 432:	59 f0       	breq	.+22     	; 0x44a <RGB_Animation_Rotate_All_Color+0x46>
	  red++;
 434:	8f 5f       	subi	r24, 0xFF	; 255
 436:	07 c0       	rjmp	.+14     	; 0x446 <RGB_Animation_Rotate_All_Color+0x42>
	}
  }else if(red_dir==DOWNCOUNT){
 438:	81 30       	cpi	r24, 0x01	; 1
 43a:	39 f4       	brne	.+14     	; 0x44a <RGB_Animation_Rotate_All_Color+0x46>
	if(red>0){
 43c:	80 91 00 01 	lds	r24, 0x0100
 440:	88 23       	and	r24, r24
 442:	19 f0       	breq	.+6      	; 0x44a <RGB_Animation_Rotate_All_Color+0x46>
	  red--;
 444:	81 50       	subi	r24, 0x01	; 1
 446:	80 93 00 01 	sts	0x0100, r24
	}
  }
	
  if(green_dir==UPCOUNT){
 44a:	80 91 04 01 	lds	r24, 0x0104
 44e:	88 23       	and	r24, r24
 450:	31 f4       	brne	.+12     	; 0x45e <RGB_Animation_Rotate_All_Color+0x5a>
	if(green<GREEN_MAX){
 452:	80 91 01 01 	lds	r24, 0x0101
 456:	8f 3f       	cpi	r24, 0xFF	; 255
 458:	59 f0       	breq	.+22     	; 0x470 <RGB_Animation_Rotate_All_Color+0x6c>
	  green++;
 45a:	8f 5f       	subi	r24, 0xFF	; 255
 45c:	07 c0       	rjmp	.+14     	; 0x46c <RGB_Animation_Rotate_All_Color+0x68>
	}
  }else if(green_dir==DOWNCOUNT){
 45e:	81 30       	cpi	r24, 0x01	; 1
 460:	39 f4       	brne	.+14     	; 0x470 <RGB_Animation_Rotate_All_Color+0x6c>
	if(green>0){
 462:	80 91 01 01 	lds	r24, 0x0101
 466:	88 23       	and	r24, r24
 468:	19 f0       	breq	.+6      	; 0x470 <RGB_Animation_Rotate_All_Color+0x6c>
	  green--;
 46a:	81 50       	subi	r24, 0x01	; 1
 46c:	80 93 01 01 	sts	0x0101, r24
	}
  }

  if(blue_dir==UPCOUNT){
 470:	80 91 05 01 	lds	r24, 0x0105
 474:	88 23       	and	r24, r24
 476:	31 f4       	brne	.+12     	; 0x484 <RGB_Animation_Rotate_All_Color+0x80>
	if(blue<BLUE_MAX){
 478:	80 91 02 01 	lds	r24, 0x0102
 47c:	8f 3f       	cpi	r24, 0xFF	; 255
 47e:	59 f0       	breq	.+22     	; 0x496 <RGB_Animation_Rotate_All_Color+0x92>
	  blue++;
 480:	8f 5f       	subi	r24, 0xFF	; 255
 482:	07 c0       	rjmp	.+14     	; 0x492 <RGB_Animation_Rotate_All_Color+0x8e>
	}
  }else if(blue_dir==DOWNCOUNT){
 484:	81 30       	cpi	r24, 0x01	; 1
 486:	39 f4       	brne	.+14     	; 0x496 <RGB_Animation_Rotate_All_Color+0x92>
	if(blue>0){
 488:	80 91 02 01 	lds	r24, 0x0102
 48c:	88 23       	and	r24, r24
 48e:	19 f0       	breq	.+6      	; 0x496 <RGB_Animation_Rotate_All_Color+0x92>
	  blue--;
 490:	81 50       	subi	r24, 0x01	; 1
 492:	80 93 02 01 	sts	0x0102, r24
	}
  }

  if     ((red == RED_MAX) && (green == 0  ) && (blue == 0)){
 496:	80 91 00 01 	lds	r24, 0x0100
 49a:	8f 3f       	cpi	r24, 0xFF	; 255
 49c:	d9 f4       	brne	.+54     	; 0x4d4 <RGB_Animation_Rotate_All_Color+0xd0>
 49e:	80 91 01 01 	lds	r24, 0x0101
 4a2:	88 23       	and	r24, r24
 4a4:	51 f4       	brne	.+20     	; 0x4ba <RGB_Animation_Rotate_All_Color+0xb6>
 4a6:	80 91 02 01 	lds	r24, 0x0102
 4aa:	88 23       	and	r24, r24
 4ac:	81 f5       	brne	.+96     	; 0x50e <RGB_Animation_Rotate_All_Color+0x10a>
	red_dir   = HALT;
 4ae:	82 e0       	ldi	r24, 0x02	; 2
 4b0:	80 93 03 01 	sts	0x0103, r24
	green_dir = UPCOUNT;
 4b4:	10 92 04 01 	sts	0x0104, r1
 4b8:	38 c0       	rjmp	.+112    	; 0x52a <RGB_Animation_Rotate_All_Color+0x126>
	blue_dir  = HALT;
  }
  else if((red == RED_MAX) && (green == GREEN_MAX) && (blue == 0)){
 4ba:	8f 3f       	cpi	r24, 0xFF	; 255
 4bc:	41 f5       	brne	.+80     	; 0x50e <RGB_Animation_Rotate_All_Color+0x10a>
 4be:	80 91 02 01 	lds	r24, 0x0102
 4c2:	88 23       	and	r24, r24
 4c4:	21 f5       	brne	.+72     	; 0x50e <RGB_Animation_Rotate_All_Color+0x10a>
	red_dir   = DOWNCOUNT;
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	80 93 03 01 	sts	0x0103, r24
	green_dir = HALT;
 4cc:	82 e0       	ldi	r24, 0x02	; 2
 4ce:	80 93 04 01 	sts	0x0104, r24
 4d2:	2b c0       	rjmp	.+86     	; 0x52a <RGB_Animation_Rotate_All_Color+0x126>
	blue_dir  = HALT;
  }	
  else if((red == 0  ) && (green == GREEN_MAX) && (blue == 0)){
 4d4:	88 23       	and	r24, r24
 4d6:	c9 f4       	brne	.+50     	; 0x50a <RGB_Animation_Rotate_All_Color+0x106>
 4d8:	80 91 01 01 	lds	r24, 0x0101
 4dc:	8f 3f       	cpi	r24, 0xFF	; 255
 4de:	39 f5       	brne	.+78     	; 0x52e <RGB_Animation_Rotate_All_Color+0x12a>
 4e0:	80 91 02 01 	lds	r24, 0x0102
 4e4:	88 23       	and	r24, r24
 4e6:	41 f4       	brne	.+16     	; 0x4f8 <RGB_Animation_Rotate_All_Color+0xf4>
	red_dir   = HALT;
 4e8:	82 e0       	ldi	r24, 0x02	; 2
 4ea:	80 93 03 01 	sts	0x0103, r24
	green_dir = HALT;
 4ee:	80 93 04 01 	sts	0x0104, r24
	blue_dir  = UPCOUNT;
 4f2:	10 92 05 01 	sts	0x0105, r1
 4f6:	1b c0       	rjmp	.+54     	; 0x52e <RGB_Animation_Rotate_All_Color+0x12a>
  }

  else if((red == 0  ) && (green == GREEN_MAX) && (blue == BLUE_MAX)){
 4f8:	8f 3f       	cpi	r24, 0xFF	; 255
 4fa:	c9 f4       	brne	.+50     	; 0x52e <RGB_Animation_Rotate_All_Color+0x12a>
	red_dir   = UPCOUNT;
 4fc:	10 92 03 01 	sts	0x0103, r1
	green_dir = DOWNCOUNT;
 500:	81 e0       	ldi	r24, 0x01	; 1
 502:	80 93 04 01 	sts	0x0104, r24
	blue_dir  = HALT;
 506:	82 e0       	ldi	r24, 0x02	; 2
 508:	10 c0       	rjmp	.+32     	; 0x52a <RGB_Animation_Rotate_All_Color+0x126>
	red_dir   = UPCOUNT;
	green_dir = HALT;
	blue_dir  = HALT;
  }*/
  
  else if((red == RED_MAX) && (green == 0) && (blue == BLUE_MAX)){
 50a:	8f 3f       	cpi	r24, 0xFF	; 255
 50c:	81 f4       	brne	.+32     	; 0x52e <RGB_Animation_Rotate_All_Color+0x12a>
 50e:	80 91 01 01 	lds	r24, 0x0101
 512:	88 23       	and	r24, r24
 514:	61 f4       	brne	.+24     	; 0x52e <RGB_Animation_Rotate_All_Color+0x12a>
 516:	80 91 02 01 	lds	r24, 0x0102
 51a:	8f 3f       	cpi	r24, 0xFF	; 255
 51c:	41 f4       	brne	.+16     	; 0x52e <RGB_Animation_Rotate_All_Color+0x12a>
	red_dir   = HALT;
 51e:	82 e0       	ldi	r24, 0x02	; 2
 520:	80 93 03 01 	sts	0x0103, r24
	green_dir = HALT;
 524:	80 93 04 01 	sts	0x0104, r24
	blue_dir  = DOWNCOUNT;
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	80 93 05 01 	sts	0x0105, r24
  }
}
 52e:	df 91       	pop	r29
 530:	cf 91       	pop	r28
 532:	08 95       	ret

00000534 <RGB_Brightness_Dec>:
	WS2812B_Send_Pixel(temp[0],temp[1],temp[2]);
	_delay_us(100);
  }
}

void RGB_Brightness_Dec(uint8_t r, uint8_t g, uint8_t b, uint16_t pixel){
 534:	2f 92       	push	r2
 536:	3f 92       	push	r3
 538:	4f 92       	push	r4
 53a:	5f 92       	push	r5
 53c:	6f 92       	push	r6
 53e:	7f 92       	push	r7
 540:	8f 92       	push	r8
 542:	9f 92       	push	r9
 544:	bf 92       	push	r11
 546:	cf 92       	push	r12
 548:	df 92       	push	r13
 54a:	ef 92       	push	r14
 54c:	ff 92       	push	r15
 54e:	0f 93       	push	r16
 550:	1f 93       	push	r17
 552:	df 93       	push	r29
 554:	cf 93       	push	r28
 556:	00 d0       	rcall	.+0      	; 0x558 <RGB_Brightness_Dec+0x24>
 558:	00 d0       	rcall	.+0      	; 0x55a <RGB_Brightness_Dec+0x26>
 55a:	cd b7       	in	r28, 0x3d	; 61
 55c:	de b7       	in	r29, 0x3e	; 62
 55e:	b8 2e       	mov	r11, r24
 560:	c6 2e       	mov	r12, r22
 562:	d4 2e       	mov	r13, r20
  RGBAnim.MaxVal=r;
 564:	80 93 0e 01 	sts	0x010E, r24
  
  if(g>RGBAnim.MaxVal){
 568:	86 17       	cp	r24, r22
 56a:	10 f4       	brcc	.+4      	; 0x570 <RGB_Brightness_Dec+0x3c>
    RGBAnim.MaxVal=g;
 56c:	60 93 0e 01 	sts	0x010E, r22
  }
  
  if(b>RGBAnim.MaxVal){
 570:	80 91 0e 01 	lds	r24, 0x010E
 574:	8d 15       	cp	r24, r13
 576:	10 f4       	brcc	.+4      	; 0x57c <RGB_Brightness_Dec+0x48>
    RGBAnim.MaxVal=b;
 578:	d0 92 0e 01 	sts	0x010E, r13
  uint16_t temp[3];
  temp[0]=0;
  temp[1]=0;
  temp[2]=0;

  for(int i=RGBAnim.MaxVal;i>=0;i--){
 57c:	80 91 0e 01 	lds	r24, 0x010E
 580:	08 2f       	mov	r16, r24
 582:	10 e0       	ldi	r17, 0x00	; 0
 584:	ee 24       	eor	r14, r14
 586:	ff 24       	eor	r15, r15
    uint16_t idle_pix=pixel-1;
    for(uint16_t j=0;j<idle_pix;j++){
 588:	c9 01       	movw	r24, r18
 58a:	82 5f       	subi	r24, 0xF2	; 242
 58c:	9e 4f       	sbci	r25, 0xFE	; 254
 58e:	9a 83       	std	Y+2, r25	; 0x02
 590:	89 83       	std	Y+1, r24	; 0x01
 592:	18 01       	movw	r2, r16
	    WS2812B_Send_Pixel(0,0,0);
	  }
    }
	
	
	if(i>r){
 594:	4b 2c       	mov	r4, r11
 596:	55 24       	eor	r5, r5
	  temp[0]=r;
	}else{
	  temp[0]=i;
	}
	
	if(i>g){
 598:	6c 2c       	mov	r6, r12
 59a:	77 24       	eor	r7, r7
	  temp[1]=g;
	}else{
	  temp[1]=i;
	}
	
	if(i>b){
 59c:	8d 2c       	mov	r8, r13
 59e:	99 24       	eor	r9, r9
  uint16_t temp[3];
  temp[0]=0;
  temp[1]=0;
  temp[2]=0;

  for(int i=RGBAnim.MaxVal;i>=0;i--){
 5a0:	ef e0       	ldi	r30, 0x0F	; 15
 5a2:	f1 e0       	ldi	r31, 0x01	; 1
 5a4:	fc 83       	std	Y+4, r31	; 0x04
 5a6:	eb 83       	std	Y+3, r30	; 0x03
 5a8:	14 c0       	rjmp	.+40     	; 0x5d2 <RGB_Brightness_Dec+0x9e>
    uint16_t idle_pix=pixel-1;
    for(uint16_t j=0;j<idle_pix;j++){
      if(RGBAnim.PixelBuf[j]){
 5aa:	eb 81       	ldd	r30, Y+3	; 0x03
 5ac:	fc 81       	ldd	r31, Y+4	; 0x04
 5ae:	80 81       	ld	r24, Z
 5b0:	88 23       	and	r24, r24
 5b2:	21 f0       	breq	.+8      	; 0x5bc <RGB_Brightness_Dec+0x88>
	    WS2812B_Send_Pixel(r,g,b);
 5b4:	8b 2d       	mov	r24, r11
 5b6:	6c 2d       	mov	r22, r12
 5b8:	4d 2d       	mov	r20, r13
 5ba:	03 c0       	rjmp	.+6      	; 0x5c2 <RGB_Brightness_Dec+0x8e>
	  }else{
	    WS2812B_Send_Pixel(0,0,0);
 5bc:	80 e0       	ldi	r24, 0x00	; 0
 5be:	60 e0       	ldi	r22, 0x00	; 0
 5c0:	40 e0       	ldi	r20, 0x00	; 0
 5c2:	0e 94 1a 01 	call	0x234	; 0x234 <WS2812B_Send_Pixel>
 5c6:	2b 81       	ldd	r18, Y+3	; 0x03
 5c8:	3c 81       	ldd	r19, Y+4	; 0x04
 5ca:	2f 5f       	subi	r18, 0xFF	; 255
 5cc:	3f 4f       	sbci	r19, 0xFF	; 255
 5ce:	3c 83       	std	Y+4, r19	; 0x04
 5d0:	2b 83       	std	Y+3, r18	; 0x03
  temp[1]=0;
  temp[2]=0;

  for(int i=RGBAnim.MaxVal;i>=0;i--){
    uint16_t idle_pix=pixel-1;
    for(uint16_t j=0;j<idle_pix;j++){
 5d2:	8b 81       	ldd	r24, Y+3	; 0x03
 5d4:	9c 81       	ldd	r25, Y+4	; 0x04
 5d6:	e9 81       	ldd	r30, Y+1	; 0x01
 5d8:	fa 81       	ldd	r31, Y+2	; 0x02
 5da:	8e 17       	cp	r24, r30
 5dc:	9f 07       	cpc	r25, r31
 5de:	29 f7       	brne	.-54     	; 0x5aa <RGB_Brightness_Dec+0x76>
 5e0:	91 01       	movw	r18, r2
 5e2:	2e 19       	sub	r18, r14
 5e4:	3f 09       	sbc	r19, r15
	    WS2812B_Send_Pixel(0,0,0);
	  }
    }
	
	
	if(i>r){
 5e6:	42 16       	cp	r4, r18
 5e8:	53 06       	cpc	r5, r19
 5ea:	14 f4       	brge	.+4      	; 0x5f0 <RGB_Brightness_Dec+0xbc>
	  temp[0]=r;
 5ec:	8b 2d       	mov	r24, r11
 5ee:	01 c0       	rjmp	.+2      	; 0x5f2 <RGB_Brightness_Dec+0xbe>
 5f0:	80 2f       	mov	r24, r16
	}else{
	  temp[0]=i;
	}
	
	if(i>g){
 5f2:	62 16       	cp	r6, r18
 5f4:	73 06       	cpc	r7, r19
 5f6:	14 f4       	brge	.+4      	; 0x5fc <RGB_Brightness_Dec+0xc8>
	  temp[1]=g;
 5f8:	6c 2d       	mov	r22, r12
 5fa:	01 c0       	rjmp	.+2      	; 0x5fe <RGB_Brightness_Dec+0xca>
 5fc:	60 2f       	mov	r22, r16
	}else{
	  temp[1]=i;
	}
	
	if(i>b){
 5fe:	82 16       	cp	r8, r18
 600:	93 06       	cpc	r9, r19
 602:	14 f4       	brge	.+4      	; 0x608 <RGB_Brightness_Dec+0xd4>
	  temp[2]=b;
 604:	4d 2d       	mov	r20, r13
 606:	01 c0       	rjmp	.+2      	; 0x60a <RGB_Brightness_Dec+0xd6>
 608:	40 2f       	mov	r20, r16
	}else{
	  temp[2]=i;
	}
	
	
	WS2812B_Send_Pixel(temp[0],temp[1],temp[2]);
 60a:	0e 94 1a 01 	call	0x234	; 0x234 <WS2812B_Send_Pixel>
 60e:	8c e2       	ldi	r24, 0x2C	; 44
 610:	91 e0       	ldi	r25, 0x01	; 1
 612:	01 97       	sbiw	r24, 0x01	; 1
 614:	f1 f7       	brne	.-4      	; 0x612 <RGB_Brightness_Dec+0xde>
  uint16_t temp[3];
  temp[0]=0;
  temp[1]=0;
  temp[2]=0;

  for(int i=RGBAnim.MaxVal;i>=0;i--){
 616:	01 50       	subi	r16, 0x01	; 1
 618:	10 40       	sbci	r17, 0x00	; 0
 61a:	08 94       	sec
 61c:	e1 1c       	adc	r14, r1
 61e:	f1 1c       	adc	r15, r1
 620:	ff ef       	ldi	r31, 0xFF	; 255
 622:	0f 3f       	cpi	r16, 0xFF	; 255
 624:	1f 07       	cpc	r17, r31
 626:	09 f0       	breq	.+2      	; 0x62a <RGB_Brightness_Dec+0xf6>
 628:	bb cf       	rjmp	.-138    	; 0x5a0 <RGB_Brightness_Dec+0x6c>
	
	
	WS2812B_Send_Pixel(temp[0],temp[1],temp[2]);
	_delay_us(100);
  }
}
 62a:	0f 90       	pop	r0
 62c:	0f 90       	pop	r0
 62e:	0f 90       	pop	r0
 630:	0f 90       	pop	r0
 632:	cf 91       	pop	r28
 634:	df 91       	pop	r29
 636:	1f 91       	pop	r17
 638:	0f 91       	pop	r16
 63a:	ff 90       	pop	r15
 63c:	ef 90       	pop	r14
 63e:	df 90       	pop	r13
 640:	cf 90       	pop	r12
 642:	bf 90       	pop	r11
 644:	9f 90       	pop	r9
 646:	8f 90       	pop	r8
 648:	7f 90       	pop	r7
 64a:	6f 90       	pop	r6
 64c:	5f 90       	pop	r5
 64e:	4f 90       	pop	r4
 650:	3f 90       	pop	r3
 652:	2f 90       	pop	r2
 654:	08 95       	ret

00000656 <RGB_Animation_Slide_Unfill>:
    RGB_Brightness_Inc(r,g,b,i+1);
	RGBAnim.PixelBuf[i]=1;
  }
}

void RGB_Animation_Slide_Unfill(uint8_t r, uint8_t g, uint8_t b){
 656:	ff 92       	push	r15
 658:	0f 93       	push	r16
 65a:	1f 93       	push	r17
 65c:	cf 93       	push	r28
 65e:	df 93       	push	r29
 660:	f8 2e       	mov	r15, r24
 662:	06 2f       	mov	r16, r22
 664:	14 2f       	mov	r17, r20
 666:	c4 e1       	ldi	r28, 0x14	; 20
 668:	d0 e0       	ldi	r29, 0x00	; 0
  for(int i=WS2812B_ANIMATION_PIXELS-1;i>=0;i--){
    RGB_Brightness_Dec(r,g,b,i+1);
 66a:	8f 2d       	mov	r24, r15
 66c:	60 2f       	mov	r22, r16
 66e:	41 2f       	mov	r20, r17
 670:	9e 01       	movw	r18, r28
 672:	0e 94 9a 02 	call	0x534	; 0x534 <RGB_Brightness_Dec>
	RGBAnim.PixelBuf[i]=0;
 676:	fe 01       	movw	r30, r28
 678:	e2 5f       	subi	r30, 0xF2	; 242
 67a:	fe 4f       	sbci	r31, 0xFE	; 254
 67c:	10 82       	st	Z, r1
 67e:	21 97       	sbiw	r28, 0x01	; 1
	RGBAnim.PixelBuf[i]=1;
  }
}

void RGB_Animation_Slide_Unfill(uint8_t r, uint8_t g, uint8_t b){
  for(int i=WS2812B_ANIMATION_PIXELS-1;i>=0;i--){
 680:	a1 f7       	brne	.-24     	; 0x66a <RGB_Animation_Slide_Unfill+0x14>
    RGB_Brightness_Dec(r,g,b,i+1);
	RGBAnim.PixelBuf[i]=0;
  }
}
 682:	df 91       	pop	r29
 684:	cf 91       	pop	r28
 686:	1f 91       	pop	r17
 688:	0f 91       	pop	r16
 68a:	ff 90       	pop	r15
 68c:	08 95       	ret

0000068e <RGB_Brightness_Inc>:
	WS2812B_Send_Pixel(0,0,0);
  }
}


void RGB_Brightness_Inc(uint8_t r, uint8_t g, uint8_t b, uint16_t pixel){
 68e:	2f 92       	push	r2
 690:	3f 92       	push	r3
 692:	4f 92       	push	r4
 694:	5f 92       	push	r5
 696:	6f 92       	push	r6
 698:	7f 92       	push	r7
 69a:	8f 92       	push	r8
 69c:	9f 92       	push	r9
 69e:	af 92       	push	r10
 6a0:	bf 92       	push	r11
 6a2:	df 92       	push	r13
 6a4:	ef 92       	push	r14
 6a6:	ff 92       	push	r15
 6a8:	0f 93       	push	r16
 6aa:	1f 93       	push	r17
 6ac:	cf 93       	push	r28
 6ae:	df 93       	push	r29
 6b0:	d8 2e       	mov	r13, r24
 6b2:	e6 2e       	mov	r14, r22
 6b4:	f4 2e       	mov	r15, r20
  RGBAnim.MaxVal=r;
 6b6:	80 93 0e 01 	sts	0x010E, r24
  
  if(g>RGBAnim.MaxVal){
 6ba:	86 17       	cp	r24, r22
 6bc:	10 f4       	brcc	.+4      	; 0x6c2 <RGB_Brightness_Inc+0x34>
    RGBAnim.MaxVal=g;
 6be:	60 93 0e 01 	sts	0x010E, r22
  }
  
  if(b>RGBAnim.MaxVal){
 6c2:	80 91 0e 01 	lds	r24, 0x010E
 6c6:	8f 15       	cp	r24, r15
 6c8:	10 f4       	brcc	.+4      	; 0x6ce <RGB_Brightness_Inc+0x40>
    RGBAnim.MaxVal=b;
 6ca:	f0 92 0e 01 	sts	0x010E, r15
 6ce:	00 e0       	ldi	r16, 0x00	; 0
 6d0:	10 e0       	ldi	r17, 0x00	; 0
  temp[1]=0;
  temp[2]=0;

  for(uint16_t i=0;i<RGBAnim.MaxVal;i++){
    uint16_t idle_pix=pixel-1;
    for(uint16_t j=0;j<idle_pix;j++){
 6d2:	4e e0       	ldi	r20, 0x0E	; 14
 6d4:	44 2e       	mov	r4, r20
 6d6:	41 e0       	ldi	r20, 0x01	; 1
 6d8:	54 2e       	mov	r5, r20
 6da:	42 0e       	add	r4, r18
 6dc:	53 1e       	adc	r5, r19
	}else{
	  temp[2]=i;
	}
	
	
	WS2812B_Send_Pixel(temp[0],temp[1],temp[2]);
 6de:	6d 2c       	mov	r6, r13
 6e0:	77 24       	eor	r7, r7
 6e2:	8e 2c       	mov	r8, r14
 6e4:	99 24       	eor	r9, r9
 6e6:	af 2c       	mov	r10, r15
 6e8:	bb 24       	eor	r11, r11
 6ea:	2c e2       	ldi	r18, 0x2C	; 44
 6ec:	22 2e       	mov	r2, r18
 6ee:	21 e0       	ldi	r18, 0x01	; 1
 6f0:	32 2e       	mov	r3, r18
 6f2:	2a c0       	rjmp	.+84     	; 0x748 <RGB_Brightness_Inc+0xba>
  if(g>RGBAnim.MaxVal){
    RGBAnim.MaxVal=g;
  }
  
  if(b>RGBAnim.MaxVal){
    RGBAnim.MaxVal=b;
 6f4:	cf e0       	ldi	r28, 0x0F	; 15
 6f6:	d1 e0       	ldi	r29, 0x01	; 1
 6f8:	0d c0       	rjmp	.+26     	; 0x714 <RGB_Brightness_Inc+0x86>
  temp[2]=0;

  for(uint16_t i=0;i<RGBAnim.MaxVal;i++){
    uint16_t idle_pix=pixel-1;
    for(uint16_t j=0;j<idle_pix;j++){
      if(RGBAnim.PixelBuf[j]){
 6fa:	88 81       	ld	r24, Y
 6fc:	88 23       	and	r24, r24
 6fe:	21 f0       	breq	.+8      	; 0x708 <RGB_Brightness_Inc+0x7a>
	    WS2812B_Send_Pixel(r,g,b);
 700:	8d 2d       	mov	r24, r13
 702:	6e 2d       	mov	r22, r14
 704:	4f 2d       	mov	r20, r15
 706:	03 c0       	rjmp	.+6      	; 0x70e <RGB_Brightness_Inc+0x80>
	  }else{
	    WS2812B_Send_Pixel(0,0,0);
 708:	80 e0       	ldi	r24, 0x00	; 0
 70a:	60 e0       	ldi	r22, 0x00	; 0
 70c:	40 e0       	ldi	r20, 0x00	; 0
 70e:	0e 94 1a 01 	call	0x234	; 0x234 <WS2812B_Send_Pixel>
 712:	21 96       	adiw	r28, 0x01	; 1
  temp[1]=0;
  temp[2]=0;

  for(uint16_t i=0;i<RGBAnim.MaxVal;i++){
    uint16_t idle_pix=pixel-1;
    for(uint16_t j=0;j<idle_pix;j++){
 714:	c4 15       	cp	r28, r4
 716:	d5 05       	cpc	r29, r5
 718:	81 f7       	brne	.-32     	; 0x6fa <RGB_Brightness_Inc+0x6c>
	}else{
	  temp[2]=i;
	}
	
	
	WS2812B_Send_Pixel(temp[0],temp[1],temp[2]);
 71a:	20 2f       	mov	r18, r16
 71c:	60 16       	cp	r6, r16
 71e:	71 06       	cpc	r7, r17
 720:	08 f4       	brcc	.+2      	; 0x724 <RGB_Brightness_Inc+0x96>
 722:	26 2d       	mov	r18, r6
 724:	60 2f       	mov	r22, r16
 726:	80 16       	cp	r8, r16
 728:	91 06       	cpc	r9, r17
 72a:	08 f4       	brcc	.+2      	; 0x72e <RGB_Brightness_Inc+0xa0>
 72c:	68 2d       	mov	r22, r8
 72e:	40 2f       	mov	r20, r16
 730:	a0 16       	cp	r10, r16
 732:	b1 06       	cpc	r11, r17
 734:	08 f4       	brcc	.+2      	; 0x738 <RGB_Brightness_Inc+0xaa>
 736:	4a 2d       	mov	r20, r10
 738:	82 2f       	mov	r24, r18
 73a:	0e 94 1a 01 	call	0x234	; 0x234 <WS2812B_Send_Pixel>
 73e:	c1 01       	movw	r24, r2
 740:	01 97       	sbiw	r24, 0x01	; 1
 742:	f1 f7       	brne	.-4      	; 0x740 <RGB_Brightness_Inc+0xb2>
  uint16_t temp[3];
  temp[0]=0;
  temp[1]=0;
  temp[2]=0;

  for(uint16_t i=0;i<RGBAnim.MaxVal;i++){
 744:	0f 5f       	subi	r16, 0xFF	; 255
 746:	1f 4f       	sbci	r17, 0xFF	; 255
 748:	80 91 0e 01 	lds	r24, 0x010E
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	08 17       	cp	r16, r24
 750:	19 07       	cpc	r17, r25
 752:	80 f2       	brcs	.-96     	; 0x6f4 <RGB_Brightness_Inc+0x66>
	
	
	WS2812B_Send_Pixel(temp[0],temp[1],temp[2]);
	_delay_us(100);
  }
}
 754:	df 91       	pop	r29
 756:	cf 91       	pop	r28
 758:	1f 91       	pop	r17
 75a:	0f 91       	pop	r16
 75c:	ff 90       	pop	r15
 75e:	ef 90       	pop	r14
 760:	df 90       	pop	r13
 762:	bf 90       	pop	r11
 764:	af 90       	pop	r10
 766:	9f 90       	pop	r9
 768:	8f 90       	pop	r8
 76a:	7f 90       	pop	r7
 76c:	6f 90       	pop	r6
 76e:	5f 90       	pop	r5
 770:	4f 90       	pop	r4
 772:	3f 90       	pop	r3
 774:	2f 90       	pop	r2
 776:	08 95       	ret

00000778 <RGB_Animation_Slide_Fill>:
}




void RGB_Animation_Slide_Fill(uint8_t r, uint8_t g, uint8_t b){
 778:	ef 92       	push	r14
 77a:	ff 92       	push	r15
 77c:	0f 93       	push	r16
 77e:	1f 93       	push	r17
 780:	cf 93       	push	r28
 782:	df 93       	push	r29
 784:	f8 2e       	mov	r15, r24
 786:	06 2f       	mov	r16, r22
 788:	14 2f       	mov	r17, r20
 78a:	c0 e0       	ldi	r28, 0x00	; 0
 78c:	d0 e0       	ldi	r29, 0x00	; 0
  for(uint16_t i=0;i<WS2812B_ANIMATION_PIXELS;i++){
    RGB_Brightness_Inc(r,g,b,i+1);
	RGBAnim.PixelBuf[i]=1;
 78e:	ee 24       	eor	r14, r14
 790:	e3 94       	inc	r14



void RGB_Animation_Slide_Fill(uint8_t r, uint8_t g, uint8_t b){
  for(uint16_t i=0;i<WS2812B_ANIMATION_PIXELS;i++){
    RGB_Brightness_Inc(r,g,b,i+1);
 792:	21 96       	adiw	r28, 0x01	; 1
 794:	8f 2d       	mov	r24, r15
 796:	60 2f       	mov	r22, r16
 798:	41 2f       	mov	r20, r17
 79a:	9e 01       	movw	r18, r28
 79c:	0e 94 47 03 	call	0x68e	; 0x68e <RGB_Brightness_Inc>
	RGBAnim.PixelBuf[i]=1;
 7a0:	fe 01       	movw	r30, r28
 7a2:	e2 5f       	subi	r30, 0xF2	; 242
 7a4:	fe 4f       	sbci	r31, 0xFE	; 254
 7a6:	e0 82       	st	Z, r14




void RGB_Animation_Slide_Fill(uint8_t r, uint8_t g, uint8_t b){
  for(uint16_t i=0;i<WS2812B_ANIMATION_PIXELS;i++){
 7a8:	c4 31       	cpi	r28, 0x14	; 20
 7aa:	d1 05       	cpc	r29, r1
 7ac:	91 f7       	brne	.-28     	; 0x792 <RGB_Animation_Slide_Fill+0x1a>
    RGB_Brightness_Inc(r,g,b,i+1);
	RGBAnim.PixelBuf[i]=1;
  }
}
 7ae:	df 91       	pop	r29
 7b0:	cf 91       	pop	r28
 7b2:	1f 91       	pop	r17
 7b4:	0f 91       	pop	r16
 7b6:	ff 90       	pop	r15
 7b8:	ef 90       	pop	r14
 7ba:	08 95       	ret

000007bc <RGB_Animation_Clear_All_Pixels>:
  for(uint16_t i=0;i<WS2812B_ANIMATION_PIXELS;i++){
	RGBAnim.PixelBuf[i]=0;
  }
}

void RGB_Animation_Clear_All_Pixels(void){
 7bc:	cf 93       	push	r28
 7be:	df 93       	push	r29
 7c0:	c0 e0       	ldi	r28, 0x00	; 0
 7c2:	d0 e0       	ldi	r29, 0x00	; 0
  for(uint16_t j=0;j<WS2812B_TOTAL_PIXEL_CLEAR;j++){
	WS2812B_Send_Pixel(0,0,0);
 7c4:	80 e0       	ldi	r24, 0x00	; 0
 7c6:	60 e0       	ldi	r22, 0x00	; 0
 7c8:	40 e0       	ldi	r20, 0x00	; 0
 7ca:	0e 94 1a 01 	call	0x234	; 0x234 <WS2812B_Send_Pixel>
	RGBAnim.PixelBuf[i]=0;
  }
}

void RGB_Animation_Clear_All_Pixels(void){
  for(uint16_t j=0;j<WS2812B_TOTAL_PIXEL_CLEAR;j++){
 7ce:	21 96       	adiw	r28, 0x01	; 1
 7d0:	81 e0       	ldi	r24, 0x01	; 1
 7d2:	cc 32       	cpi	r28, 0x2C	; 44
 7d4:	d8 07       	cpc	r29, r24
 7d6:	b1 f7       	brne	.-20     	; 0x7c4 <RGB_Animation_Clear_All_Pixels+0x8>
	WS2812B_Send_Pixel(0,0,0);
  }
}
 7d8:	df 91       	pop	r29
 7da:	cf 91       	pop	r28
 7dc:	08 95       	ret

000007de <RGB_Animation_Init>:




void RGB_Animation_Init(void){
  red=RED_MAX;
 7de:	8f ef       	ldi	r24, 0xFF	; 255
 7e0:	80 93 00 01 	sts	0x0100, r24
  red_dir=HALT;
 7e4:	82 e0       	ldi	r24, 0x02	; 2
 7e6:	80 93 03 01 	sts	0x0103, r24
  green_dir=HALT;
 7ea:	80 93 04 01 	sts	0x0104, r24
  blue_dir=HALT;
 7ee:	80 93 05 01 	sts	0x0105, r24
 7f2:	88 ee       	ldi	r24, 0xE8	; 232
 7f4:	93 e0       	ldi	r25, 0x03	; 3
 7f6:	2c e2       	ldi	r18, 0x2C	; 44
 7f8:	31 e0       	ldi	r19, 0x01	; 1
 7fa:	f9 01       	movw	r30, r18
 7fc:	31 97       	sbiw	r30, 0x01	; 1
 7fe:	f1 f7       	brne	.-4      	; 0x7fc <RGB_Animation_Init+0x1e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 800:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 802:	d9 f7       	brne	.-10     	; 0x7fa <RGB_Animation_Init+0x1c>
  _delay_ms(100);
  RGB_Animation_Clear_All_Pixels();
 804:	0e 94 de 03 	call	0x7bc	; 0x7bc <RGB_Animation_Clear_All_Pixels>
 808:	88 ee       	ldi	r24, 0xE8	; 232
 80a:	93 e0       	ldi	r25, 0x03	; 3
 80c:	2c e2       	ldi	r18, 0x2C	; 44
 80e:	31 e0       	ldi	r19, 0x01	; 1
 810:	f9 01       	movw	r30, r18
 812:	31 97       	sbiw	r30, 0x01	; 1
 814:	f1 f7       	brne	.-4      	; 0x812 <RGB_Animation_Init+0x34>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 816:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 818:	d9 f7       	brne	.-10     	; 0x810 <RGB_Animation_Init+0x32>
 81a:	ef e0       	ldi	r30, 0x0F	; 15
 81c:	f1 e0       	ldi	r31, 0x01	; 1

rgb_anim_t RGBAnim;

void RGB_Animation_Clear_Pixel_Buf(void){
  for(uint16_t i=0;i<WS2812B_ANIMATION_PIXELS;i++){
	RGBAnim.PixelBuf[i]=0;
 81e:	11 92       	st	Z+, r1
}rgb_anim_t;

rgb_anim_t RGBAnim;

void RGB_Animation_Clear_Pixel_Buf(void){
  for(uint16_t i=0;i<WS2812B_ANIMATION_PIXELS;i++){
 820:	81 e0       	ldi	r24, 0x01	; 1
 822:	e3 32       	cpi	r30, 0x23	; 35
 824:	f8 07       	cpc	r31, r24
 826:	d9 f7       	brne	.-10     	; 0x81e <RGB_Animation_Init+0x40>
  _delay_ms(100);
  RGB_Animation_Clear_All_Pixels();
  _delay_ms(100);
  RGB_Animation_Clear_Pixel_Buf();
  
 828:	08 95       	ret

0000082a <_exit>:
 82a:	f8 94       	cli

0000082c <__stop_program>:
 82c:	ff cf       	rjmp	.-2      	; 0x82c <__stop_program>
