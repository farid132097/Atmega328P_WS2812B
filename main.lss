
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003b4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000006  00800100  00800100  00000428  2**0
                  ALLOC
  2 .debug_aranges 00000040  00000000  00000000  00000428  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000114  00000000  00000000  00000468  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000317  00000000  00000000  0000057c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000192  00000000  00000000  00000893  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000904  00000000  00000000  00000a25  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000a0  00000000  00000000  0000132c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000195  00000000  00000000  000013cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000088  00000000  00000000  00001561  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  000015e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a6 30       	cpi	r26, 0x06	; 6
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 d8 01 	jmp	0x3b0	; 0x3b0 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
#include <avr/io.h>
#include <util/delay.h>
#include "ws2812b.h"

int main(void){
  90:	cf 93       	push	r28
  92:	df 93       	push	r29

  WS2812B_Init();
  94:	0e 94 35 01 	call	0x26a	; 0x26a <WS2812B_Init>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  98:	c8 ec       	ldi	r28, 0xC8	; 200
  9a:	df ea       	ldi	r29, 0xAF	; 175
  
  
  while(1){
  
	WS2812B_Rotate_All_Color();
  9c:	0e 94 44 01 	call	0x288	; 0x288 <WS2812B_Rotate_All_Color>
  a0:	ce 01       	movw	r24, r28
  a2:	01 97       	sbiw	r24, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <main+0x12>
  a6:	fa cf       	rjmp	.-12     	; 0x9c <main+0xc>

000000a8 <WS2812B_Gpio_Init>:
#include <util/delay.h>
#include "ws2812b.h"


void WS2812B_Gpio_Init(void){
  WS2812B_DDR  |=  (1<<WS2812B_bp);
  a8:	55 9a       	sbi	0x0a, 5	; 10
  WS2812B_PORT &=~ (1<<WS2812B_bp);
  aa:	5d 98       	cbi	0x0b, 5	; 11
}
  ac:	08 95       	ret

000000ae <WS2812B_Send_Byte>:

void WS2812B_Send_Byte(uint8_t val){
  if(val & 0x80){
  ae:	87 ff       	sbrs	r24, 7
  b0:	0b c0       	rjmp	.+22     	; 0xc8 <WS2812B_Send_Byte+0x1a>
	WS2812B_PORT |=  (1<<WS2812B_bp);
  b2:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
  b4:	00 00       	nop
    asm( "nop ");
  b6:	00 00       	nop
    asm( "nop ");
  b8:	00 00       	nop
    asm( "nop ");
  ba:	00 00       	nop
    asm( "nop ");
  bc:	00 00       	nop
    asm( "nop ");
  be:	00 00       	nop
	asm( "nop ");
  c0:	00 00       	nop
    asm( "nop ");
  c2:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
  c4:	5d 98       	cbi	0x0b, 5	; 11
  c6:	0a c0       	rjmp	.+20     	; 0xdc <WS2812B_Send_Byte+0x2e>
  }else{
	WS2812B_PORT |=  (1<<WS2812B_bp);
  c8:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
  ca:	00 00       	nop
    asm( "nop ");
  cc:	00 00       	nop
    asm( "nop ");
  ce:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
  d0:	5d 98       	cbi	0x0b, 5	; 11
    asm( "nop ");
  d2:	00 00       	nop
	asm( "nop ");
  d4:	00 00       	nop
    asm( "nop ");
  d6:	00 00       	nop
    asm( "nop ");
  d8:	00 00       	nop
	asm( "nop ");
  da:	00 00       	nop
  }
  
  
  if(val & 0x40){
  dc:	86 ff       	sbrs	r24, 6
  de:	0b c0       	rjmp	.+22     	; 0xf6 <WS2812B_Send_Byte+0x48>
	WS2812B_PORT |=  (1<<WS2812B_bp);
  e0:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
  e2:	00 00       	nop
    asm( "nop ");
  e4:	00 00       	nop
    asm( "nop ");
  e6:	00 00       	nop
    asm( "nop ");
  e8:	00 00       	nop
    asm( "nop ");
  ea:	00 00       	nop
    asm( "nop ");
  ec:	00 00       	nop
	asm( "nop ");
  ee:	00 00       	nop
    asm( "nop ");
  f0:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
  f2:	5d 98       	cbi	0x0b, 5	; 11
  f4:	0a c0       	rjmp	.+20     	; 0x10a <WS2812B_Send_Byte+0x5c>
  }else{
	WS2812B_PORT |=  (1<<WS2812B_bp);
  f6:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
  f8:	00 00       	nop
    asm( "nop ");
  fa:	00 00       	nop
    asm( "nop ");
  fc:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
  fe:	5d 98       	cbi	0x0b, 5	; 11
    asm( "nop ");
 100:	00 00       	nop
	asm( "nop ");
 102:	00 00       	nop
    asm( "nop ");
 104:	00 00       	nop
    asm( "nop ");
 106:	00 00       	nop
	asm( "nop ");
 108:	00 00       	nop
  }
  
  
  if(val & 0x20){
 10a:	85 ff       	sbrs	r24, 5
 10c:	0b c0       	rjmp	.+22     	; 0x124 <WS2812B_Send_Byte+0x76>
	WS2812B_PORT |=  (1<<WS2812B_bp);
 10e:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
 110:	00 00       	nop
    asm( "nop ");
 112:	00 00       	nop
    asm( "nop ");
 114:	00 00       	nop
    asm( "nop ");
 116:	00 00       	nop
    asm( "nop ");
 118:	00 00       	nop
    asm( "nop ");
 11a:	00 00       	nop
	asm( "nop ");
 11c:	00 00       	nop
    asm( "nop ");
 11e:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
 120:	5d 98       	cbi	0x0b, 5	; 11
 122:	0a c0       	rjmp	.+20     	; 0x138 <WS2812B_Send_Byte+0x8a>
  }else{
	WS2812B_PORT |=  (1<<WS2812B_bp);
 124:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
 126:	00 00       	nop
    asm( "nop ");
 128:	00 00       	nop
    asm( "nop ");
 12a:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
 12c:	5d 98       	cbi	0x0b, 5	; 11
    asm( "nop ");
 12e:	00 00       	nop
	asm( "nop ");
 130:	00 00       	nop
    asm( "nop ");
 132:	00 00       	nop
    asm( "nop ");
 134:	00 00       	nop
	asm( "nop ");
 136:	00 00       	nop
  }
  
  
  if(val & 0x10){
 138:	84 ff       	sbrs	r24, 4
 13a:	0b c0       	rjmp	.+22     	; 0x152 <WS2812B_Send_Byte+0xa4>
	WS2812B_PORT |=  (1<<WS2812B_bp);
 13c:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
 13e:	00 00       	nop
    asm( "nop ");
 140:	00 00       	nop
    asm( "nop ");
 142:	00 00       	nop
    asm( "nop ");
 144:	00 00       	nop
    asm( "nop ");
 146:	00 00       	nop
    asm( "nop ");
 148:	00 00       	nop
	asm( "nop ");
 14a:	00 00       	nop
    asm( "nop ");
 14c:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
 14e:	5d 98       	cbi	0x0b, 5	; 11
 150:	0a c0       	rjmp	.+20     	; 0x166 <WS2812B_Send_Byte+0xb8>
  }else{
	WS2812B_PORT |=  (1<<WS2812B_bp);
 152:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
 154:	00 00       	nop
    asm( "nop ");
 156:	00 00       	nop
    asm( "nop ");
 158:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
 15a:	5d 98       	cbi	0x0b, 5	; 11
    asm( "nop ");
 15c:	00 00       	nop
	asm( "nop ");
 15e:	00 00       	nop
    asm( "nop ");
 160:	00 00       	nop
    asm( "nop ");
 162:	00 00       	nop
	asm( "nop ");
 164:	00 00       	nop
  }
  
  
  if(val & 0x08){
 166:	83 ff       	sbrs	r24, 3
 168:	0b c0       	rjmp	.+22     	; 0x180 <WS2812B_Send_Byte+0xd2>
	WS2812B_PORT |=  (1<<WS2812B_bp);
 16a:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
 16c:	00 00       	nop
    asm( "nop ");
 16e:	00 00       	nop
    asm( "nop ");
 170:	00 00       	nop
    asm( "nop ");
 172:	00 00       	nop
    asm( "nop ");
 174:	00 00       	nop
    asm( "nop ");
 176:	00 00       	nop
	asm( "nop ");
 178:	00 00       	nop
    asm( "nop ");
 17a:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
 17c:	5d 98       	cbi	0x0b, 5	; 11
 17e:	0a c0       	rjmp	.+20     	; 0x194 <WS2812B_Send_Byte+0xe6>
  }else{
	WS2812B_PORT |=  (1<<WS2812B_bp);
 180:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
 182:	00 00       	nop
    asm( "nop ");
 184:	00 00       	nop
    asm( "nop ");
 186:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
 188:	5d 98       	cbi	0x0b, 5	; 11
    asm( "nop ");
 18a:	00 00       	nop
	asm( "nop ");
 18c:	00 00       	nop
    asm( "nop ");
 18e:	00 00       	nop
    asm( "nop ");
 190:	00 00       	nop
	asm( "nop ");
 192:	00 00       	nop
  }
  
  
  if(val & 0x04){
 194:	82 ff       	sbrs	r24, 2
 196:	0b c0       	rjmp	.+22     	; 0x1ae <WS2812B_Send_Byte+0x100>
	WS2812B_PORT |=  (1<<WS2812B_bp);
 198:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
 19a:	00 00       	nop
    asm( "nop ");
 19c:	00 00       	nop
    asm( "nop ");
 19e:	00 00       	nop
    asm( "nop ");
 1a0:	00 00       	nop
    asm( "nop ");
 1a2:	00 00       	nop
    asm( "nop ");
 1a4:	00 00       	nop
	asm( "nop ");
 1a6:	00 00       	nop
    asm( "nop ");
 1a8:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
 1aa:	5d 98       	cbi	0x0b, 5	; 11
 1ac:	0a c0       	rjmp	.+20     	; 0x1c2 <WS2812B_Send_Byte+0x114>
  }else{
	WS2812B_PORT |=  (1<<WS2812B_bp);
 1ae:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
 1b0:	00 00       	nop
    asm( "nop ");
 1b2:	00 00       	nop
    asm( "nop ");
 1b4:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
 1b6:	5d 98       	cbi	0x0b, 5	; 11
    asm( "nop ");
 1b8:	00 00       	nop
	asm( "nop ");
 1ba:	00 00       	nop
    asm( "nop ");
 1bc:	00 00       	nop
    asm( "nop ");
 1be:	00 00       	nop
	asm( "nop ");
 1c0:	00 00       	nop
  }
  
  
  if(val & 0x02){
 1c2:	81 ff       	sbrs	r24, 1
 1c4:	0b c0       	rjmp	.+22     	; 0x1dc <WS2812B_Send_Byte+0x12e>
	WS2812B_PORT |=  (1<<WS2812B_bp);
 1c6:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
 1c8:	00 00       	nop
    asm( "nop ");
 1ca:	00 00       	nop
    asm( "nop ");
 1cc:	00 00       	nop
    asm( "nop ");
 1ce:	00 00       	nop
    asm( "nop ");
 1d0:	00 00       	nop
    asm( "nop ");
 1d2:	00 00       	nop
	asm( "nop ");
 1d4:	00 00       	nop
    asm( "nop ");
 1d6:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
 1d8:	5d 98       	cbi	0x0b, 5	; 11
 1da:	0a c0       	rjmp	.+20     	; 0x1f0 <WS2812B_Send_Byte+0x142>
  }else{
	WS2812B_PORT |=  (1<<WS2812B_bp);
 1dc:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
 1de:	00 00       	nop
    asm( "nop ");
 1e0:	00 00       	nop
    asm( "nop ");
 1e2:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
 1e4:	5d 98       	cbi	0x0b, 5	; 11
    asm( "nop ");
 1e6:	00 00       	nop
	asm( "nop ");
 1e8:	00 00       	nop
    asm( "nop ");
 1ea:	00 00       	nop
    asm( "nop ");
 1ec:	00 00       	nop
	asm( "nop ");
 1ee:	00 00       	nop
  }
  
  
  if(val & 0x01){
 1f0:	80 ff       	sbrs	r24, 0
 1f2:	0b c0       	rjmp	.+22     	; 0x20a <WS2812B_Send_Byte+0x15c>
	WS2812B_PORT |=  (1<<WS2812B_bp);
 1f4:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
 1f6:	00 00       	nop
    asm( "nop ");
 1f8:	00 00       	nop
    asm( "nop ");
 1fa:	00 00       	nop
    asm( "nop ");
 1fc:	00 00       	nop
    asm( "nop ");
 1fe:	00 00       	nop
    asm( "nop ");
 200:	00 00       	nop
	asm( "nop ");
 202:	00 00       	nop
    asm( "nop ");
 204:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
 206:	5d 98       	cbi	0x0b, 5	; 11
 208:	08 95       	ret
  }else{
	WS2812B_PORT |=  (1<<WS2812B_bp);
 20a:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
 20c:	00 00       	nop
    asm( "nop ");
 20e:	00 00       	nop
    asm( "nop ");
 210:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
 212:	5d 98       	cbi	0x0b, 5	; 11
    asm( "nop ");
 214:	00 00       	nop
	asm( "nop ");
 216:	00 00       	nop
    asm( "nop ");
 218:	00 00       	nop
    asm( "nop ");
 21a:	00 00       	nop
	asm( "nop ");
 21c:	00 00       	nop
 21e:	08 95       	ret

00000220 <WS2812B_Send_Pixel>:
  }
}

void WS2812B_Send_Pixel(uint8_t r, uint8_t g, uint8_t b){
 220:	0f 93       	push	r16
 222:	1f 93       	push	r17
 224:	18 2f       	mov	r17, r24
 226:	86 2f       	mov	r24, r22
 228:	04 2f       	mov	r16, r20
  WS2812B_Send_Byte(g);
 22a:	0e 94 57 00 	call	0xae	; 0xae <WS2812B_Send_Byte>
  WS2812B_Send_Byte(r);
 22e:	81 2f       	mov	r24, r17
 230:	0e 94 57 00 	call	0xae	; 0xae <WS2812B_Send_Byte>
  WS2812B_Send_Byte(b);
 234:	80 2f       	mov	r24, r16
 236:	0e 94 57 00 	call	0xae	; 0xae <WS2812B_Send_Byte>
}
 23a:	1f 91       	pop	r17
 23c:	0f 91       	pop	r16
 23e:	08 95       	ret

00000240 <WS2812B_Pixel_Delay>:

void WS2812B_Pixel_Delay(void){
 240:	80 e0       	ldi	r24, 0x00	; 0
 242:	90 e0       	ldi	r25, 0x00	; 0
  for(uint32_t i=0;i<40000;i++){
	asm( "nop ");
 244:	00 00       	nop
 246:	01 96       	adiw	r24, 0x01	; 1
  WS2812B_Send_Byte(r);
  WS2812B_Send_Byte(b);
}

void WS2812B_Pixel_Delay(void){
  for(uint32_t i=0;i<40000;i++){
 248:	2c e9       	ldi	r18, 0x9C	; 156
 24a:	80 34       	cpi	r24, 0x40	; 64
 24c:	92 07       	cpc	r25, r18
 24e:	d1 f7       	brne	.-12     	; 0x244 <WS2812B_Pixel_Delay+0x4>
	asm( "nop ");
  }
}
 250:	08 95       	ret

00000252 <WS2812_Clear_All_Pixels>:


void WS2812_Clear_All_Pixels(void){
 252:	1f 93       	push	r17
 254:	10 e0       	ldi	r17, 0x00	; 0
  for(uint8_t j=0;j<WS2812B_TOTAL_PIXEL;j++){
	WS2812B_Send_Pixel(0,0,0);
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	60 e0       	ldi	r22, 0x00	; 0
 25a:	40 e0       	ldi	r20, 0x00	; 0
 25c:	0e 94 10 01 	call	0x220	; 0x220 <WS2812B_Send_Pixel>
  }
}


void WS2812_Clear_All_Pixels(void){
  for(uint8_t j=0;j<WS2812B_TOTAL_PIXEL;j++){
 260:	1f 5f       	subi	r17, 0xFF	; 255
 262:	1a 30       	cpi	r17, 0x0A	; 10
 264:	c1 f7       	brne	.-16     	; 0x256 <WS2812_Clear_All_Pixels+0x4>
	WS2812B_Send_Pixel(0,0,0);
  }
}
 266:	1f 91       	pop	r17
 268:	08 95       	ret

0000026a <WS2812B_Init>:
#include <util/delay.h>
#include "ws2812b.h"


void WS2812B_Gpio_Init(void){
  WS2812B_DDR  |=  (1<<WS2812B_bp);
 26a:	55 9a       	sbi	0x0a, 5	; 10
  WS2812B_PORT &=~ (1<<WS2812B_bp);
 26c:	5d 98       	cbi	0x0b, 5	; 11
#define  HALT      2
  
  
void WS2812B_Init(void){
  WS2812B_Gpio_Init();
  WS2812_Clear_All_Pixels();
 26e:	0e 94 29 01 	call	0x252	; 0x252 <WS2812_Clear_All_Pixels>
  red=RED_MAX;
 272:	8f ef       	ldi	r24, 0xFF	; 255
 274:	80 93 00 01 	sts	0x0100, r24
  red_dir=HALT;
 278:	82 e0       	ldi	r24, 0x02	; 2
 27a:	80 93 03 01 	sts	0x0103, r24
  green_dir=HALT;
 27e:	80 93 04 01 	sts	0x0104, r24
  blue_dir=HALT;
 282:	80 93 05 01 	sts	0x0105, r24
}
 286:	08 95       	ret

00000288 <WS2812B_Rotate_All_Color>:

void WS2812B_Rotate_All_Color(void){
 288:	1f 93       	push	r17
 28a:	10 e0       	ldi	r17, 0x00	; 0
  for(uint8_t j=0;j<WS2812B_TOTAL_PIXEL;j++){
	WS2812B_Send_Pixel(red,green,blue);
 28c:	80 91 00 01 	lds	r24, 0x0100
 290:	60 91 01 01 	lds	r22, 0x0101
 294:	40 91 02 01 	lds	r20, 0x0102
 298:	0e 94 10 01 	call	0x220	; 0x220 <WS2812B_Send_Pixel>
  green_dir=HALT;
  blue_dir=HALT;
}

void WS2812B_Rotate_All_Color(void){
  for(uint8_t j=0;j<WS2812B_TOTAL_PIXEL;j++){
 29c:	1f 5f       	subi	r17, 0xFF	; 255
 29e:	1a 30       	cpi	r17, 0x0A	; 10
 2a0:	a9 f7       	brne	.-22     	; 0x28c <WS2812B_Rotate_All_Color+0x4>
	WS2812B_Send_Pixel(red,green,blue);
  }

  if(red_dir==UPCOUNT){
 2a2:	80 91 03 01 	lds	r24, 0x0103
 2a6:	88 23       	and	r24, r24
 2a8:	31 f4       	brne	.+12     	; 0x2b6 <WS2812B_Rotate_All_Color+0x2e>
	if(red<RED_MAX){
 2aa:	80 91 00 01 	lds	r24, 0x0100
 2ae:	8f 3f       	cpi	r24, 0xFF	; 255
 2b0:	59 f0       	breq	.+22     	; 0x2c8 <WS2812B_Rotate_All_Color+0x40>
	  red++;
 2b2:	8f 5f       	subi	r24, 0xFF	; 255
 2b4:	07 c0       	rjmp	.+14     	; 0x2c4 <WS2812B_Rotate_All_Color+0x3c>
	}
  }else if(red_dir==DOWNCOUNT){
 2b6:	81 30       	cpi	r24, 0x01	; 1
 2b8:	39 f4       	brne	.+14     	; 0x2c8 <WS2812B_Rotate_All_Color+0x40>
	if(red>0){
 2ba:	80 91 00 01 	lds	r24, 0x0100
 2be:	88 23       	and	r24, r24
 2c0:	19 f0       	breq	.+6      	; 0x2c8 <WS2812B_Rotate_All_Color+0x40>
	  red--;
 2c2:	81 50       	subi	r24, 0x01	; 1
 2c4:	80 93 00 01 	sts	0x0100, r24
	}
  }
	
  if(green_dir==UPCOUNT){
 2c8:	80 91 04 01 	lds	r24, 0x0104
 2cc:	88 23       	and	r24, r24
 2ce:	31 f4       	brne	.+12     	; 0x2dc <WS2812B_Rotate_All_Color+0x54>
	if(green<GREEN_MAX){
 2d0:	80 91 01 01 	lds	r24, 0x0101
 2d4:	8f 3f       	cpi	r24, 0xFF	; 255
 2d6:	59 f0       	breq	.+22     	; 0x2ee <WS2812B_Rotate_All_Color+0x66>
	  green++;
 2d8:	8f 5f       	subi	r24, 0xFF	; 255
 2da:	07 c0       	rjmp	.+14     	; 0x2ea <WS2812B_Rotate_All_Color+0x62>
	}
  }else if(green_dir==DOWNCOUNT){
 2dc:	81 30       	cpi	r24, 0x01	; 1
 2de:	39 f4       	brne	.+14     	; 0x2ee <WS2812B_Rotate_All_Color+0x66>
	if(green>0){
 2e0:	80 91 01 01 	lds	r24, 0x0101
 2e4:	88 23       	and	r24, r24
 2e6:	19 f0       	breq	.+6      	; 0x2ee <WS2812B_Rotate_All_Color+0x66>
	  green--;
 2e8:	81 50       	subi	r24, 0x01	; 1
 2ea:	80 93 01 01 	sts	0x0101, r24
	}
  }

  if(blue_dir==UPCOUNT){
 2ee:	80 91 05 01 	lds	r24, 0x0105
 2f2:	88 23       	and	r24, r24
 2f4:	31 f4       	brne	.+12     	; 0x302 <WS2812B_Rotate_All_Color+0x7a>
	if(blue<BLUE_MAX){
 2f6:	80 91 02 01 	lds	r24, 0x0102
 2fa:	8f 3f       	cpi	r24, 0xFF	; 255
 2fc:	59 f0       	breq	.+22     	; 0x314 <WS2812B_Rotate_All_Color+0x8c>
	  blue++;
 2fe:	8f 5f       	subi	r24, 0xFF	; 255
 300:	07 c0       	rjmp	.+14     	; 0x310 <WS2812B_Rotate_All_Color+0x88>
	}
  }else if(blue_dir==DOWNCOUNT){
 302:	81 30       	cpi	r24, 0x01	; 1
 304:	39 f4       	brne	.+14     	; 0x314 <WS2812B_Rotate_All_Color+0x8c>
	if(blue>0){
 306:	80 91 02 01 	lds	r24, 0x0102
 30a:	88 23       	and	r24, r24
 30c:	19 f0       	breq	.+6      	; 0x314 <WS2812B_Rotate_All_Color+0x8c>
	  blue--;
 30e:	81 50       	subi	r24, 0x01	; 1
 310:	80 93 02 01 	sts	0x0102, r24
	}
  }

  if     ((red == RED_MAX) && (green == 0  ) && (blue == 0)){
 314:	80 91 00 01 	lds	r24, 0x0100
 318:	8f 3f       	cpi	r24, 0xFF	; 255
 31a:	d9 f4       	brne	.+54     	; 0x352 <WS2812B_Rotate_All_Color+0xca>
 31c:	80 91 01 01 	lds	r24, 0x0101
 320:	88 23       	and	r24, r24
 322:	51 f4       	brne	.+20     	; 0x338 <WS2812B_Rotate_All_Color+0xb0>
 324:	80 91 02 01 	lds	r24, 0x0102
 328:	88 23       	and	r24, r24
 32a:	81 f5       	brne	.+96     	; 0x38c <WS2812B_Rotate_All_Color+0x104>
	red_dir   = HALT;
 32c:	82 e0       	ldi	r24, 0x02	; 2
 32e:	80 93 03 01 	sts	0x0103, r24
	green_dir = UPCOUNT;
 332:	10 92 04 01 	sts	0x0104, r1
 336:	38 c0       	rjmp	.+112    	; 0x3a8 <WS2812B_Rotate_All_Color+0x120>
	blue_dir  = HALT;
  }
  else if((red == RED_MAX) && (green == GREEN_MAX) && (blue == 0)){
 338:	8f 3f       	cpi	r24, 0xFF	; 255
 33a:	41 f5       	brne	.+80     	; 0x38c <WS2812B_Rotate_All_Color+0x104>
 33c:	80 91 02 01 	lds	r24, 0x0102
 340:	88 23       	and	r24, r24
 342:	21 f5       	brne	.+72     	; 0x38c <WS2812B_Rotate_All_Color+0x104>
	red_dir   = DOWNCOUNT;
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	80 93 03 01 	sts	0x0103, r24
	green_dir = HALT;
 34a:	82 e0       	ldi	r24, 0x02	; 2
 34c:	80 93 04 01 	sts	0x0104, r24
 350:	2b c0       	rjmp	.+86     	; 0x3a8 <WS2812B_Rotate_All_Color+0x120>
	blue_dir  = HALT;
  }	
  else if((red == 0  ) && (green == GREEN_MAX) && (blue == 0)){
 352:	88 23       	and	r24, r24
 354:	c9 f4       	brne	.+50     	; 0x388 <WS2812B_Rotate_All_Color+0x100>
 356:	80 91 01 01 	lds	r24, 0x0101
 35a:	8f 3f       	cpi	r24, 0xFF	; 255
 35c:	39 f5       	brne	.+78     	; 0x3ac <WS2812B_Rotate_All_Color+0x124>
 35e:	80 91 02 01 	lds	r24, 0x0102
 362:	88 23       	and	r24, r24
 364:	41 f4       	brne	.+16     	; 0x376 <WS2812B_Rotate_All_Color+0xee>
	red_dir   = HALT;
 366:	82 e0       	ldi	r24, 0x02	; 2
 368:	80 93 03 01 	sts	0x0103, r24
	green_dir = HALT;
 36c:	80 93 04 01 	sts	0x0104, r24
	blue_dir  = UPCOUNT;
 370:	10 92 05 01 	sts	0x0105, r1
 374:	1b c0       	rjmp	.+54     	; 0x3ac <WS2812B_Rotate_All_Color+0x124>
  }

  else if((red == 0  ) && (green == GREEN_MAX) && (blue == BLUE_MAX)){
 376:	8f 3f       	cpi	r24, 0xFF	; 255
 378:	c9 f4       	brne	.+50     	; 0x3ac <WS2812B_Rotate_All_Color+0x124>
	red_dir   = UPCOUNT;
 37a:	10 92 03 01 	sts	0x0103, r1
	green_dir = DOWNCOUNT;
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	80 93 04 01 	sts	0x0104, r24
	blue_dir  = HALT;
 384:	82 e0       	ldi	r24, 0x02	; 2
 386:	10 c0       	rjmp	.+32     	; 0x3a8 <WS2812B_Rotate_All_Color+0x120>
  /*else if((red == 0  ) && (green == 0) && (blue == BLUE_MAX)){
	red_dir   = UPCOUNT;
	green_dir = HALT;
	blue_dir  = HALT;
  }*/
  else if((red == RED_MAX) && (green == 0) && (blue == BLUE_MAX)){
 388:	8f 3f       	cpi	r24, 0xFF	; 255
 38a:	81 f4       	brne	.+32     	; 0x3ac <WS2812B_Rotate_All_Color+0x124>
 38c:	80 91 01 01 	lds	r24, 0x0101
 390:	88 23       	and	r24, r24
 392:	61 f4       	brne	.+24     	; 0x3ac <WS2812B_Rotate_All_Color+0x124>
 394:	80 91 02 01 	lds	r24, 0x0102
 398:	8f 3f       	cpi	r24, 0xFF	; 255
 39a:	41 f4       	brne	.+16     	; 0x3ac <WS2812B_Rotate_All_Color+0x124>
	red_dir   = HALT;
 39c:	82 e0       	ldi	r24, 0x02	; 2
 39e:	80 93 03 01 	sts	0x0103, r24
	green_dir = HALT;
 3a2:	80 93 04 01 	sts	0x0104, r24
	blue_dir  = DOWNCOUNT;
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	80 93 05 01 	sts	0x0105, r24
  }
 3ac:	1f 91       	pop	r17
 3ae:	08 95       	ret

000003b0 <_exit>:
 3b0:	f8 94       	cli

000003b2 <__stop_program>:
 3b2:	ff cf       	rjmp	.-2      	; 0x3b2 <__stop_program>
