
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  000016d2  00001766  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d7  00800132  00800132  00001798  2**0
                  ALLOC
  3 .debug_aranges 00000080  00000000  00000000  00001798  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000091a  00000000  00000000  00001818  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001e40  00000000  00000000  00002132  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000074a  00000000  00000000  00003f72  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001cea  00000000  00000000  000046bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000580  00000000  00000000  000063a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000914  00000000  00000000  00006928  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000158f  00000000  00000000  0000723c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002d0  00000000  00000000  000087cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 ea 0a 	jmp	0x15d4	; 0x15d4 <__vector_4>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 29 0b 	jmp	0x1652	; 0x1652 <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e2 ed       	ldi	r30, 0xD2	; 210
      7c:	f6 e1       	ldi	r31, 0x16	; 22
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a2 33       	cpi	r26, 0x32	; 50
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	12 e0       	ldi	r17, 0x02	; 2
      8c:	a2 e3       	ldi	r26, 0x32	; 50
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a9 30       	cpi	r26, 0x09	; 9
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 67 0b 	jmp	0x16ce	; 0x16ce <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
  0x00,0x10,0x20
};

uint8_t color_index=0, red_val=0, green_val=0, blue_val=0;

int main(void){
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29

  WS2812B_Init();
      aa:	0e 94 4a 01 	call	0x294	; 0x294 <WS2812B_Init>
  RGB_Animation_Init();
      ae:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <RGB_Animation_Init>
  debug_init();
      b2:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <debug_init>
  
  RGB_Clear_Buf_2D();
      b6:	0e 94 55 01 	call	0x2aa	; 0x2aa <RGB_Clear_Buf_2D>
  
  RGB_Set_Pixel(15,100,0,0);
      ba:	8f e0       	ldi	r24, 0x0F	; 15
      bc:	64 e6       	ldi	r22, 0x64	; 100
      be:	40 e0       	ldi	r20, 0x00	; 0
      c0:	20 e0       	ldi	r18, 0x00	; 0
      c2:	0e 94 60 01 	call	0x2c0	; 0x2c0 <RGB_Set_Pixel>
  
  RGB_Push_Buffer();
      c6:	0e 94 81 01 	call	0x302	; 0x302 <RGB_Push_Buffer>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
      ca:	cc e2       	ldi	r28, 0x2C	; 44
      cc:	d1 e0       	ldi	r29, 0x01	; 1
	//RGB_Animation_Slide_Fill_Mid(100,0,0);
	//RGB_Animation_Slide_Unfill_Mid(100,0,0);
	
	//RGB_Set_Pixel(15);
	
	RGB_Inc_Brightness(15,120,0,0);
      ce:	8f e0       	ldi	r24, 0x0F	; 15
      d0:	68 e7       	ldi	r22, 0x78	; 120
      d2:	40 e0       	ldi	r20, 0x00	; 0
      d4:	20 e0       	ldi	r18, 0x00	; 0
      d6:	0e 94 92 01 	call	0x324	; 0x324 <RGB_Inc_Brightness>
      da:	88 ee       	ldi	r24, 0xE8	; 232
      dc:	93 e0       	ldi	r25, 0x03	; 3
      de:	fe 01       	movw	r30, r28
      e0:	31 97       	sbiw	r30, 0x01	; 1
      e2:	f1 f7       	brne	.-4      	; 0xe0 <main+0x3a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
      e4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
      e6:	d9 f7       	brne	.-10     	; 0xde <main+0x38>
      e8:	f2 cf       	rjmp	.-28     	; 0xce <main+0x28>

000000ea <WS2812B_Gpio_Init>:
#include <util/delay.h>
#include "ws2812b.h"


void WS2812B_Gpio_Init(void){
  WS2812B_DDR  |=  (1<<WS2812B_bp);
      ea:	55 9a       	sbi	0x0a, 5	; 10
  WS2812B_PORT &=~ (1<<WS2812B_bp);
      ec:	5d 98       	cbi	0x0b, 5	; 11
}
      ee:	08 95       	ret

000000f0 <WS2812B_Send_Byte>:

void WS2812B_Send_Byte(uint8_t val){
  if(val & 0x80){
      f0:	87 ff       	sbrs	r24, 7
      f2:	0b c0       	rjmp	.+22     	; 0x10a <WS2812B_Send_Byte+0x1a>
	WS2812B_PORT |=  (1<<WS2812B_bp);
      f4:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
      f6:	00 00       	nop
    asm( "nop ");
      f8:	00 00       	nop
    asm( "nop ");
      fa:	00 00       	nop
    asm( "nop ");
      fc:	00 00       	nop
    asm( "nop ");
      fe:	00 00       	nop
    asm( "nop ");
     100:	00 00       	nop
	asm( "nop ");
     102:	00 00       	nop
    asm( "nop ");
     104:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
     106:	5d 98       	cbi	0x0b, 5	; 11
     108:	0a c0       	rjmp	.+20     	; 0x11e <WS2812B_Send_Byte+0x2e>
  }else{
	WS2812B_PORT |=  (1<<WS2812B_bp);
     10a:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
     10c:	00 00       	nop
    asm( "nop ");
     10e:	00 00       	nop
    asm( "nop ");
     110:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
     112:	5d 98       	cbi	0x0b, 5	; 11
    asm( "nop ");
     114:	00 00       	nop
	asm( "nop ");
     116:	00 00       	nop
    asm( "nop ");
     118:	00 00       	nop
    asm( "nop ");
     11a:	00 00       	nop
	asm( "nop ");
     11c:	00 00       	nop
  }
  
  
  if(val & 0x40){
     11e:	86 ff       	sbrs	r24, 6
     120:	0b c0       	rjmp	.+22     	; 0x138 <WS2812B_Send_Byte+0x48>
	WS2812B_PORT |=  (1<<WS2812B_bp);
     122:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
     124:	00 00       	nop
    asm( "nop ");
     126:	00 00       	nop
    asm( "nop ");
     128:	00 00       	nop
    asm( "nop ");
     12a:	00 00       	nop
    asm( "nop ");
     12c:	00 00       	nop
    asm( "nop ");
     12e:	00 00       	nop
	asm( "nop ");
     130:	00 00       	nop
    asm( "nop ");
     132:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
     134:	5d 98       	cbi	0x0b, 5	; 11
     136:	0a c0       	rjmp	.+20     	; 0x14c <WS2812B_Send_Byte+0x5c>
  }else{
	WS2812B_PORT |=  (1<<WS2812B_bp);
     138:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
     13a:	00 00       	nop
    asm( "nop ");
     13c:	00 00       	nop
    asm( "nop ");
     13e:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
     140:	5d 98       	cbi	0x0b, 5	; 11
    asm( "nop ");
     142:	00 00       	nop
	asm( "nop ");
     144:	00 00       	nop
    asm( "nop ");
     146:	00 00       	nop
    asm( "nop ");
     148:	00 00       	nop
	asm( "nop ");
     14a:	00 00       	nop
  }
  
  
  if(val & 0x20){
     14c:	85 ff       	sbrs	r24, 5
     14e:	0b c0       	rjmp	.+22     	; 0x166 <WS2812B_Send_Byte+0x76>
	WS2812B_PORT |=  (1<<WS2812B_bp);
     150:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
     152:	00 00       	nop
    asm( "nop ");
     154:	00 00       	nop
    asm( "nop ");
     156:	00 00       	nop
    asm( "nop ");
     158:	00 00       	nop
    asm( "nop ");
     15a:	00 00       	nop
    asm( "nop ");
     15c:	00 00       	nop
	asm( "nop ");
     15e:	00 00       	nop
    asm( "nop ");
     160:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
     162:	5d 98       	cbi	0x0b, 5	; 11
     164:	0a c0       	rjmp	.+20     	; 0x17a <WS2812B_Send_Byte+0x8a>
  }else{
	WS2812B_PORT |=  (1<<WS2812B_bp);
     166:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
     168:	00 00       	nop
    asm( "nop ");
     16a:	00 00       	nop
    asm( "nop ");
     16c:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
     16e:	5d 98       	cbi	0x0b, 5	; 11
    asm( "nop ");
     170:	00 00       	nop
	asm( "nop ");
     172:	00 00       	nop
    asm( "nop ");
     174:	00 00       	nop
    asm( "nop ");
     176:	00 00       	nop
	asm( "nop ");
     178:	00 00       	nop
  }
  
  
  if(val & 0x10){
     17a:	84 ff       	sbrs	r24, 4
     17c:	0b c0       	rjmp	.+22     	; 0x194 <WS2812B_Send_Byte+0xa4>
	WS2812B_PORT |=  (1<<WS2812B_bp);
     17e:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
     180:	00 00       	nop
    asm( "nop ");
     182:	00 00       	nop
    asm( "nop ");
     184:	00 00       	nop
    asm( "nop ");
     186:	00 00       	nop
    asm( "nop ");
     188:	00 00       	nop
    asm( "nop ");
     18a:	00 00       	nop
	asm( "nop ");
     18c:	00 00       	nop
    asm( "nop ");
     18e:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
     190:	5d 98       	cbi	0x0b, 5	; 11
     192:	0a c0       	rjmp	.+20     	; 0x1a8 <WS2812B_Send_Byte+0xb8>
  }else{
	WS2812B_PORT |=  (1<<WS2812B_bp);
     194:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
     196:	00 00       	nop
    asm( "nop ");
     198:	00 00       	nop
    asm( "nop ");
     19a:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
     19c:	5d 98       	cbi	0x0b, 5	; 11
    asm( "nop ");
     19e:	00 00       	nop
	asm( "nop ");
     1a0:	00 00       	nop
    asm( "nop ");
     1a2:	00 00       	nop
    asm( "nop ");
     1a4:	00 00       	nop
	asm( "nop ");
     1a6:	00 00       	nop
  }
  
  
  if(val & 0x08){
     1a8:	83 ff       	sbrs	r24, 3
     1aa:	0b c0       	rjmp	.+22     	; 0x1c2 <WS2812B_Send_Byte+0xd2>
	WS2812B_PORT |=  (1<<WS2812B_bp);
     1ac:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
     1ae:	00 00       	nop
    asm( "nop ");
     1b0:	00 00       	nop
    asm( "nop ");
     1b2:	00 00       	nop
    asm( "nop ");
     1b4:	00 00       	nop
    asm( "nop ");
     1b6:	00 00       	nop
    asm( "nop ");
     1b8:	00 00       	nop
	asm( "nop ");
     1ba:	00 00       	nop
    asm( "nop ");
     1bc:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
     1be:	5d 98       	cbi	0x0b, 5	; 11
     1c0:	0a c0       	rjmp	.+20     	; 0x1d6 <WS2812B_Send_Byte+0xe6>
  }else{
	WS2812B_PORT |=  (1<<WS2812B_bp);
     1c2:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
     1c4:	00 00       	nop
    asm( "nop ");
     1c6:	00 00       	nop
    asm( "nop ");
     1c8:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
     1ca:	5d 98       	cbi	0x0b, 5	; 11
    asm( "nop ");
     1cc:	00 00       	nop
	asm( "nop ");
     1ce:	00 00       	nop
    asm( "nop ");
     1d0:	00 00       	nop
    asm( "nop ");
     1d2:	00 00       	nop
	asm( "nop ");
     1d4:	00 00       	nop
  }
  
  
  if(val & 0x04){
     1d6:	82 ff       	sbrs	r24, 2
     1d8:	0b c0       	rjmp	.+22     	; 0x1f0 <WS2812B_Send_Byte+0x100>
	WS2812B_PORT |=  (1<<WS2812B_bp);
     1da:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
     1dc:	00 00       	nop
    asm( "nop ");
     1de:	00 00       	nop
    asm( "nop ");
     1e0:	00 00       	nop
    asm( "nop ");
     1e2:	00 00       	nop
    asm( "nop ");
     1e4:	00 00       	nop
    asm( "nop ");
     1e6:	00 00       	nop
	asm( "nop ");
     1e8:	00 00       	nop
    asm( "nop ");
     1ea:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
     1ec:	5d 98       	cbi	0x0b, 5	; 11
     1ee:	0a c0       	rjmp	.+20     	; 0x204 <WS2812B_Send_Byte+0x114>
  }else{
	WS2812B_PORT |=  (1<<WS2812B_bp);
     1f0:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
     1f2:	00 00       	nop
    asm( "nop ");
     1f4:	00 00       	nop
    asm( "nop ");
     1f6:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
     1f8:	5d 98       	cbi	0x0b, 5	; 11
    asm( "nop ");
     1fa:	00 00       	nop
	asm( "nop ");
     1fc:	00 00       	nop
    asm( "nop ");
     1fe:	00 00       	nop
    asm( "nop ");
     200:	00 00       	nop
	asm( "nop ");
     202:	00 00       	nop
  }
  
  
  if(val & 0x02){
     204:	81 ff       	sbrs	r24, 1
     206:	0b c0       	rjmp	.+22     	; 0x21e <WS2812B_Send_Byte+0x12e>
	WS2812B_PORT |=  (1<<WS2812B_bp);
     208:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
     20a:	00 00       	nop
    asm( "nop ");
     20c:	00 00       	nop
    asm( "nop ");
     20e:	00 00       	nop
    asm( "nop ");
     210:	00 00       	nop
    asm( "nop ");
     212:	00 00       	nop
    asm( "nop ");
     214:	00 00       	nop
	asm( "nop ");
     216:	00 00       	nop
    asm( "nop ");
     218:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
     21a:	5d 98       	cbi	0x0b, 5	; 11
     21c:	0a c0       	rjmp	.+20     	; 0x232 <WS2812B_Send_Byte+0x142>
  }else{
	WS2812B_PORT |=  (1<<WS2812B_bp);
     21e:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
     220:	00 00       	nop
    asm( "nop ");
     222:	00 00       	nop
    asm( "nop ");
     224:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
     226:	5d 98       	cbi	0x0b, 5	; 11
    asm( "nop ");
     228:	00 00       	nop
	asm( "nop ");
     22a:	00 00       	nop
    asm( "nop ");
     22c:	00 00       	nop
    asm( "nop ");
     22e:	00 00       	nop
	asm( "nop ");
     230:	00 00       	nop
  }
  
  
  if(val & 0x01){
     232:	80 ff       	sbrs	r24, 0
     234:	0b c0       	rjmp	.+22     	; 0x24c <WS2812B_Send_Byte+0x15c>
	WS2812B_PORT |=  (1<<WS2812B_bp);
     236:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
     238:	00 00       	nop
    asm( "nop ");
     23a:	00 00       	nop
    asm( "nop ");
     23c:	00 00       	nop
    asm( "nop ");
     23e:	00 00       	nop
    asm( "nop ");
     240:	00 00       	nop
    asm( "nop ");
     242:	00 00       	nop
	asm( "nop ");
     244:	00 00       	nop
    asm( "nop ");
     246:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
     248:	5d 98       	cbi	0x0b, 5	; 11
     24a:	08 95       	ret
  }else{
	WS2812B_PORT |=  (1<<WS2812B_bp);
     24c:	5d 9a       	sbi	0x0b, 5	; 11
    asm( "nop ");
     24e:	00 00       	nop
    asm( "nop ");
     250:	00 00       	nop
    asm( "nop ");
     252:	00 00       	nop
    WS2812B_PORT &=~ (1<<WS2812B_bp);
     254:	5d 98       	cbi	0x0b, 5	; 11
    asm( "nop ");
     256:	00 00       	nop
	asm( "nop ");
     258:	00 00       	nop
    asm( "nop ");
     25a:	00 00       	nop
    asm( "nop ");
     25c:	00 00       	nop
	asm( "nop ");
     25e:	00 00       	nop
     260:	08 95       	ret

00000262 <WS2812B_Send_Pixel>:
  }
}

void WS2812B_Send_Pixel(uint8_t r, uint8_t g, uint8_t b){
     262:	0f 93       	push	r16
     264:	1f 93       	push	r17
     266:	18 2f       	mov	r17, r24
     268:	86 2f       	mov	r24, r22
     26a:	04 2f       	mov	r16, r20
  WS2812B_Send_Byte(g);
     26c:	0e 94 78 00 	call	0xf0	; 0xf0 <WS2812B_Send_Byte>
  WS2812B_Send_Byte(r);
     270:	81 2f       	mov	r24, r17
     272:	0e 94 78 00 	call	0xf0	; 0xf0 <WS2812B_Send_Byte>
  WS2812B_Send_Byte(b);
     276:	80 2f       	mov	r24, r16
     278:	0e 94 78 00 	call	0xf0	; 0xf0 <WS2812B_Send_Byte>
}
     27c:	1f 91       	pop	r17
     27e:	0f 91       	pop	r16
     280:	08 95       	ret

00000282 <WS2812B_Pixel_Delay>:

void WS2812B_Pixel_Delay(void){
     282:	80 e0       	ldi	r24, 0x00	; 0
     284:	90 e0       	ldi	r25, 0x00	; 0
  for(uint32_t i=0;i<40000;i++){
	asm( "nop ");
     286:	00 00       	nop
     288:	01 96       	adiw	r24, 0x01	; 1
  WS2812B_Send_Byte(r);
  WS2812B_Send_Byte(b);
}

void WS2812B_Pixel_Delay(void){
  for(uint32_t i=0;i<40000;i++){
     28a:	2c e9       	ldi	r18, 0x9C	; 156
     28c:	80 34       	cpi	r24, 0x40	; 64
     28e:	92 07       	cpc	r25, r18
     290:	d1 f7       	brne	.-12     	; 0x286 <WS2812B_Pixel_Delay+0x4>
	asm( "nop ");
  }
}
     292:	08 95       	ret

00000294 <WS2812B_Init>:
#include <util/delay.h>
#include "ws2812b.h"


void WS2812B_Gpio_Init(void){
  WS2812B_DDR  |=  (1<<WS2812B_bp);
     294:	55 9a       	sbi	0x0a, 5	; 10
  WS2812B_PORT &=~ (1<<WS2812B_bp);
     296:	5d 98       	cbi	0x0b, 5	; 11
}

  
void WS2812B_Init(void){
  WS2812B_Gpio_Init();
}
     298:	08 95       	ret

0000029a <RGB_Animation_Clear_Pixel_Buf>:
  uint8_t PixelBuf[WS2812B_ANIMATION_PIXELS];
}rgb_anim_t;

rgb_anim_t RGBAnim;

void RGB_Animation_Clear_Pixel_Buf(void){
     29a:	e9 e4       	ldi	r30, 0x49	; 73
     29c:	f1 e0       	ldi	r31, 0x01	; 1
  for(uint16_t i=0;i<WS2812B_ANIMATION_PIXELS;i++){
	RGBAnim.PixelBuf[i]=0;
     29e:	11 92       	st	Z+, r1
}rgb_anim_t;

rgb_anim_t RGBAnim;

void RGB_Animation_Clear_Pixel_Buf(void){
  for(uint16_t i=0;i<WS2812B_ANIMATION_PIXELS;i++){
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	e6 36       	cpi	r30, 0x66	; 102
     2a4:	f8 07       	cpc	r31, r24
     2a6:	d9 f7       	brne	.-10     	; 0x29e <RGB_Animation_Clear_Pixel_Buf+0x4>
	RGBAnim.PixelBuf[i]=0;
  }
}
     2a8:	08 95       	ret

000002aa <RGB_Clear_Buf_2D>:
}rgb_t;

rgb_t RGB;


void RGB_Clear_Buf_2D(void){
     2aa:	e8 e6       	ldi	r30, 0x68	; 104
     2ac:	f1 e0       	ldi	r31, 0x01	; 1
  for (uint8_t i=0;i<WS2812B_ANIMATION_PIXELS;i++){
    RGB.PixelBuf[i][0]=0;
     2ae:	10 82       	st	Z, r1
	RGB.PixelBuf[i][1]=0;
     2b0:	11 82       	std	Z+1, r1	; 0x01
	RGB.PixelBuf[i][2]=0;
     2b2:	12 82       	std	Z+2, r1	; 0x02
     2b4:	34 96       	adiw	r30, 0x04	; 4

rgb_t RGB;


void RGB_Clear_Buf_2D(void){
  for (uint8_t i=0;i<WS2812B_ANIMATION_PIXELS;i++){
     2b6:	81 e0       	ldi	r24, 0x01	; 1
     2b8:	ec 3d       	cpi	r30, 0xDC	; 220
     2ba:	f8 07       	cpc	r31, r24
     2bc:	c1 f7       	brne	.-16     	; 0x2ae <RGB_Clear_Buf_2D+0x4>
    RGB.PixelBuf[i][0]=0;
	RGB.PixelBuf[i][1]=0;
	RGB.PixelBuf[i][2]=0;
  }
}
     2be:	08 95       	ret

000002c0 <RGB_Set_Pixel>:

void RGB_Set_Pixel(uint8_t pos, uint8_t red, uint8_t green, uint8_t blue){
  RGB.PixelBuf[pos][0]=red;
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	fc 01       	movw	r30, r24
     2c4:	ee 0f       	add	r30, r30
     2c6:	ff 1f       	adc	r31, r31
     2c8:	ee 0f       	add	r30, r30
     2ca:	ff 1f       	adc	r31, r31
     2cc:	a6 e6       	ldi	r26, 0x66	; 102
     2ce:	b1 e0       	ldi	r27, 0x01	; 1
     2d0:	ea 0f       	add	r30, r26
     2d2:	fb 1f       	adc	r31, r27
     2d4:	62 83       	std	Z+2, r22	; 0x02
  RGB.PixelBuf[pos][1]=green;
     2d6:	fc 01       	movw	r30, r24
     2d8:	ee 0f       	add	r30, r30
     2da:	ff 1f       	adc	r31, r31
     2dc:	ee 0f       	add	r30, r30
     2de:	ff 1f       	adc	r31, r31
     2e0:	ea 0f       	add	r30, r26
     2e2:	fb 1f       	adc	r31, r27
     2e4:	43 83       	std	Z+3, r20	; 0x03
  RGB.PixelBuf[pos][2]=blue;
     2e6:	01 96       	adiw	r24, 0x01	; 1
     2e8:	88 0f       	add	r24, r24
     2ea:	99 1f       	adc	r25, r25
     2ec:	88 0f       	add	r24, r24
     2ee:	99 1f       	adc	r25, r25
     2f0:	a8 0f       	add	r26, r24
     2f2:	b9 1f       	adc	r27, r25
     2f4:	2c 93       	st	X, r18
}
     2f6:	08 95       	ret

000002f8 <RGB_Get_Mid_Point>:
    temp/=2;
	RGB.MaxNumLedEven=1;
  }else{
    temp/=2;
	temp+=1;
	RGB.MaxNumLedEven=0;
     2f8:	10 92 67 01 	sts	0x0167, r1
  }
  return temp;
}
     2fc:	8f e0       	ldi	r24, 0x0F	; 15
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	08 95       	ret

00000302 <RGB_Push_Buffer>:
  RGB.PixelBuf[pos][1]=green;
  RGB.PixelBuf[pos][2]=blue;
}


void RGB_Push_Buffer(void){
     302:	cf 93       	push	r28
     304:	df 93       	push	r29
     306:	c8 e6       	ldi	r28, 0x68	; 104
     308:	d1 e0       	ldi	r29, 0x01	; 1
  for(uint8_t i=0;i<WS2812B_ANIMATION_PIXELS;i++){
	WS2812B_Send_Pixel(RGB.PixelBuf[i][0], RGB.PixelBuf[i][1], RGB.PixelBuf[i][2]);
     30a:	88 81       	ld	r24, Y
     30c:	69 81       	ldd	r22, Y+1	; 0x01
     30e:	4a 81       	ldd	r20, Y+2	; 0x02
     310:	0e 94 31 01 	call	0x262	; 0x262 <WS2812B_Send_Pixel>
     314:	24 96       	adiw	r28, 0x04	; 4
  RGB.PixelBuf[pos][2]=blue;
}


void RGB_Push_Buffer(void){
  for(uint8_t i=0;i<WS2812B_ANIMATION_PIXELS;i++){
     316:	81 e0       	ldi	r24, 0x01	; 1
     318:	cc 3d       	cpi	r28, 0xDC	; 220
     31a:	d8 07       	cpc	r29, r24
     31c:	b1 f7       	brne	.-20     	; 0x30a <RGB_Push_Buffer+0x8>
	WS2812B_Send_Pixel(RGB.PixelBuf[i][0], RGB.PixelBuf[i][1], RGB.PixelBuf[i][2]);
  }
}
     31e:	df 91       	pop	r29
     320:	cf 91       	pop	r28
     322:	08 95       	ret

00000324 <RGB_Inc_Brightness>:
	RGB.MaxNumLedEven=0;
  }
  return temp;
}

void RGB_Inc_Brightness(uint8_t pos, uint8_t red, uint8_t green, uint8_t blue){
     324:	af 92       	push	r10
     326:	bf 92       	push	r11
     328:	cf 92       	push	r12
     32a:	df 92       	push	r13
     32c:	ef 92       	push	r14
     32e:	ff 92       	push	r15
     330:	0f 93       	push	r16
     332:	1f 93       	push	r17
     334:	cf 93       	push	r28
     336:	df 93       	push	r29
     338:	06 2f       	mov	r16, r22
     33a:	10 e0       	ldi	r17, 0x00	; 0
	RGB.PixelBuf[i][2]=0;
  }
}

void RGB_Set_Pixel(uint8_t pos, uint8_t red, uint8_t green, uint8_t blue){
  RGB.PixelBuf[pos][0]=red;
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	88 0f       	add	r24, r24
     340:	99 1f       	adc	r25, r25
     342:	88 0f       	add	r24, r24
     344:	99 1f       	adc	r25, r25
     346:	28 e6       	ldi	r18, 0x68	; 104
     348:	c2 2e       	mov	r12, r18
     34a:	21 e0       	ldi	r18, 0x01	; 1
     34c:	d2 2e       	mov	r13, r18
     34e:	c8 0e       	add	r12, r24
     350:	d9 1e       	adc	r13, r25
  RGB.PixelBuf[pos][1]=green;
     352:	a9 e6       	ldi	r26, 0x69	; 105
     354:	ea 2e       	mov	r14, r26
     356:	a1 e0       	ldi	r26, 0x01	; 1
     358:	fa 2e       	mov	r15, r26
     35a:	e8 0e       	add	r14, r24
     35c:	f9 1e       	adc	r15, r25
  RGB.PixelBuf[pos][2]=blue;
     35e:	ec 01       	movw	r28, r24
     360:	c6 59       	subi	r28, 0x96	; 150
     362:	de 4f       	sbci	r29, 0xFE	; 254
     364:	e8 eb       	ldi	r30, 0xB8	; 184
     366:	ae 2e       	mov	r10, r30
     368:	eb e0       	ldi	r30, 0x0B	; 11
     36a:	be 2e       	mov	r11, r30
     36c:	0b c0       	rjmp	.+22     	; 0x384 <RGB_Inc_Brightness+0x60>
	RGB.PixelBuf[i][2]=0;
  }
}

void RGB_Set_Pixel(uint8_t pos, uint8_t red, uint8_t green, uint8_t blue){
  RGB.PixelBuf[pos][0]=red;
     36e:	f6 01       	movw	r30, r12
     370:	10 83       	st	Z, r17
  RGB.PixelBuf[pos][1]=green;
     372:	f7 01       	movw	r30, r14
     374:	10 82       	st	Z, r1
  RGB.PixelBuf[pos][2]=blue;
     376:	18 82       	st	Y, r1

void RGB_Inc_Brightness(uint8_t pos, uint8_t red, uint8_t green, uint8_t blue){
  //if(RGB.PixelBuf[pos][3]==0){
    for(uint8_t i=0;i<red;i++){
      RGB_Set_Pixel(pos, i, 0, 0);
	  RGB_Push_Buffer();
     378:	0e 94 81 01 	call	0x302	; 0x302 <RGB_Push_Buffer>
     37c:	c5 01       	movw	r24, r10
     37e:	01 97       	sbiw	r24, 0x01	; 1
     380:	f1 f7       	brne	.-4      	; 0x37e <RGB_Inc_Brightness+0x5a>
  return temp;
}

void RGB_Inc_Brightness(uint8_t pos, uint8_t red, uint8_t green, uint8_t blue){
  //if(RGB.PixelBuf[pos][3]==0){
    for(uint8_t i=0;i<red;i++){
     382:	1f 5f       	subi	r17, 0xFF	; 255
     384:	10 17       	cp	r17, r16
     386:	98 f3       	brcs	.-26     	; 0x36e <RGB_Inc_Brightness+0x4a>
      RGB_Set_Pixel(pos, i, 0, 0);
	  RGB_Push_Buffer();
	  _delay_us(1000);
	}
  //}
}
     388:	df 91       	pop	r29
     38a:	cf 91       	pop	r28
     38c:	1f 91       	pop	r17
     38e:	0f 91       	pop	r16
     390:	ff 90       	pop	r15
     392:	ef 90       	pop	r14
     394:	df 90       	pop	r13
     396:	cf 90       	pop	r12
     398:	bf 90       	pop	r11
     39a:	af 90       	pop	r10
     39c:	08 95       	ret

0000039e <RGB_Animation_Brightness_Dec>:
    WS2812B_Send_Pixel(r,g,b);
	_delay_ms(10);
  }
}

void RGB_Animation_Brightness_Dec(uint8_t r, uint8_t g, uint8_t b){
     39e:	df 92       	push	r13
     3a0:	ef 92       	push	r14
     3a2:	ff 92       	push	r15
     3a4:	0f 93       	push	r16
     3a6:	1f 93       	push	r17
     3a8:	cf 93       	push	r28
     3aa:	df 93       	push	r29
     3ac:	d8 2e       	mov	r13, r24
     3ae:	e6 2e       	mov	r14, r22
     3b0:	f4 2e       	mov	r15, r20
     3b2:	c0 e0       	ldi	r28, 0x00	; 0
     3b4:	d0 e0       	ldi	r29, 0x00	; 0
     3b6:	00 e3       	ldi	r16, 0x30	; 48
     3b8:	15 e7       	ldi	r17, 0x75	; 117
  for(int i=0;i<WS2812B_ANIMATION_PIXELS;i++){
    WS2812B_Send_Pixel(r,g,b);
     3ba:	8d 2d       	mov	r24, r13
     3bc:	6e 2d       	mov	r22, r14
     3be:	4f 2d       	mov	r20, r15
     3c0:	0e 94 31 01 	call	0x262	; 0x262 <WS2812B_Send_Pixel>
     3c4:	c8 01       	movw	r24, r16
     3c6:	01 97       	sbiw	r24, 0x01	; 1
     3c8:	f1 f7       	brne	.-4      	; 0x3c6 <RGB_Animation_Brightness_Dec+0x28>
	_delay_ms(10);
  }
}

void RGB_Animation_Brightness_Dec(uint8_t r, uint8_t g, uint8_t b){
  for(int i=0;i<WS2812B_ANIMATION_PIXELS;i++){
     3ca:	21 96       	adiw	r28, 0x01	; 1
     3cc:	cd 31       	cpi	r28, 0x1D	; 29
     3ce:	d1 05       	cpc	r29, r1
     3d0:	a1 f7       	brne	.-24     	; 0x3ba <RGB_Animation_Brightness_Dec+0x1c>
    WS2812B_Send_Pixel(r,g,b);
	_delay_ms(10);
  }
}
     3d2:	df 91       	pop	r29
     3d4:	cf 91       	pop	r28
     3d6:	1f 91       	pop	r17
     3d8:	0f 91       	pop	r16
     3da:	ff 90       	pop	r15
     3dc:	ef 90       	pop	r14
     3de:	df 90       	pop	r13
     3e0:	08 95       	ret

000003e2 <RGB_Animation_Brightness_Inc>:
	RGBAnim.PixelBuf[i]=0;
  }
}


void RGB_Animation_Brightness_Inc(uint8_t r, uint8_t g, uint8_t b){
     3e2:	cf 92       	push	r12
     3e4:	df 92       	push	r13
     3e6:	ff 92       	push	r15
     3e8:	0f 93       	push	r16
     3ea:	1f 93       	push	r17
     3ec:	cf 93       	push	r28
     3ee:	df 93       	push	r29
     3f0:	f8 2e       	mov	r15, r24
     3f2:	06 2f       	mov	r16, r22
     3f4:	14 2f       	mov	r17, r20
  RGBAnim.MaxVal=r;
     3f6:	80 93 44 01 	sts	0x0144, r24
  
  if(g>RGBAnim.MaxVal){
     3fa:	86 17       	cp	r24, r22
     3fc:	10 f4       	brcc	.+4      	; 0x402 <RGB_Animation_Brightness_Inc+0x20>
    RGBAnim.MaxVal=g;
     3fe:	60 93 44 01 	sts	0x0144, r22
  }
  
  if(b>RGBAnim.MaxVal){
     402:	80 91 44 01 	lds	r24, 0x0144
     406:	81 17       	cp	r24, r17
     408:	10 f4       	brcc	.+4      	; 0x40e <RGB_Animation_Brightness_Inc+0x2c>
    RGBAnim.MaxVal=b;
     40a:	10 93 44 01 	sts	0x0144, r17
     40e:	c0 e0       	ldi	r28, 0x00	; 0
     410:	d0 e0       	ldi	r29, 0x00	; 0
     412:	40 e3       	ldi	r20, 0x30	; 48
     414:	c4 2e       	mov	r12, r20
     416:	45 e7       	ldi	r20, 0x75	; 117
     418:	d4 2e       	mov	r13, r20
  }
  
  
  for(int i=0;i<WS2812B_ANIMATION_PIXELS;i++){
    WS2812B_Send_Pixel(r,g,b);
     41a:	8f 2d       	mov	r24, r15
     41c:	60 2f       	mov	r22, r16
     41e:	41 2f       	mov	r20, r17
     420:	0e 94 31 01 	call	0x262	; 0x262 <WS2812B_Send_Pixel>
     424:	c6 01       	movw	r24, r12
     426:	01 97       	sbiw	r24, 0x01	; 1
     428:	f1 f7       	brne	.-4      	; 0x426 <RGB_Animation_Brightness_Inc+0x44>
  if(b>RGBAnim.MaxVal){
    RGBAnim.MaxVal=b;
  }
  
  
  for(int i=0;i<WS2812B_ANIMATION_PIXELS;i++){
     42a:	21 96       	adiw	r28, 0x01	; 1
     42c:	cd 31       	cpi	r28, 0x1D	; 29
     42e:	d1 05       	cpc	r29, r1
     430:	a1 f7       	brne	.-24     	; 0x41a <RGB_Animation_Brightness_Inc+0x38>
    WS2812B_Send_Pixel(r,g,b);
	_delay_ms(10);
  }
}
     432:	df 91       	pop	r29
     434:	cf 91       	pop	r28
     436:	1f 91       	pop	r17
     438:	0f 91       	pop	r16
     43a:	ff 90       	pop	r15
     43c:	df 90       	pop	r13
     43e:	cf 90       	pop	r12
     440:	08 95       	ret

00000442 <RGB_Animation_Slide>:
}


uint16_t  color=0,color1=0,color2=0,color3=0;

void RGB_Animation_Slide(void){
     442:	8f 92       	push	r8
     444:	9f 92       	push	r9
     446:	af 92       	push	r10
     448:	bf 92       	push	r11
     44a:	cf 92       	push	r12
     44c:	df 92       	push	r13
     44e:	ef 92       	push	r14
     450:	ff 92       	push	r15
     452:	0f 93       	push	r16
     454:	1f 93       	push	r17
     456:	cf 93       	push	r28
     458:	df 93       	push	r29
  uint16_t leading_blank=0;
  uint16_t trailing_blank=0;
  
  if(color==0){
     45a:	80 91 3c 01 	lds	r24, 0x013C
     45e:	90 91 3d 01 	lds	r25, 0x013D
     462:	00 97       	sbiw	r24, 0x00	; 0
     464:	d1 f4       	brne	.+52     	; 0x49a <RGB_Animation_Slide+0x58>
	  color1=0xFF;
     466:	8f ef       	ldi	r24, 0xFF	; 255
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	90 93 3f 01 	sts	0x013F, r25
     46e:	80 93 3e 01 	sts	0x013E, r24
	  color2=0x00;
     472:	10 92 41 01 	sts	0x0141, r1
     476:	10 92 40 01 	sts	0x0140, r1
	  color3=0x00;
     47a:	10 92 43 01 	sts	0x0143, r1
     47e:	10 92 42 01 	sts	0x0142, r1
     482:	00 e0       	ldi	r16, 0x00	; 0
     484:	10 e0       	ldi	r17, 0x00	; 0
     486:	ee 24       	eor	r14, r14
     488:	ff 24       	eor	r15, r15
	}
  
  for(uint16_t i=0;i<WS2812B_ANIMATION_PIXELS;i++){
    
	trailing_blank = WS2812B_ANIMATION_PIXELS;
	trailing_blank-= leading_blank;
     48a:	6d e1       	ldi	r22, 0x1D	; 29
     48c:	86 2e       	mov	r8, r22
     48e:	91 2c       	mov	r9, r1
     490:	58 eb       	ldi	r21, 0xB8	; 184
     492:	a5 2e       	mov	r10, r21
     494:	5b e0       	ldi	r21, 0x0B	; 11
     496:	b5 2e       	mov	r11, r21
     498:	37 c0       	rjmp	.+110    	; 0x508 <RGB_Animation_Slide+0xc6>
  if(color==0){
	  color1=0xFF;
	  color2=0x00;
	  color3=0x00;
	}
	else if(color==1){
     49a:	81 30       	cpi	r24, 0x01	; 1
     49c:	91 05       	cpc	r25, r1
     49e:	39 f4       	brne	.+14     	; 0x4ae <RGB_Animation_Slide+0x6c>
	  color1=0xFF;
     4a0:	8f ef       	ldi	r24, 0xFF	; 255
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	90 93 3f 01 	sts	0x013F, r25
     4a8:	80 93 3e 01 	sts	0x013E, r24
     4ac:	09 c0       	rjmp	.+18     	; 0x4c0 <RGB_Animation_Slide+0x7e>
	  color2=0xFF;
	  color3=0x00;
	}
	else if(color==2){
     4ae:	82 30       	cpi	r24, 0x02	; 2
     4b0:	91 05       	cpc	r25, r1
     4b2:	59 f4       	brne	.+22     	; 0x4ca <RGB_Animation_Slide+0x88>
	  color1=0x00;
     4b4:	10 92 3f 01 	sts	0x013F, r1
     4b8:	10 92 3e 01 	sts	0x013E, r1
	  color2=0xFF;
     4bc:	8f ef       	ldi	r24, 0xFF	; 255
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	90 93 41 01 	sts	0x0141, r25
     4c4:	80 93 40 01 	sts	0x0140, r24
     4c8:	d8 cf       	rjmp	.-80     	; 0x47a <RGB_Animation_Slide+0x38>
	  color3=0x00;
	}
	else if(color==3){
     4ca:	83 30       	cpi	r24, 0x03	; 3
     4cc:	91 05       	cpc	r25, r1
     4ce:	59 f4       	brne	.+22     	; 0x4e6 <RGB_Animation_Slide+0xa4>
	  color1=0x00;
     4d0:	10 92 3f 01 	sts	0x013F, r1
     4d4:	10 92 3e 01 	sts	0x013E, r1
	  color2=0xFF;
     4d8:	8f ef       	ldi	r24, 0xFF	; 255
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	90 93 41 01 	sts	0x0141, r25
     4e0:	80 93 40 01 	sts	0x0140, r24
     4e4:	0c c0       	rjmp	.+24     	; 0x4fe <RGB_Animation_Slide+0xbc>
	  color3=0xFF;
	}
	else if(color==4){
     4e6:	04 97       	sbiw	r24, 0x04	; 4
     4e8:	61 f6       	brne	.-104    	; 0x482 <RGB_Animation_Slide+0x40>
	  color1=0x00;
     4ea:	10 92 3f 01 	sts	0x013F, r1
     4ee:	10 92 3e 01 	sts	0x013E, r1
	  color2=0x00;
     4f2:	10 92 41 01 	sts	0x0141, r1
     4f6:	10 92 40 01 	sts	0x0140, r1
	  color3=0xFF;
     4fa:	8f ef       	ldi	r24, 0xFF	; 255
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	90 93 43 01 	sts	0x0143, r25
     502:	80 93 42 01 	sts	0x0142, r24
     506:	bd cf       	rjmp	.-134    	; 0x482 <RGB_Animation_Slide+0x40>
	}
  
  for(uint16_t i=0;i<WS2812B_ANIMATION_PIXELS;i++){
    
	trailing_blank = WS2812B_ANIMATION_PIXELS;
	trailing_blank-= leading_blank;
     508:	64 01       	movw	r12, r8
     50a:	c0 1a       	sub	r12, r16
     50c:	d1 0a       	sbc	r13, r17
     50e:	c0 e0       	ldi	r28, 0x00	; 0
     510:	d0 e0       	ldi	r29, 0x00	; 0
     512:	06 c0       	rjmp	.+12     	; 0x520 <RGB_Animation_Slide+0xde>
	
	
	
    for(uint16_t i=0;i<leading_blank;i++){
      WS2812B_Send_Pixel(0x00,0x00,0x00);
     514:	80 e0       	ldi	r24, 0x00	; 0
     516:	60 e0       	ldi	r22, 0x00	; 0
     518:	40 e0       	ldi	r20, 0x00	; 0
     51a:	0e 94 31 01 	call	0x262	; 0x262 <WS2812B_Send_Pixel>
	trailing_blank = WS2812B_ANIMATION_PIXELS;
	trailing_blank-= leading_blank;
	
	
	
    for(uint16_t i=0;i<leading_blank;i++){
     51e:	21 96       	adiw	r28, 0x01	; 1
     520:	c0 17       	cp	r28, r16
     522:	d1 07       	cpc	r29, r17
     524:	b8 f3       	brcs	.-18     	; 0x514 <RGB_Animation_Slide+0xd2>
      WS2812B_Send_Pixel(0x00,0x00,0x00);
    }
	
	for(uint16_t i=0;i<3;i++){
	  WS2812B_Send_Pixel(color1,color2,color3);
     526:	80 91 3e 01 	lds	r24, 0x013E
     52a:	60 91 40 01 	lds	r22, 0x0140
     52e:	40 91 42 01 	lds	r20, 0x0142
     532:	0e 94 31 01 	call	0x262	; 0x262 <WS2812B_Send_Pixel>
     536:	80 91 3e 01 	lds	r24, 0x013E
     53a:	60 91 40 01 	lds	r22, 0x0140
     53e:	40 91 42 01 	lds	r20, 0x0142
     542:	0e 94 31 01 	call	0x262	; 0x262 <WS2812B_Send_Pixel>
     546:	80 91 3e 01 	lds	r24, 0x013E
     54a:	60 91 40 01 	lds	r22, 0x0140
     54e:	40 91 42 01 	lds	r20, 0x0142
     552:	0e 94 31 01 	call	0x262	; 0x262 <WS2812B_Send_Pixel>
     556:	c0 e0       	ldi	r28, 0x00	; 0
     558:	d0 e0       	ldi	r29, 0x00	; 0
     55a:	06 c0       	rjmp	.+12     	; 0x568 <RGB_Animation_Slide+0x126>
	}
	
    for(uint16_t i=0;i<trailing_blank;i++){
      WS2812B_Send_Pixel(0x00,0x00,0x00);
     55c:	80 e0       	ldi	r24, 0x00	; 0
     55e:	60 e0       	ldi	r22, 0x00	; 0
     560:	40 e0       	ldi	r20, 0x00	; 0
     562:	0e 94 31 01 	call	0x262	; 0x262 <WS2812B_Send_Pixel>
	
	for(uint16_t i=0;i<3;i++){
	  WS2812B_Send_Pixel(color1,color2,color3);
	}
	
    for(uint16_t i=0;i<trailing_blank;i++){
     566:	21 96       	adiw	r28, 0x01	; 1
     568:	cc 15       	cp	r28, r12
     56a:	dd 05       	cpc	r29, r13
     56c:	b8 f3       	brcs	.-18     	; 0x55c <RGB_Animation_Slide+0x11a>
      WS2812B_Send_Pixel(0x00,0x00,0x00);
    }
	
	leading_blank++;
     56e:	0f 5f       	subi	r16, 0xFF	; 255
     570:	1f 4f       	sbci	r17, 0xFF	; 255
	if(leading_blank>=WS2812B_ANIMATION_PIXELS){
     572:	0d 31       	cpi	r16, 0x1D	; 29
     574:	11 05       	cpc	r17, r1
     576:	10 f0       	brcs	.+4      	; 0x57c <RGB_Animation_Slide+0x13a>
     578:	00 e0       	ldi	r16, 0x00	; 0
     57a:	10 e0       	ldi	r17, 0x00	; 0
     57c:	c5 01       	movw	r24, r10
     57e:	01 97       	sbiw	r24, 0x01	; 1
     580:	f1 f7       	brne	.-4      	; 0x57e <RGB_Animation_Slide+0x13c>
	  color1=0xFF;
	  color2=0x00;
	  color3=0xFF;
	}
  
  for(uint16_t i=0;i<WS2812B_ANIMATION_PIXELS;i++){
     582:	08 94       	sec
     584:	e1 1c       	adc	r14, r1
     586:	f1 1c       	adc	r15, r1
     588:	8d e1       	ldi	r24, 0x1D	; 29
     58a:	e8 16       	cp	r14, r24
     58c:	f1 04       	cpc	r15, r1
     58e:	09 f0       	breq	.+2      	; 0x592 <RGB_Animation_Slide+0x150>
     590:	bb cf       	rjmp	.-138    	; 0x508 <RGB_Animation_Slide+0xc6>
	
	
	_delay_ms(1);
  }
  
  color++;
     592:	80 91 3c 01 	lds	r24, 0x013C
     596:	90 91 3d 01 	lds	r25, 0x013D
     59a:	01 96       	adiw	r24, 0x01	; 1
     59c:	90 93 3d 01 	sts	0x013D, r25
     5a0:	80 93 3c 01 	sts	0x013C, r24
	if(color>4){
     5a4:	05 97       	sbiw	r24, 0x05	; 5
     5a6:	20 f0       	brcs	.+8      	; 0x5b0 <RGB_Animation_Slide+0x16e>
	  color=0;
     5a8:	10 92 3d 01 	sts	0x013D, r1
     5ac:	10 92 3c 01 	sts	0x013C, r1
	}
}
     5b0:	df 91       	pop	r29
     5b2:	cf 91       	pop	r28
     5b4:	1f 91       	pop	r17
     5b6:	0f 91       	pop	r16
     5b8:	ff 90       	pop	r15
     5ba:	ef 90       	pop	r14
     5bc:	df 90       	pop	r13
     5be:	cf 90       	pop	r12
     5c0:	bf 90       	pop	r11
     5c2:	af 90       	pop	r10
     5c4:	9f 90       	pop	r9
     5c6:	8f 90       	pop	r8
     5c8:	08 95       	ret

000005ca <RGB_Animation_Rotate_All_Color>:
  }
}



void RGB_Animation_Rotate_All_Color(void){
     5ca:	cf 93       	push	r28
     5cc:	df 93       	push	r29
     5ce:	c0 e0       	ldi	r28, 0x00	; 0
     5d0:	d0 e0       	ldi	r29, 0x00	; 0
  for(uint16_t j=0;j<WS2812B_ANIMATION_PIXELS;j++){
	WS2812B_Send_Pixel(red,green,blue);
     5d2:	80 91 36 01 	lds	r24, 0x0136
     5d6:	60 91 37 01 	lds	r22, 0x0137
     5da:	40 91 38 01 	lds	r20, 0x0138
     5de:	0e 94 31 01 	call	0x262	; 0x262 <WS2812B_Send_Pixel>
}



void RGB_Animation_Rotate_All_Color(void){
  for(uint16_t j=0;j<WS2812B_ANIMATION_PIXELS;j++){
     5e2:	21 96       	adiw	r28, 0x01	; 1
     5e4:	cd 31       	cpi	r28, 0x1D	; 29
     5e6:	d1 05       	cpc	r29, r1
     5e8:	a1 f7       	brne	.-24     	; 0x5d2 <RGB_Animation_Rotate_All_Color+0x8>
	WS2812B_Send_Pixel(red,green,blue);
  }

  if(red_dir==UPCOUNT){
     5ea:	80 91 39 01 	lds	r24, 0x0139
     5ee:	88 23       	and	r24, r24
     5f0:	31 f4       	brne	.+12     	; 0x5fe <RGB_Animation_Rotate_All_Color+0x34>
	if(red<RED_MAX){
     5f2:	80 91 36 01 	lds	r24, 0x0136
     5f6:	8f 3f       	cpi	r24, 0xFF	; 255
     5f8:	59 f0       	breq	.+22     	; 0x610 <RGB_Animation_Rotate_All_Color+0x46>
	  red++;
     5fa:	8f 5f       	subi	r24, 0xFF	; 255
     5fc:	07 c0       	rjmp	.+14     	; 0x60c <RGB_Animation_Rotate_All_Color+0x42>
	}
  }else if(red_dir==DOWNCOUNT){
     5fe:	81 30       	cpi	r24, 0x01	; 1
     600:	39 f4       	brne	.+14     	; 0x610 <RGB_Animation_Rotate_All_Color+0x46>
	if(red>0){
     602:	80 91 36 01 	lds	r24, 0x0136
     606:	88 23       	and	r24, r24
     608:	19 f0       	breq	.+6      	; 0x610 <RGB_Animation_Rotate_All_Color+0x46>
	  red--;
     60a:	81 50       	subi	r24, 0x01	; 1
     60c:	80 93 36 01 	sts	0x0136, r24
	}
  }
	
  if(green_dir==UPCOUNT){
     610:	80 91 3a 01 	lds	r24, 0x013A
     614:	88 23       	and	r24, r24
     616:	31 f4       	brne	.+12     	; 0x624 <RGB_Animation_Rotate_All_Color+0x5a>
	if(green<GREEN_MAX){
     618:	80 91 37 01 	lds	r24, 0x0137
     61c:	8f 3f       	cpi	r24, 0xFF	; 255
     61e:	59 f0       	breq	.+22     	; 0x636 <RGB_Animation_Rotate_All_Color+0x6c>
	  green++;
     620:	8f 5f       	subi	r24, 0xFF	; 255
     622:	07 c0       	rjmp	.+14     	; 0x632 <RGB_Animation_Rotate_All_Color+0x68>
	}
  }else if(green_dir==DOWNCOUNT){
     624:	81 30       	cpi	r24, 0x01	; 1
     626:	39 f4       	brne	.+14     	; 0x636 <RGB_Animation_Rotate_All_Color+0x6c>
	if(green>0){
     628:	80 91 37 01 	lds	r24, 0x0137
     62c:	88 23       	and	r24, r24
     62e:	19 f0       	breq	.+6      	; 0x636 <RGB_Animation_Rotate_All_Color+0x6c>
	  green--;
     630:	81 50       	subi	r24, 0x01	; 1
     632:	80 93 37 01 	sts	0x0137, r24
	}
  }

  if(blue_dir==UPCOUNT){
     636:	80 91 3b 01 	lds	r24, 0x013B
     63a:	88 23       	and	r24, r24
     63c:	31 f4       	brne	.+12     	; 0x64a <RGB_Animation_Rotate_All_Color+0x80>
	if(blue<BLUE_MAX){
     63e:	80 91 38 01 	lds	r24, 0x0138
     642:	8f 3f       	cpi	r24, 0xFF	; 255
     644:	59 f0       	breq	.+22     	; 0x65c <RGB_Animation_Rotate_All_Color+0x92>
	  blue++;
     646:	8f 5f       	subi	r24, 0xFF	; 255
     648:	07 c0       	rjmp	.+14     	; 0x658 <RGB_Animation_Rotate_All_Color+0x8e>
	}
  }else if(blue_dir==DOWNCOUNT){
     64a:	81 30       	cpi	r24, 0x01	; 1
     64c:	39 f4       	brne	.+14     	; 0x65c <RGB_Animation_Rotate_All_Color+0x92>
	if(blue>0){
     64e:	80 91 38 01 	lds	r24, 0x0138
     652:	88 23       	and	r24, r24
     654:	19 f0       	breq	.+6      	; 0x65c <RGB_Animation_Rotate_All_Color+0x92>
	  blue--;
     656:	81 50       	subi	r24, 0x01	; 1
     658:	80 93 38 01 	sts	0x0138, r24
	}
  }

  if     ((red == RED_MAX) && (green == 0  ) && (blue == 0)){
     65c:	80 91 36 01 	lds	r24, 0x0136
     660:	8f 3f       	cpi	r24, 0xFF	; 255
     662:	d9 f4       	brne	.+54     	; 0x69a <RGB_Animation_Rotate_All_Color+0xd0>
     664:	80 91 37 01 	lds	r24, 0x0137
     668:	88 23       	and	r24, r24
     66a:	51 f4       	brne	.+20     	; 0x680 <RGB_Animation_Rotate_All_Color+0xb6>
     66c:	80 91 38 01 	lds	r24, 0x0138
     670:	88 23       	and	r24, r24
     672:	81 f5       	brne	.+96     	; 0x6d4 <RGB_Animation_Rotate_All_Color+0x10a>
	red_dir   = HALT;
     674:	82 e0       	ldi	r24, 0x02	; 2
     676:	80 93 39 01 	sts	0x0139, r24
	green_dir = UPCOUNT;
     67a:	10 92 3a 01 	sts	0x013A, r1
     67e:	38 c0       	rjmp	.+112    	; 0x6f0 <RGB_Animation_Rotate_All_Color+0x126>
	blue_dir  = HALT;
  }
  else if((red == RED_MAX) && (green == GREEN_MAX) && (blue == 0)){
     680:	8f 3f       	cpi	r24, 0xFF	; 255
     682:	41 f5       	brne	.+80     	; 0x6d4 <RGB_Animation_Rotate_All_Color+0x10a>
     684:	80 91 38 01 	lds	r24, 0x0138
     688:	88 23       	and	r24, r24
     68a:	21 f5       	brne	.+72     	; 0x6d4 <RGB_Animation_Rotate_All_Color+0x10a>
	red_dir   = DOWNCOUNT;
     68c:	81 e0       	ldi	r24, 0x01	; 1
     68e:	80 93 39 01 	sts	0x0139, r24
	green_dir = HALT;
     692:	82 e0       	ldi	r24, 0x02	; 2
     694:	80 93 3a 01 	sts	0x013A, r24
     698:	2b c0       	rjmp	.+86     	; 0x6f0 <RGB_Animation_Rotate_All_Color+0x126>
	blue_dir  = HALT;
  }	
  else if((red == 0  ) && (green == GREEN_MAX) && (blue == 0)){
     69a:	88 23       	and	r24, r24
     69c:	c9 f4       	brne	.+50     	; 0x6d0 <RGB_Animation_Rotate_All_Color+0x106>
     69e:	80 91 37 01 	lds	r24, 0x0137
     6a2:	8f 3f       	cpi	r24, 0xFF	; 255
     6a4:	39 f5       	brne	.+78     	; 0x6f4 <RGB_Animation_Rotate_All_Color+0x12a>
     6a6:	80 91 38 01 	lds	r24, 0x0138
     6aa:	88 23       	and	r24, r24
     6ac:	41 f4       	brne	.+16     	; 0x6be <RGB_Animation_Rotate_All_Color+0xf4>
	red_dir   = HALT;
     6ae:	82 e0       	ldi	r24, 0x02	; 2
     6b0:	80 93 39 01 	sts	0x0139, r24
	green_dir = HALT;
     6b4:	80 93 3a 01 	sts	0x013A, r24
	blue_dir  = UPCOUNT;
     6b8:	10 92 3b 01 	sts	0x013B, r1
     6bc:	1b c0       	rjmp	.+54     	; 0x6f4 <RGB_Animation_Rotate_All_Color+0x12a>
  }

  else if((red == 0  ) && (green == GREEN_MAX) && (blue == BLUE_MAX)){
     6be:	8f 3f       	cpi	r24, 0xFF	; 255
     6c0:	c9 f4       	brne	.+50     	; 0x6f4 <RGB_Animation_Rotate_All_Color+0x12a>
	red_dir   = UPCOUNT;
     6c2:	10 92 39 01 	sts	0x0139, r1
	green_dir = DOWNCOUNT;
     6c6:	81 e0       	ldi	r24, 0x01	; 1
     6c8:	80 93 3a 01 	sts	0x013A, r24
	blue_dir  = HALT;
     6cc:	82 e0       	ldi	r24, 0x02	; 2
     6ce:	10 c0       	rjmp	.+32     	; 0x6f0 <RGB_Animation_Rotate_All_Color+0x126>
	red_dir   = UPCOUNT;
	green_dir = HALT;
	blue_dir  = HALT;
  }*/
  
  else if((red == RED_MAX) && (green == 0) && (blue == BLUE_MAX)){
     6d0:	8f 3f       	cpi	r24, 0xFF	; 255
     6d2:	81 f4       	brne	.+32     	; 0x6f4 <RGB_Animation_Rotate_All_Color+0x12a>
     6d4:	80 91 37 01 	lds	r24, 0x0137
     6d8:	88 23       	and	r24, r24
     6da:	61 f4       	brne	.+24     	; 0x6f4 <RGB_Animation_Rotate_All_Color+0x12a>
     6dc:	80 91 38 01 	lds	r24, 0x0138
     6e0:	8f 3f       	cpi	r24, 0xFF	; 255
     6e2:	41 f4       	brne	.+16     	; 0x6f4 <RGB_Animation_Rotate_All_Color+0x12a>
	red_dir   = HALT;
     6e4:	82 e0       	ldi	r24, 0x02	; 2
     6e6:	80 93 39 01 	sts	0x0139, r24
	green_dir = HALT;
     6ea:	80 93 3a 01 	sts	0x013A, r24
	blue_dir  = DOWNCOUNT;
     6ee:	81 e0       	ldi	r24, 0x01	; 1
     6f0:	80 93 3b 01 	sts	0x013B, r24
  }
}
     6f4:	df 91       	pop	r29
     6f6:	cf 91       	pop	r28
     6f8:	08 95       	ret

000006fa <RGB_Brightness_Inc_Mid_Act>:
  }
}



void RGB_Brightness_Inc_Mid_Act(uint8_t r, uint8_t g, uint8_t b, uint16_t pixel){
     6fa:	2f 92       	push	r2
     6fc:	3f 92       	push	r3
     6fe:	4f 92       	push	r4
     700:	5f 92       	push	r5
     702:	6f 92       	push	r6
     704:	7f 92       	push	r7
     706:	8f 92       	push	r8
     708:	9f 92       	push	r9
     70a:	af 92       	push	r10
     70c:	bf 92       	push	r11
     70e:	df 92       	push	r13
     710:	ef 92       	push	r14
     712:	ff 92       	push	r15
     714:	0f 93       	push	r16
     716:	1f 93       	push	r17
     718:	df 93       	push	r29
     71a:	cf 93       	push	r28
     71c:	00 d0       	rcall	.+0      	; 0x71e <RGB_Brightness_Inc_Mid_Act+0x24>
     71e:	00 d0       	rcall	.+0      	; 0x720 <RGB_Brightness_Inc_Mid_Act+0x26>
     720:	cd b7       	in	r28, 0x3d	; 61
     722:	de b7       	in	r29, 0x3e	; 62
     724:	d8 2e       	mov	r13, r24
     726:	e6 2e       	mov	r14, r22
     728:	f4 2e       	mov	r15, r20
     72a:	29 01       	movw	r4, r18
  RGBAnim.MaxVal=r;
     72c:	80 93 44 01 	sts	0x0144, r24
  
  if(g>RGBAnim.MaxVal){
     730:	86 17       	cp	r24, r22
     732:	10 f4       	brcc	.+4      	; 0x738 <RGB_Brightness_Inc_Mid_Act+0x3e>
    RGBAnim.MaxVal=g;
     734:	60 93 44 01 	sts	0x0144, r22
  }
  
  if(b>RGBAnim.MaxVal){
     738:	80 91 44 01 	lds	r24, 0x0144
     73c:	8f 15       	cp	r24, r15
     73e:	10 f4       	brcc	.+4      	; 0x744 <RGB_Brightness_Inc_Mid_Act+0x4a>
    RGBAnim.MaxVal=b;
     740:	f0 92 44 01 	sts	0x0144, r15
    temp/=2;
	RGB.MaxNumLedEven=1;
  }else{
    temp/=2;
	temp+=1;
	RGB.MaxNumLedEven=0;
     744:	10 92 67 01 	sts	0x0167, r1
  if((RGBAnim.MaxVal % RGB_INC_STEP)!=0){
    uint16_t temp=RGBAnim.MaxVal % RGB_INC_STEP;
	RGBAnim.MaxVal-=temp;
  }
  
  uint16_t loop_cnt=RGBAnim.MaxVal/3;
     748:	80 91 44 01 	lds	r24, 0x0144
     74c:	63 e0       	ldi	r22, 0x03	; 3
     74e:	0e 94 39 0b 	call	0x1672	; 0x1672 <__udivmodqi4>
     752:	28 2f       	mov	r18, r24
     754:	30 e0       	ldi	r19, 0x00	; 0
     756:	3a 83       	std	Y+2, r19	; 0x02
     758:	29 83       	std	Y+1, r18	; 0x01
     75a:	00 e0       	ldi	r16, 0x00	; 0
     75c:	10 e0       	ldi	r17, 0x00	; 0
  
  for(uint16_t i=0;i<loop_cnt;i+=RGB_INC_STEP){
    
    uint16_t idle_pix=pixel;
    for(uint16_t j=0;j<idle_pix;j++){
     75e:	74 e4       	ldi	r23, 0x44	; 68
     760:	27 2e       	mov	r2, r23
     762:	71 e0       	ldi	r23, 0x01	; 1
     764:	37 2e       	mov	r3, r23
     766:	24 0c       	add	r2, r4
     768:	35 1c       	adc	r3, r5
	}else{
	  temp[2]=i;
	}
	
	
	WS2812B_Send_Pixel(temp[0],temp[1],temp[2]);
     76a:	6d 2c       	mov	r6, r13
     76c:	77 24       	eor	r7, r7
     76e:	8e 2c       	mov	r8, r14
     770:	99 24       	eor	r9, r9
     772:	af 2c       	mov	r10, r15
     774:	bb 24       	eor	r11, r11
     776:	43 c0       	rjmp	.+134    	; 0x7fe <RGB_Brightness_Inc_Mid_Act+0x104>
  
  for(uint16_t i=0;i<loop_cnt;i+=RGB_INC_STEP){
    
    uint16_t idle_pix=pixel;
    for(uint16_t j=0;j<idle_pix;j++){
      if(RGBAnim.PixelBuf[j]){
     778:	eb 81       	ldd	r30, Y+3	; 0x03
     77a:	fc 81       	ldd	r31, Y+4	; 0x04
     77c:	85 81       	ldd	r24, Z+5	; 0x05
     77e:	88 23       	and	r24, r24
     780:	21 f0       	breq	.+8      	; 0x78a <RGB_Brightness_Inc_Mid_Act+0x90>
	    WS2812B_Send_Pixel(r,g,b);
     782:	8d 2d       	mov	r24, r13
     784:	6e 2d       	mov	r22, r14
     786:	4f 2d       	mov	r20, r15
     788:	03 c0       	rjmp	.+6      	; 0x790 <RGB_Brightness_Inc_Mid_Act+0x96>
	  }else{
	    WS2812B_Send_Pixel(0,0,0);
     78a:	80 e0       	ldi	r24, 0x00	; 0
     78c:	60 e0       	ldi	r22, 0x00	; 0
     78e:	40 e0       	ldi	r20, 0x00	; 0
     790:	0e 94 31 01 	call	0x262	; 0x262 <WS2812B_Send_Pixel>
     794:	2b 81       	ldd	r18, Y+3	; 0x03
     796:	3c 81       	ldd	r19, Y+4	; 0x04
     798:	2f 5f       	subi	r18, 0xFF	; 255
     79a:	3f 4f       	sbci	r19, 0xFF	; 255
     79c:	3c 83       	std	Y+4, r19	; 0x04
     79e:	2b 83       	std	Y+3, r18	; 0x03
  uint16_t loop_cnt=RGBAnim.MaxVal/3;
  
  for(uint16_t i=0;i<loop_cnt;i+=RGB_INC_STEP){
    
    uint16_t idle_pix=pixel;
    for(uint16_t j=0;j<idle_pix;j++){
     7a0:	8b 81       	ldd	r24, Y+3	; 0x03
     7a2:	9c 81       	ldd	r25, Y+4	; 0x04
     7a4:	82 15       	cp	r24, r2
     7a6:	93 05       	cpc	r25, r3
     7a8:	39 f7       	brne	.-50     	; 0x778 <RGB_Brightness_Inc_Mid_Act+0x7e>
	}else{
	  temp[2]=i;
	}
	
	
	WS2812B_Send_Pixel(temp[0],temp[1],temp[2]);
     7aa:	20 2f       	mov	r18, r16
     7ac:	60 16       	cp	r6, r16
     7ae:	71 06       	cpc	r7, r17
     7b0:	08 f4       	brcc	.+2      	; 0x7b4 <RGB_Brightness_Inc_Mid_Act+0xba>
     7b2:	26 2d       	mov	r18, r6
     7b4:	60 2f       	mov	r22, r16
     7b6:	80 16       	cp	r8, r16
     7b8:	91 06       	cpc	r9, r17
     7ba:	08 f4       	brcc	.+2      	; 0x7be <RGB_Brightness_Inc_Mid_Act+0xc4>
     7bc:	68 2d       	mov	r22, r8
     7be:	40 2f       	mov	r20, r16
     7c0:	a0 16       	cp	r10, r16
     7c2:	b1 06       	cpc	r11, r17
     7c4:	08 f4       	brcc	.+2      	; 0x7c8 <RGB_Brightness_Inc_Mid_Act+0xce>
     7c6:	4a 2d       	mov	r20, r10
     7c8:	82 2f       	mov	r24, r18
     7ca:	0e 94 31 01 	call	0x262	; 0x262 <WS2812B_Send_Pixel>
     7ce:	5c 82       	std	Y+4, r5	; 0x04
     7d0:	4b 82       	std	Y+3, r4	; 0x03
     7d2:	0a c0       	rjmp	.+20     	; 0x7e8 <RGB_Brightness_Inc_Mid_Act+0xee>
	
	for(uint16_t j=idle_pix;j<=WS2812B_ANIMATION_PIXELS;j++){
      WS2812B_Send_Pixel(0,0,0);
     7d4:	80 e0       	ldi	r24, 0x00	; 0
     7d6:	60 e0       	ldi	r22, 0x00	; 0
     7d8:	40 e0       	ldi	r20, 0x00	; 0
     7da:	0e 94 31 01 	call	0x262	; 0x262 <WS2812B_Send_Pixel>
	}
	
	
	WS2812B_Send_Pixel(temp[0],temp[1],temp[2]);
	
	for(uint16_t j=idle_pix;j<=WS2812B_ANIMATION_PIXELS;j++){
     7de:	eb 81       	ldd	r30, Y+3	; 0x03
     7e0:	fc 81       	ldd	r31, Y+4	; 0x04
     7e2:	31 96       	adiw	r30, 0x01	; 1
     7e4:	fc 83       	std	Y+4, r31	; 0x04
     7e6:	eb 83       	std	Y+3, r30	; 0x03
     7e8:	2b 81       	ldd	r18, Y+3	; 0x03
     7ea:	3c 81       	ldd	r19, Y+4	; 0x04
     7ec:	2e 31       	cpi	r18, 0x1E	; 30
     7ee:	31 05       	cpc	r19, r1
     7f0:	88 f3       	brcs	.-30     	; 0x7d4 <RGB_Brightness_Inc_Mid_Act+0xda>
     7f2:	8c e2       	ldi	r24, 0x2C	; 44
     7f4:	91 e0       	ldi	r25, 0x01	; 1
     7f6:	01 97       	sbiw	r24, 0x01	; 1
     7f8:	f1 f7       	brne	.-4      	; 0x7f6 <RGB_Brightness_Inc_Mid_Act+0xfc>
	RGBAnim.MaxVal-=temp;
  }
  
  uint16_t loop_cnt=RGBAnim.MaxVal/3;
  
  for(uint16_t i=0;i<loop_cnt;i+=RGB_INC_STEP){
     7fa:	0f 5f       	subi	r16, 0xFF	; 255
     7fc:	1f 4f       	sbci	r17, 0xFF	; 255
     7fe:	89 81       	ldd	r24, Y+1	; 0x01
     800:	9a 81       	ldd	r25, Y+2	; 0x02
     802:	08 17       	cp	r16, r24
     804:	19 07       	cpc	r17, r25
     806:	28 f4       	brcc	.+10     	; 0x812 <RGB_Brightness_Inc_Mid_Act+0x118>
     808:	e4 e4       	ldi	r30, 0x44	; 68
     80a:	f1 e0       	ldi	r31, 0x01	; 1
     80c:	fc 83       	std	Y+4, r31	; 0x04
     80e:	eb 83       	std	Y+3, r30	; 0x03
     810:	c7 cf       	rjmp	.-114    	; 0x7a0 <RGB_Brightness_Inc_Mid_Act+0xa6>
	for(uint16_t j=idle_pix;j<=WS2812B_ANIMATION_PIXELS;j++){
      WS2812B_Send_Pixel(0,0,0);
    }
	_delay_us(100);
  }
}
     812:	0f 90       	pop	r0
     814:	0f 90       	pop	r0
     816:	0f 90       	pop	r0
     818:	0f 90       	pop	r0
     81a:	cf 91       	pop	r28
     81c:	df 91       	pop	r29
     81e:	1f 91       	pop	r17
     820:	0f 91       	pop	r16
     822:	ff 90       	pop	r15
     824:	ef 90       	pop	r14
     826:	df 90       	pop	r13
     828:	bf 90       	pop	r11
     82a:	af 90       	pop	r10
     82c:	9f 90       	pop	r9
     82e:	8f 90       	pop	r8
     830:	7f 90       	pop	r7
     832:	6f 90       	pop	r6
     834:	5f 90       	pop	r5
     836:	4f 90       	pop	r4
     838:	3f 90       	pop	r3
     83a:	2f 90       	pop	r2
     83c:	08 95       	ret

0000083e <RGB_Brightness_Dec_Mid>:
	
	_delay_us(100);
  }
}

void RGB_Brightness_Dec_Mid(uint8_t r, uint8_t g, uint8_t b, uint16_t pixel){
     83e:	2f 92       	push	r2
     840:	3f 92       	push	r3
     842:	4f 92       	push	r4
     844:	5f 92       	push	r5
     846:	6f 92       	push	r6
     848:	7f 92       	push	r7
     84a:	8f 92       	push	r8
     84c:	9f 92       	push	r9
     84e:	af 92       	push	r10
     850:	bf 92       	push	r11
     852:	cf 92       	push	r12
     854:	df 92       	push	r13
     856:	ef 92       	push	r14
     858:	ff 92       	push	r15
     85a:	0f 93       	push	r16
     85c:	1f 93       	push	r17
     85e:	cf 93       	push	r28
     860:	df 93       	push	r29
     862:	d8 2e       	mov	r13, r24
     864:	e6 2e       	mov	r14, r22
     866:	f4 2e       	mov	r15, r20
     868:	29 01       	movw	r4, r18
  RGBAnim.MaxVal=r;
     86a:	80 93 44 01 	sts	0x0144, r24
  
  if(g>RGBAnim.MaxVal){
     86e:	86 17       	cp	r24, r22
     870:	10 f4       	brcc	.+4      	; 0x876 <RGB_Brightness_Dec_Mid+0x38>
    RGBAnim.MaxVal=g;
     872:	60 93 44 01 	sts	0x0144, r22
  }
  
  if(b>RGBAnim.MaxVal){
     876:	80 91 44 01 	lds	r24, 0x0144
     87a:	8f 15       	cp	r24, r15
     87c:	10 f4       	brcc	.+4      	; 0x882 <RGB_Brightness_Dec_Mid+0x44>
    RGBAnim.MaxVal=b;
     87e:	f0 92 44 01 	sts	0x0144, r15
     882:	00 e0       	ldi	r16, 0x00	; 0
     884:	10 e0       	ldi	r17, 0x00	; 0
  temp[1]=0;
  temp[2]=0;

  for(uint16_t i=0;i<RGBAnim.MaxVal;i++){
    uint16_t idle_pix=pixel;
    for(uint16_t j=0;j<idle_pix;j++){
     886:	f4 e4       	ldi	r31, 0x44	; 68
     888:	2f 2e       	mov	r2, r31
     88a:	f1 e0       	ldi	r31, 0x01	; 1
     88c:	3f 2e       	mov	r3, r31
     88e:	24 0c       	add	r2, r4
     890:	35 1c       	adc	r3, r5
	}else{
	  temp[2]=i;
	}
	
	
	WS2812B_Send_Pixel(temp[0],temp[1],temp[2]);
     892:	6d 2c       	mov	r6, r13
     894:	77 24       	eor	r7, r7
     896:	8e 2c       	mov	r8, r14
     898:	99 24       	eor	r9, r9
     89a:	af 2c       	mov	r10, r15
     89c:	bb 24       	eor	r11, r11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     89e:	e0 e6       	ldi	r30, 0x60	; 96
     8a0:	ce 2e       	mov	r12, r30
     8a2:	31 c0       	rjmp	.+98     	; 0x906 <__stack+0x7>
  temp[2]=0;

  for(uint16_t i=0;i<RGBAnim.MaxVal;i++){
    uint16_t idle_pix=pixel;
    for(uint16_t j=0;j<idle_pix;j++){
      if(RGBAnim.PixelBuf[j]){
     8a4:	8d 81       	ldd	r24, Y+5	; 0x05
     8a6:	88 23       	and	r24, r24
     8a8:	21 f0       	breq	.+8      	; 0x8b2 <RGB_Brightness_Dec_Mid+0x74>
	    WS2812B_Send_Pixel(r,g,b);
     8aa:	8d 2d       	mov	r24, r13
     8ac:	6e 2d       	mov	r22, r14
     8ae:	4f 2d       	mov	r20, r15
     8b0:	03 c0       	rjmp	.+6      	; 0x8b8 <RGB_Brightness_Dec_Mid+0x7a>
	  }else{
	    WS2812B_Send_Pixel(0,0,0);
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	60 e0       	ldi	r22, 0x00	; 0
     8b6:	40 e0       	ldi	r20, 0x00	; 0
     8b8:	0e 94 31 01 	call	0x262	; 0x262 <WS2812B_Send_Pixel>
     8bc:	21 96       	adiw	r28, 0x01	; 1
  temp[1]=0;
  temp[2]=0;

  for(uint16_t i=0;i<RGBAnim.MaxVal;i++){
    uint16_t idle_pix=pixel;
    for(uint16_t j=0;j<idle_pix;j++){
     8be:	c2 15       	cp	r28, r2
     8c0:	d3 05       	cpc	r29, r3
     8c2:	81 f7       	brne	.-32     	; 0x8a4 <RGB_Brightness_Dec_Mid+0x66>
	}else{
	  temp[2]=i;
	}
	
	
	WS2812B_Send_Pixel(temp[0],temp[1],temp[2]);
     8c4:	20 2f       	mov	r18, r16
     8c6:	60 16       	cp	r6, r16
     8c8:	71 06       	cpc	r7, r17
     8ca:	08 f4       	brcc	.+2      	; 0x8ce <RGB_Brightness_Dec_Mid+0x90>
     8cc:	26 2d       	mov	r18, r6
     8ce:	60 2f       	mov	r22, r16
     8d0:	80 16       	cp	r8, r16
     8d2:	91 06       	cpc	r9, r17
     8d4:	08 f4       	brcc	.+2      	; 0x8d8 <RGB_Brightness_Dec_Mid+0x9a>
     8d6:	68 2d       	mov	r22, r8
     8d8:	40 2f       	mov	r20, r16
     8da:	a0 16       	cp	r10, r16
     8dc:	b1 06       	cpc	r11, r17
     8de:	08 f4       	brcc	.+2      	; 0x8e2 <RGB_Brightness_Dec_Mid+0xa4>
     8e0:	4a 2d       	mov	r20, r10
     8e2:	82 2f       	mov	r24, r18
     8e4:	0e 94 31 01 	call	0x262	; 0x262 <WS2812B_Send_Pixel>
     8e8:	c2 01       	movw	r24, r4
     8ea:	04 c0       	rjmp	.+8      	; 0x8f4 <RGB_Brightness_Dec_Mid+0xb6>
     8ec:	2c 2d       	mov	r18, r12
     8ee:	2a 95       	dec	r18
     8f0:	f1 f7       	brne	.-4      	; 0x8ee <RGB_Brightness_Dec_Mid+0xb0>
	
	for(uint16_t j=idle_pix;j<WS2812B_ANIMATION_PIXELS;j++){
     8f2:	01 96       	adiw	r24, 0x01	; 1
     8f4:	8d 31       	cpi	r24, 0x1D	; 29
     8f6:	91 05       	cpc	r25, r1
     8f8:	c8 f3       	brcs	.-14     	; 0x8ec <RGB_Brightness_Dec_Mid+0xae>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     8fa:	8c e2       	ldi	r24, 0x2C	; 44
     8fc:	91 e0       	ldi	r25, 0x01	; 1
     8fe:	01 97       	sbiw	r24, 0x01	; 1
     900:	f1 f7       	brne	.-4      	; 0x8fe <RGB_Brightness_Dec_Mid+0xc0>
  uint16_t temp[3];
  temp[0]=0;
  temp[1]=0;
  temp[2]=0;

  for(uint16_t i=0;i<RGBAnim.MaxVal;i++){
     902:	0f 5f       	subi	r16, 0xFF	; 255
     904:	1f 4f       	sbci	r17, 0xFF	; 255
     906:	80 91 44 01 	lds	r24, 0x0144
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	08 17       	cp	r16, r24
     90e:	19 07       	cpc	r17, r25
     910:	18 f4       	brcc	.+6      	; 0x918 <__stack+0x19>
     912:	c4 e4       	ldi	r28, 0x44	; 68
     914:	d1 e0       	ldi	r29, 0x01	; 1
     916:	d3 cf       	rjmp	.-90     	; 0x8be <RGB_Brightness_Dec_Mid+0x80>
	for(uint16_t j=idle_pix;j<WS2812B_ANIMATION_PIXELS;j++){
      _delay_us(24);
    }
	_delay_us(100);
  }
}
     918:	df 91       	pop	r29
     91a:	cf 91       	pop	r28
     91c:	1f 91       	pop	r17
     91e:	0f 91       	pop	r16
     920:	ff 90       	pop	r15
     922:	ef 90       	pop	r14
     924:	df 90       	pop	r13
     926:	cf 90       	pop	r12
     928:	bf 90       	pop	r11
     92a:	af 90       	pop	r10
     92c:	9f 90       	pop	r9
     92e:	8f 90       	pop	r8
     930:	7f 90       	pop	r7
     932:	6f 90       	pop	r6
     934:	5f 90       	pop	r5
     936:	4f 90       	pop	r4
     938:	3f 90       	pop	r3
     93a:	2f 90       	pop	r2
     93c:	08 95       	ret

0000093e <RGB_Brightness_Inc_Mid>:
  }
}



void RGB_Brightness_Inc_Mid(uint8_t r, uint8_t g, uint8_t b, uint16_t pixel){
     93e:	2f 92       	push	r2
     940:	3f 92       	push	r3
     942:	4f 92       	push	r4
     944:	5f 92       	push	r5
     946:	6f 92       	push	r6
     948:	7f 92       	push	r7
     94a:	8f 92       	push	r8
     94c:	9f 92       	push	r9
     94e:	af 92       	push	r10
     950:	bf 92       	push	r11
     952:	cf 92       	push	r12
     954:	df 92       	push	r13
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	df 93       	push	r29
     960:	cf 93       	push	r28
     962:	00 d0       	rcall	.+0      	; 0x964 <RGB_Brightness_Inc_Mid+0x26>
     964:	00 d0       	rcall	.+0      	; 0x966 <RGB_Brightness_Inc_Mid+0x28>
     966:	cd b7       	in	r28, 0x3d	; 61
     968:	de b7       	in	r29, 0x3e	; 62
     96a:	98 2e       	mov	r9, r24
     96c:	a6 2e       	mov	r10, r22
     96e:	b4 2e       	mov	r11, r20
     970:	79 01       	movw	r14, r18
  RGBAnim.MaxVal=r;
     972:	80 93 44 01 	sts	0x0144, r24
  
  if(g>RGBAnim.MaxVal){
     976:	86 17       	cp	r24, r22
     978:	10 f4       	brcc	.+4      	; 0x97e <RGB_Brightness_Inc_Mid+0x40>
    RGBAnim.MaxVal=g;
     97a:	60 93 44 01 	sts	0x0144, r22
  }
  
  if(b>RGBAnim.MaxVal){
     97e:	80 91 44 01 	lds	r24, 0x0144
     982:	8b 15       	cp	r24, r11
     984:	10 f4       	brcc	.+4      	; 0x98a <RGB_Brightness_Inc_Mid+0x4c>
    RGBAnim.MaxVal=b;
     986:	b0 92 44 01 	sts	0x0144, r11
     98a:	00 e0       	ldi	r16, 0x00	; 0
     98c:	10 e0       	ldi	r17, 0x00	; 0
	  temp[2]=b;
	}else{
	  temp[2]=i;
	}
	
	WS2812B_Send_Pixel(temp[0],temp[1],temp[2]); //lit-up-gradually
     98e:	89 2d       	mov	r24, r9
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	9a 83       	std	Y+2, r25	; 0x02
     994:	89 83       	std	Y+1, r24	; 0x01
     996:	2a 2c       	mov	r2, r10
     998:	33 24       	eor	r3, r3
     99a:	4b 2c       	mov	r4, r11
     99c:	55 24       	eor	r5, r5
	
	for(uint16_t j=pixel+1;j<WS2812B_ANIMATION_PIXELS-pixel-1;j++){
     99e:	ac e1       	ldi	r26, 0x1C	; 28
     9a0:	ca 2e       	mov	r12, r26
     9a2:	d1 2c       	mov	r13, r1
     9a4:	ce 18       	sub	r12, r14
     9a6:	df 08       	sbc	r13, r15
     9a8:	4c c0       	rjmp	.+152    	; 0xa42 <RGB_Brightness_Inc_Mid+0x104>

  for(uint16_t i=0;i<RGBAnim.MaxVal;i++){
    
	
	for(uint16_t j=0;j<pixel;j++){
	  WS2812B_Send_Pixel(r,g,b);
     9aa:	89 2d       	mov	r24, r9
     9ac:	6a 2d       	mov	r22, r10
     9ae:	4b 2d       	mov	r20, r11
     9b0:	0e 94 31 01 	call	0x262	; 0x262 <WS2812B_Send_Pixel>
  temp[2]=0;

  for(uint16_t i=0;i<RGBAnim.MaxVal;i++){
    
	
	for(uint16_t j=0;j<pixel;j++){
     9b4:	08 94       	sec
     9b6:	61 1c       	adc	r6, r1
     9b8:	71 1c       	adc	r7, r1
     9ba:	6e 14       	cp	r6, r14
     9bc:	7f 04       	cpc	r7, r15
     9be:	a8 f3       	brcs	.-22     	; 0x9aa <RGB_Brightness_Inc_Mid+0x6c>
	  temp[2]=b;
	}else{
	  temp[2]=i;
	}
	
	WS2812B_Send_Pixel(temp[0],temp[1],temp[2]); //lit-up-gradually
     9c0:	20 2f       	mov	r18, r16
     9c2:	e9 81       	ldd	r30, Y+1	; 0x01
     9c4:	fa 81       	ldd	r31, Y+2	; 0x02
     9c6:	e0 17       	cp	r30, r16
     9c8:	f1 07       	cpc	r31, r17
     9ca:	08 f4       	brcc	.+2      	; 0x9ce <RGB_Brightness_Inc_Mid+0x90>
     9cc:	2e 2f       	mov	r18, r30
     9ce:	62 2e       	mov	r6, r18
     9d0:	60 2f       	mov	r22, r16
     9d2:	20 16       	cp	r2, r16
     9d4:	31 06       	cpc	r3, r17
     9d6:	08 f4       	brcc	.+2      	; 0x9da <RGB_Brightness_Inc_Mid+0x9c>
     9d8:	62 2d       	mov	r22, r2
     9da:	86 2e       	mov	r8, r22
     9dc:	40 2f       	mov	r20, r16
     9de:	40 16       	cp	r4, r16
     9e0:	51 06       	cpc	r5, r17
     9e2:	08 f4       	brcc	.+2      	; 0x9e6 <RGB_Brightness_Inc_Mid+0xa8>
     9e4:	44 2d       	mov	r20, r4
     9e6:	74 2e       	mov	r7, r20
     9e8:	86 2d       	mov	r24, r6
     9ea:	68 2d       	mov	r22, r8
     9ec:	0e 94 31 01 	call	0x262	; 0x262 <WS2812B_Send_Pixel>
     9f0:	fc 82       	std	Y+4, r15	; 0x04
     9f2:	eb 82       	std	Y+3, r14	; 0x03
     9f4:	05 c0       	rjmp	.+10     	; 0xa00 <RGB_Brightness_Inc_Mid+0xc2>
	
	for(uint16_t j=pixel+1;j<WS2812B_ANIMATION_PIXELS-pixel-1;j++){
	    WS2812B_Send_Pixel(0,0,0);
     9f6:	80 e0       	ldi	r24, 0x00	; 0
     9f8:	60 e0       	ldi	r22, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	0e 94 31 01 	call	0x262	; 0x262 <WS2812B_Send_Pixel>
     a00:	8b 81       	ldd	r24, Y+3	; 0x03
     a02:	9c 81       	ldd	r25, Y+4	; 0x04
     a04:	01 96       	adiw	r24, 0x01	; 1
     a06:	9c 83       	std	Y+4, r25	; 0x04
     a08:	8b 83       	std	Y+3, r24	; 0x03
	  temp[2]=i;
	}
	
	WS2812B_Send_Pixel(temp[0],temp[1],temp[2]); //lit-up-gradually
	
	for(uint16_t j=pixel+1;j<WS2812B_ANIMATION_PIXELS-pixel-1;j++){
     a0a:	8c 15       	cp	r24, r12
     a0c:	9d 05       	cpc	r25, r13
     a0e:	98 f3       	brcs	.-26     	; 0x9f6 <RGB_Brightness_Inc_Mid+0xb8>
	    WS2812B_Send_Pixel(0,0,0);
    }
	
	WS2812B_Send_Pixel(temp[0],temp[1],temp[2]);
     a10:	86 2d       	mov	r24, r6
     a12:	68 2d       	mov	r22, r8
     a14:	47 2d       	mov	r20, r7
     a16:	0e 94 31 01 	call	0x262	; 0x262 <WS2812B_Send_Pixel>
     a1a:	66 24       	eor	r6, r6
     a1c:	77 24       	eor	r7, r7
     a1e:	08 c0       	rjmp	.+16     	; 0xa30 <RGB_Brightness_Inc_Mid+0xf2>
	
	for(uint16_t j=0;j<pixel;j++){
	  WS2812B_Send_Pixel(r,g,b);
     a20:	89 2d       	mov	r24, r9
     a22:	6a 2d       	mov	r22, r10
     a24:	4b 2d       	mov	r20, r11
     a26:	0e 94 31 01 	call	0x262	; 0x262 <WS2812B_Send_Pixel>
	    WS2812B_Send_Pixel(0,0,0);
    }
	
	WS2812B_Send_Pixel(temp[0],temp[1],temp[2]);
	
	for(uint16_t j=0;j<pixel;j++){
     a2a:	08 94       	sec
     a2c:	61 1c       	adc	r6, r1
     a2e:	71 1c       	adc	r7, r1
     a30:	6e 14       	cp	r6, r14
     a32:	7f 04       	cpc	r7, r15
     a34:	a8 f3       	brcs	.-22     	; 0xa20 <RGB_Brightness_Inc_Mid+0xe2>
     a36:	8c e2       	ldi	r24, 0x2C	; 44
     a38:	91 e0       	ldi	r25, 0x01	; 1
     a3a:	01 97       	sbiw	r24, 0x01	; 1
     a3c:	f1 f7       	brne	.-4      	; 0xa3a <RGB_Brightness_Inc_Mid+0xfc>
  uint16_t temp[3];
  temp[0]=0;
  temp[1]=0;
  temp[2]=0;

  for(uint16_t i=0;i<RGBAnim.MaxVal;i++){
     a3e:	0f 5f       	subi	r16, 0xFF	; 255
     a40:	1f 4f       	sbci	r17, 0xFF	; 255
     a42:	80 91 44 01 	lds	r24, 0x0144
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	08 17       	cp	r16, r24
     a4a:	19 07       	cpc	r17, r25
     a4c:	18 f4       	brcc	.+6      	; 0xa54 <RGB_Brightness_Inc_Mid+0x116>
     a4e:	66 24       	eor	r6, r6
     a50:	77 24       	eor	r7, r7
     a52:	b3 cf       	rjmp	.-154    	; 0x9ba <RGB_Brightness_Inc_Mid+0x7c>
	  WS2812B_Send_Pixel(r,g,b);
    }
	
	_delay_us(100);
  }
}
     a54:	0f 90       	pop	r0
     a56:	0f 90       	pop	r0
     a58:	0f 90       	pop	r0
     a5a:	0f 90       	pop	r0
     a5c:	cf 91       	pop	r28
     a5e:	df 91       	pop	r29
     a60:	1f 91       	pop	r17
     a62:	0f 91       	pop	r16
     a64:	ff 90       	pop	r15
     a66:	ef 90       	pop	r14
     a68:	df 90       	pop	r13
     a6a:	cf 90       	pop	r12
     a6c:	bf 90       	pop	r11
     a6e:	af 90       	pop	r10
     a70:	9f 90       	pop	r9
     a72:	8f 90       	pop	r8
     a74:	7f 90       	pop	r7
     a76:	6f 90       	pop	r6
     a78:	5f 90       	pop	r5
     a7a:	4f 90       	pop	r4
     a7c:	3f 90       	pop	r3
     a7e:	2f 90       	pop	r2
     a80:	08 95       	ret

00000a82 <RGB_Animation_Slide_Fill_Mid>:
	RGBAnim.PixelBuf[i]=0;
  }
}


void RGB_Animation_Slide_Fill_Mid(uint8_t r, uint8_t g, uint8_t b){
     a82:	af 92       	push	r10
     a84:	bf 92       	push	r11
     a86:	cf 92       	push	r12
     a88:	df 92       	push	r13
     a8a:	ef 92       	push	r14
     a8c:	ff 92       	push	r15
     a8e:	0f 93       	push	r16
     a90:	1f 93       	push	r17
     a92:	cf 93       	push	r28
     a94:	df 93       	push	r29
     a96:	a8 2e       	mov	r10, r24
     a98:	b6 2e       	mov	r11, r22
     a9a:	d4 2e       	mov	r13, r20
     a9c:	b9 e4       	ldi	r27, 0x49	; 73
     a9e:	eb 2e       	mov	r14, r27
     aa0:	b1 e0       	ldi	r27, 0x01	; 1
     aa2:	fb 2e       	mov	r15, r27
     aa4:	87 01       	movw	r16, r14
     aa6:	04 5e       	subi	r16, 0xE4	; 228
     aa8:	1f 4f       	sbci	r17, 0xFF	; 255
     aaa:	c0 e0       	ldi	r28, 0x00	; 0
     aac:	d0 e0       	ldi	r29, 0x00	; 0
  for(uint16_t i=0;i<WS2812B_ANIMATION_PIXELS/2;i++){
    RGB_Brightness_Inc_Mid(r,g,b,i);
	RGBAnim.PixelBuf[i]=1;
     aae:	cc 24       	eor	r12, r12
     ab0:	c3 94       	inc	r12
}


void RGB_Animation_Slide_Fill_Mid(uint8_t r, uint8_t g, uint8_t b){
  for(uint16_t i=0;i<WS2812B_ANIMATION_PIXELS/2;i++){
    RGB_Brightness_Inc_Mid(r,g,b,i);
     ab2:	8a 2d       	mov	r24, r10
     ab4:	6b 2d       	mov	r22, r11
     ab6:	4d 2d       	mov	r20, r13
     ab8:	9e 01       	movw	r18, r28
     aba:	0e 94 9f 04 	call	0x93e	; 0x93e <RGB_Brightness_Inc_Mid>
	RGBAnim.PixelBuf[i]=1;
     abe:	f7 01       	movw	r30, r14
     ac0:	c1 92       	st	Z+, r12
     ac2:	7f 01       	movw	r14, r30
	RGBAnim.PixelBuf[WS2812B_ANIMATION_PIXELS-i-1]=1;
     ac4:	f8 01       	movw	r30, r16
     ac6:	c0 82       	st	Z, r12
  }
}


void RGB_Animation_Slide_Fill_Mid(uint8_t r, uint8_t g, uint8_t b){
  for(uint16_t i=0;i<WS2812B_ANIMATION_PIXELS/2;i++){
     ac8:	21 96       	adiw	r28, 0x01	; 1
     aca:	01 50       	subi	r16, 0x01	; 1
     acc:	10 40       	sbci	r17, 0x00	; 0
     ace:	ce 30       	cpi	r28, 0x0E	; 14
     ad0:	d1 05       	cpc	r29, r1
     ad2:	79 f7       	brne	.-34     	; 0xab2 <RGB_Animation_Slide_Fill_Mid+0x30>
    RGB_Brightness_Inc_Mid(r,g,b,i);
	RGBAnim.PixelBuf[i]=1;
	RGBAnim.PixelBuf[WS2812B_ANIMATION_PIXELS-i-1]=1;
  }
}
     ad4:	df 91       	pop	r29
     ad6:	cf 91       	pop	r28
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	df 90       	pop	r13
     ae2:	cf 90       	pop	r12
     ae4:	bf 90       	pop	r11
     ae6:	af 90       	pop	r10
     ae8:	08 95       	ret

00000aea <RGB_Brightness_Dec>:
    }
	_delay_us(100);
  }
}

void RGB_Brightness_Dec(uint8_t r, uint8_t g, uint8_t b, uint16_t pixel){
     aea:	2f 92       	push	r2
     aec:	3f 92       	push	r3
     aee:	4f 92       	push	r4
     af0:	5f 92       	push	r5
     af2:	6f 92       	push	r6
     af4:	7f 92       	push	r7
     af6:	8f 92       	push	r8
     af8:	9f 92       	push	r9
     afa:	bf 92       	push	r11
     afc:	cf 92       	push	r12
     afe:	df 92       	push	r13
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	df 93       	push	r29
     b0a:	cf 93       	push	r28
     b0c:	cd b7       	in	r28, 0x3d	; 61
     b0e:	de b7       	in	r29, 0x3e	; 62
     b10:	28 97       	sbiw	r28, 0x08	; 8
     b12:	0f b6       	in	r0, 0x3f	; 63
     b14:	f8 94       	cli
     b16:	de bf       	out	0x3e, r29	; 62
     b18:	0f be       	out	0x3f, r0	; 63
     b1a:	cd bf       	out	0x3d, r28	; 61
     b1c:	b8 2e       	mov	r11, r24
     b1e:	c6 2e       	mov	r12, r22
     b20:	d4 2e       	mov	r13, r20
     b22:	49 01       	movw	r8, r18
  RGBAnim.MaxVal=r;
     b24:	80 93 44 01 	sts	0x0144, r24
  
  if(g>RGBAnim.MaxVal){
     b28:	86 17       	cp	r24, r22
     b2a:	10 f4       	brcc	.+4      	; 0xb30 <RGB_Brightness_Dec+0x46>
    RGBAnim.MaxVal=g;
     b2c:	60 93 44 01 	sts	0x0144, r22
  }
  
  if(b>RGBAnim.MaxVal){
     b30:	80 91 44 01 	lds	r24, 0x0144
     b34:	8d 15       	cp	r24, r13
     b36:	10 f4       	brcc	.+4      	; 0xb3c <RGB_Brightness_Dec+0x52>
    RGBAnim.MaxVal=b;
     b38:	d0 92 44 01 	sts	0x0144, r13
  uint16_t temp[3];
  temp[0]=0;
  temp[1]=0;
  temp[2]=0;
  
  if((RGBAnim.MaxVal % RGB_DEC_STEP)!=0){
     b3c:	20 91 44 01 	lds	r18, 0x0144
     b40:	82 2f       	mov	r24, r18
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	83 70       	andi	r24, 0x03	; 3
     b46:	90 70       	andi	r25, 0x00	; 0
     b48:	00 97       	sbiw	r24, 0x00	; 0
     b4a:	19 f0       	breq	.+6      	; 0xb52 <RGB_Brightness_Dec+0x68>
    uint16_t temp=RGBAnim.MaxVal % RGB_DEC_STEP;
	RGBAnim.MaxVal-=temp;
     b4c:	28 1b       	sub	r18, r24
     b4e:	20 93 44 01 	sts	0x0144, r18
  }
  
  for(int i=RGBAnim.MaxVal;i>=0;i-=RGB_DEC_STEP){
     b52:	80 91 44 01 	lds	r24, 0x0144
     b56:	08 2f       	mov	r16, r24
     b58:	10 e0       	ldi	r17, 0x00	; 0
     b5a:	ee 24       	eor	r14, r14
     b5c:	ff 24       	eor	r15, r15
    uint16_t idle_pix=pixel;
    for(uint16_t j=0;j<idle_pix;j++){
     b5e:	94 01       	movw	r18, r8
     b60:	2c 5b       	subi	r18, 0xBC	; 188
     b62:	3e 4f       	sbci	r19, 0xFE	; 254
     b64:	3a 83       	std	Y+2, r19	; 0x02
     b66:	29 83       	std	Y+1, r18	; 0x01
    }
	_delay_us(100);
  }
}

void RGB_Brightness_Dec(uint8_t r, uint8_t g, uint8_t b, uint16_t pixel){
     b68:	1c 83       	std	Y+4, r17	; 0x04
     b6a:	0b 83       	std	Y+3, r16	; 0x03
	  }else{
	    WS2812B_Send_Pixel(0,0,0);
	  }
    }
	
	if(i>r){
     b6c:	8b 2d       	mov	r24, r11
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	9e 83       	std	Y+6, r25	; 0x06
     b72:	8d 83       	std	Y+5, r24	; 0x05
	  temp[0]=r;
	}else{
	  temp[0]=i;
	}
	
	if(i>g){
     b74:	2c 2c       	mov	r2, r12
     b76:	33 24       	eor	r3, r3
	  temp[1]=g;
	}else{
	  temp[1]=i;
	}
	
	if(i>b){
     b78:	4d 2c       	mov	r4, r13
     b7a:	55 24       	eor	r5, r5
  if((RGBAnim.MaxVal % RGB_DEC_STEP)!=0){
    uint16_t temp=RGBAnim.MaxVal % RGB_DEC_STEP;
	RGBAnim.MaxVal-=temp;
  }
  
  for(int i=RGBAnim.MaxVal;i>=0;i-=RGB_DEC_STEP){
     b7c:	c8 01       	movw	r24, r16
     b7e:	8c 7f       	andi	r24, 0xFC	; 252
     b80:	90 70       	andi	r25, 0x00	; 0
     b82:	04 96       	adiw	r24, 0x04	; 4
     b84:	66 24       	eor	r6, r6
     b86:	77 24       	eor	r7, r7
     b88:	68 1a       	sub	r6, r24
     b8a:	79 0a       	sbc	r7, r25
     b8c:	54 c0       	rjmp	.+168    	; 0xc36 <RGB_Brightness_Dec+0x14c>
    uint16_t idle_pix=pixel;
    for(uint16_t j=0;j<idle_pix;j++){
      if(RGBAnim.PixelBuf[j]){
     b8e:	ef 81       	ldd	r30, Y+7	; 0x07
     b90:	f8 85       	ldd	r31, Y+8	; 0x08
     b92:	85 81       	ldd	r24, Z+5	; 0x05
     b94:	88 23       	and	r24, r24
     b96:	21 f0       	breq	.+8      	; 0xba0 <RGB_Brightness_Dec+0xb6>
	    WS2812B_Send_Pixel(r,g,b);
     b98:	8b 2d       	mov	r24, r11
     b9a:	6c 2d       	mov	r22, r12
     b9c:	4d 2d       	mov	r20, r13
     b9e:	03 c0       	rjmp	.+6      	; 0xba6 <RGB_Brightness_Dec+0xbc>
	  }else{
	    WS2812B_Send_Pixel(0,0,0);
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	60 e0       	ldi	r22, 0x00	; 0
     ba4:	40 e0       	ldi	r20, 0x00	; 0
     ba6:	0e 94 31 01 	call	0x262	; 0x262 <WS2812B_Send_Pixel>
     baa:	2f 81       	ldd	r18, Y+7	; 0x07
     bac:	38 85       	ldd	r19, Y+8	; 0x08
     bae:	2f 5f       	subi	r18, 0xFF	; 255
     bb0:	3f 4f       	sbci	r19, 0xFF	; 255
     bb2:	38 87       	std	Y+8, r19	; 0x08
     bb4:	2f 83       	std	Y+7, r18	; 0x07
	RGBAnim.MaxVal-=temp;
  }
  
  for(int i=RGBAnim.MaxVal;i>=0;i-=RGB_DEC_STEP){
    uint16_t idle_pix=pixel;
    for(uint16_t j=0;j<idle_pix;j++){
     bb6:	8f 81       	ldd	r24, Y+7	; 0x07
     bb8:	98 85       	ldd	r25, Y+8	; 0x08
     bba:	e9 81       	ldd	r30, Y+1	; 0x01
     bbc:	fa 81       	ldd	r31, Y+2	; 0x02
     bbe:	8e 17       	cp	r24, r30
     bc0:	9f 07       	cpc	r25, r31
     bc2:	29 f7       	brne	.-54     	; 0xb8e <RGB_Brightness_Dec+0xa4>
    }
	_delay_us(100);
  }
}

void RGB_Brightness_Dec(uint8_t r, uint8_t g, uint8_t b, uint16_t pixel){
     bc4:	2b 81       	ldd	r18, Y+3	; 0x03
     bc6:	3c 81       	ldd	r19, Y+4	; 0x04
     bc8:	2e 0d       	add	r18, r14
     bca:	3f 1d       	adc	r19, r15
	  }else{
	    WS2812B_Send_Pixel(0,0,0);
	  }
    }
	
	if(i>r){
     bcc:	8d 81       	ldd	r24, Y+5	; 0x05
     bce:	9e 81       	ldd	r25, Y+6	; 0x06
     bd0:	82 17       	cp	r24, r18
     bd2:	93 07       	cpc	r25, r19
     bd4:	14 f4       	brge	.+4      	; 0xbda <RGB_Brightness_Dec+0xf0>
	  temp[0]=r;
     bd6:	8b 2d       	mov	r24, r11
     bd8:	01 c0       	rjmp	.+2      	; 0xbdc <RGB_Brightness_Dec+0xf2>
     bda:	80 2f       	mov	r24, r16
	}else{
	  temp[0]=i;
	}
	
	if(i>g){
     bdc:	22 16       	cp	r2, r18
     bde:	33 06       	cpc	r3, r19
     be0:	14 f4       	brge	.+4      	; 0xbe6 <RGB_Brightness_Dec+0xfc>
	  temp[1]=g;
     be2:	6c 2d       	mov	r22, r12
     be4:	01 c0       	rjmp	.+2      	; 0xbe8 <RGB_Brightness_Dec+0xfe>
     be6:	60 2f       	mov	r22, r16
	}else{
	  temp[1]=i;
	}
	
	if(i>b){
     be8:	42 16       	cp	r4, r18
     bea:	53 06       	cpc	r5, r19
     bec:	14 f4       	brge	.+4      	; 0xbf2 <RGB_Brightness_Dec+0x108>
	  temp[2]=b;
     bee:	4d 2d       	mov	r20, r13
     bf0:	01 c0       	rjmp	.+2      	; 0xbf4 <RGB_Brightness_Dec+0x10a>
     bf2:	40 2f       	mov	r20, r16
	}else{
	  temp[2]=i;
	}
	
	
	WS2812B_Send_Pixel(temp[0],temp[1],temp[2]);
     bf4:	0e 94 31 01 	call	0x262	; 0x262 <WS2812B_Send_Pixel>
     bf8:	98 86       	std	Y+8, r9	; 0x08
     bfa:	8f 82       	std	Y+7, r8	; 0x07
     bfc:	0a c0       	rjmp	.+20     	; 0xc12 <RGB_Brightness_Dec+0x128>
	
    for(uint16_t j=idle_pix;j<=WS2812B_ANIMATION_PIXELS;j++){
      WS2812B_Send_Pixel(0,0,0);
     bfe:	80 e0       	ldi	r24, 0x00	; 0
     c00:	60 e0       	ldi	r22, 0x00	; 0
     c02:	40 e0       	ldi	r20, 0x00	; 0
     c04:	0e 94 31 01 	call	0x262	; 0x262 <WS2812B_Send_Pixel>
	}
	
	
	WS2812B_Send_Pixel(temp[0],temp[1],temp[2]);
	
    for(uint16_t j=idle_pix;j<=WS2812B_ANIMATION_PIXELS;j++){
     c08:	ef 81       	ldd	r30, Y+7	; 0x07
     c0a:	f8 85       	ldd	r31, Y+8	; 0x08
     c0c:	31 96       	adiw	r30, 0x01	; 1
     c0e:	f8 87       	std	Y+8, r31	; 0x08
     c10:	ef 83       	std	Y+7, r30	; 0x07
     c12:	2f 81       	ldd	r18, Y+7	; 0x07
     c14:	38 85       	ldd	r19, Y+8	; 0x08
     c16:	2e 31       	cpi	r18, 0x1E	; 30
     c18:	31 05       	cpc	r19, r1
     c1a:	88 f3       	brcs	.-30     	; 0xbfe <RGB_Brightness_Dec+0x114>
     c1c:	88 e5       	ldi	r24, 0x58	; 88
     c1e:	92 e0       	ldi	r25, 0x02	; 2
     c20:	01 97       	sbiw	r24, 0x01	; 1
     c22:	f1 f7       	brne	.-4      	; 0xc20 <RGB_Brightness_Dec+0x136>
  if((RGBAnim.MaxVal % RGB_DEC_STEP)!=0){
    uint16_t temp=RGBAnim.MaxVal % RGB_DEC_STEP;
	RGBAnim.MaxVal-=temp;
  }
  
  for(int i=RGBAnim.MaxVal;i>=0;i-=RGB_DEC_STEP){
     c24:	04 50       	subi	r16, 0x04	; 4
     c26:	10 40       	sbci	r17, 0x00	; 0
     c28:	8c ef       	ldi	r24, 0xFC	; 252
     c2a:	9f ef       	ldi	r25, 0xFF	; 255
     c2c:	e8 0e       	add	r14, r24
     c2e:	f9 1e       	adc	r15, r25
     c30:	e6 14       	cp	r14, r6
     c32:	f7 04       	cpc	r15, r7
     c34:	29 f0       	breq	.+10     	; 0xc40 <RGB_Brightness_Dec+0x156>
     c36:	e4 e4       	ldi	r30, 0x44	; 68
     c38:	f1 e0       	ldi	r31, 0x01	; 1
     c3a:	f8 87       	std	Y+8, r31	; 0x08
     c3c:	ef 83       	std	Y+7, r30	; 0x07
     c3e:	bb cf       	rjmp	.-138    	; 0xbb6 <RGB_Brightness_Dec+0xcc>
      WS2812B_Send_Pixel(0,0,0);
    }
	
	_delay_us(200);
  }
}
     c40:	28 96       	adiw	r28, 0x08	; 8
     c42:	0f b6       	in	r0, 0x3f	; 63
     c44:	f8 94       	cli
     c46:	de bf       	out	0x3e, r29	; 62
     c48:	0f be       	out	0x3f, r0	; 63
     c4a:	cd bf       	out	0x3d, r28	; 61
     c4c:	cf 91       	pop	r28
     c4e:	df 91       	pop	r29
     c50:	1f 91       	pop	r17
     c52:	0f 91       	pop	r16
     c54:	ff 90       	pop	r15
     c56:	ef 90       	pop	r14
     c58:	df 90       	pop	r13
     c5a:	cf 90       	pop	r12
     c5c:	bf 90       	pop	r11
     c5e:	9f 90       	pop	r9
     c60:	8f 90       	pop	r8
     c62:	7f 90       	pop	r7
     c64:	6f 90       	pop	r6
     c66:	5f 90       	pop	r5
     c68:	4f 90       	pop	r4
     c6a:	3f 90       	pop	r3
     c6c:	2f 90       	pop	r2
     c6e:	08 95       	ret

00000c70 <RGB_Animation_Slide_Unfill_Mid>:
	RGBAnim.PixelBuf[i]=1;
	RGBAnim.PixelBuf[WS2812B_ANIMATION_PIXELS-i-1]=1;
  }
}

void RGB_Animation_Slide_Unfill_Mid(uint8_t r, uint8_t g, uint8_t b){
     c70:	df 92       	push	r13
     c72:	ef 92       	push	r14
     c74:	ff 92       	push	r15
     c76:	0f 93       	push	r16
     c78:	1f 93       	push	r17
     c7a:	cf 93       	push	r28
     c7c:	df 93       	push	r29
     c7e:	d8 2e       	mov	r13, r24
     c80:	e6 2e       	mov	r14, r22
     c82:	f4 2e       	mov	r15, r20
     c84:	05 e6       	ldi	r16, 0x65	; 101
     c86:	11 e0       	ldi	r17, 0x01	; 1
     c88:	cc e1       	ldi	r28, 0x1C	; 28
     c8a:	d0 e0       	ldi	r29, 0x00	; 0
  for(int i=WS2812B_ANIMATION_PIXELS-1;i>=0;i--){
    RGB_Brightness_Dec(r,g,b,i);
     c8c:	8d 2d       	mov	r24, r13
     c8e:	6e 2d       	mov	r22, r14
     c90:	4f 2d       	mov	r20, r15
     c92:	9e 01       	movw	r18, r28
     c94:	0e 94 75 05 	call	0xaea	; 0xaea <RGB_Brightness_Dec>
	RGBAnim.PixelBuf[i]=0;
     c98:	f8 01       	movw	r30, r16
     c9a:	10 82       	st	Z, r1
	RGBAnim.PixelBuf[WS2812B_ANIMATION_PIXELS-i-1]=1;
  }
}

void RGB_Animation_Slide_Unfill_Mid(uint8_t r, uint8_t g, uint8_t b){
  for(int i=WS2812B_ANIMATION_PIXELS-1;i>=0;i--){
     c9c:	21 97       	sbiw	r28, 0x01	; 1
     c9e:	01 50       	subi	r16, 0x01	; 1
     ca0:	10 40       	sbci	r17, 0x00	; 0
     ca2:	ff ef       	ldi	r31, 0xFF	; 255
     ca4:	cf 3f       	cpi	r28, 0xFF	; 255
     ca6:	df 07       	cpc	r29, r31
     ca8:	89 f7       	brne	.-30     	; 0xc8c <RGB_Animation_Slide_Unfill_Mid+0x1c>
    RGB_Brightness_Dec(r,g,b,i);
	RGBAnim.PixelBuf[i]=0;
  }
}
     caa:	df 91       	pop	r29
     cac:	cf 91       	pop	r28
     cae:	1f 91       	pop	r17
     cb0:	0f 91       	pop	r16
     cb2:	ff 90       	pop	r15
     cb4:	ef 90       	pop	r14
     cb6:	df 90       	pop	r13
     cb8:	08 95       	ret

00000cba <RGB_Animation_Slide_Unfill>:
    RGB_Brightness_Inc(r,g,b,i);
	RGBAnim.PixelBuf[i]=1;
  }
}

void RGB_Animation_Slide_Unfill(uint8_t r, uint8_t g, uint8_t b){
     cba:	df 92       	push	r13
     cbc:	ef 92       	push	r14
     cbe:	ff 92       	push	r15
     cc0:	0f 93       	push	r16
     cc2:	1f 93       	push	r17
     cc4:	cf 93       	push	r28
     cc6:	df 93       	push	r29
     cc8:	d8 2e       	mov	r13, r24
     cca:	e6 2e       	mov	r14, r22
     ccc:	f4 2e       	mov	r15, r20
     cce:	05 e6       	ldi	r16, 0x65	; 101
     cd0:	11 e0       	ldi	r17, 0x01	; 1
     cd2:	cc e1       	ldi	r28, 0x1C	; 28
     cd4:	d0 e0       	ldi	r29, 0x00	; 0
  for(int i=WS2812B_ANIMATION_PIXELS-1;i>=0;i--){
    RGB_Brightness_Dec(r,g,b,i);
     cd6:	8d 2d       	mov	r24, r13
     cd8:	6e 2d       	mov	r22, r14
     cda:	4f 2d       	mov	r20, r15
     cdc:	9e 01       	movw	r18, r28
     cde:	0e 94 75 05 	call	0xaea	; 0xaea <RGB_Brightness_Dec>
	RGBAnim.PixelBuf[i]=0;
     ce2:	f8 01       	movw	r30, r16
     ce4:	10 82       	st	Z, r1
	RGBAnim.PixelBuf[i]=1;
  }
}

void RGB_Animation_Slide_Unfill(uint8_t r, uint8_t g, uint8_t b){
  for(int i=WS2812B_ANIMATION_PIXELS-1;i>=0;i--){
     ce6:	21 97       	sbiw	r28, 0x01	; 1
     ce8:	01 50       	subi	r16, 0x01	; 1
     cea:	10 40       	sbci	r17, 0x00	; 0
     cec:	ff ef       	ldi	r31, 0xFF	; 255
     cee:	cf 3f       	cpi	r28, 0xFF	; 255
     cf0:	df 07       	cpc	r29, r31
     cf2:	89 f7       	brne	.-30     	; 0xcd6 <RGB_Animation_Slide_Unfill+0x1c>
    RGB_Brightness_Dec(r,g,b,i);
	RGBAnim.PixelBuf[i]=0;
  }
}
     cf4:	df 91       	pop	r29
     cf6:	cf 91       	pop	r28
     cf8:	1f 91       	pop	r17
     cfa:	0f 91       	pop	r16
     cfc:	ff 90       	pop	r15
     cfe:	ef 90       	pop	r14
     d00:	df 90       	pop	r13
     d02:	08 95       	ret

00000d04 <RGB_Brightness_Inc>:
	WS2812B_Send_Pixel(0,0,0);
  }
}


void RGB_Brightness_Inc(uint8_t r, uint8_t g, uint8_t b, uint16_t pixel){
     d04:	2f 92       	push	r2
     d06:	3f 92       	push	r3
     d08:	4f 92       	push	r4
     d0a:	5f 92       	push	r5
     d0c:	6f 92       	push	r6
     d0e:	7f 92       	push	r7
     d10:	8f 92       	push	r8
     d12:	9f 92       	push	r9
     d14:	af 92       	push	r10
     d16:	bf 92       	push	r11
     d18:	df 92       	push	r13
     d1a:	ef 92       	push	r14
     d1c:	ff 92       	push	r15
     d1e:	0f 93       	push	r16
     d20:	1f 93       	push	r17
     d22:	df 93       	push	r29
     d24:	cf 93       	push	r28
     d26:	00 d0       	rcall	.+0      	; 0xd28 <RGB_Brightness_Inc+0x24>
     d28:	00 d0       	rcall	.+0      	; 0xd2a <RGB_Brightness_Inc+0x26>
     d2a:	cd b7       	in	r28, 0x3d	; 61
     d2c:	de b7       	in	r29, 0x3e	; 62
     d2e:	d8 2e       	mov	r13, r24
     d30:	e6 2e       	mov	r14, r22
     d32:	f4 2e       	mov	r15, r20
     d34:	29 01       	movw	r4, r18
  RGBAnim.MaxVal=r;
     d36:	80 93 44 01 	sts	0x0144, r24
  
  if(g>RGBAnim.MaxVal){
     d3a:	86 17       	cp	r24, r22
     d3c:	10 f4       	brcc	.+4      	; 0xd42 <RGB_Brightness_Inc+0x3e>
    RGBAnim.MaxVal=g;
     d3e:	60 93 44 01 	sts	0x0144, r22
  }
  
  if(b>RGBAnim.MaxVal){
     d42:	80 91 44 01 	lds	r24, 0x0144
     d46:	8f 15       	cp	r24, r15
     d48:	10 f4       	brcc	.+4      	; 0xd4e <RGB_Brightness_Inc+0x4a>
    RGBAnim.MaxVal=b;
     d4a:	f0 92 44 01 	sts	0x0144, r15
  if((RGBAnim.MaxVal % RGB_INC_STEP)!=0){
    uint16_t temp=RGBAnim.MaxVal % RGB_INC_STEP;
	RGBAnim.MaxVal-=temp;
  }
  
  uint16_t loop_cnt=RGBAnim.MaxVal/3;
     d4e:	80 91 44 01 	lds	r24, 0x0144
     d52:	63 e0       	ldi	r22, 0x03	; 3
     d54:	0e 94 39 0b 	call	0x1672	; 0x1672 <__udivmodqi4>
     d58:	28 2f       	mov	r18, r24
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	3a 83       	std	Y+2, r19	; 0x02
     d5e:	29 83       	std	Y+1, r18	; 0x01
     d60:	00 e0       	ldi	r16, 0x00	; 0
     d62:	10 e0       	ldi	r17, 0x00	; 0
  
  for(uint16_t i=0;i<loop_cnt;i+=RGB_INC_STEP){
    
	
    uint16_t idle_pix=pixel;
    for(uint16_t j=0;j<idle_pix;j++){
     d64:	84 e4       	ldi	r24, 0x44	; 68
     d66:	28 2e       	mov	r2, r24
     d68:	81 e0       	ldi	r24, 0x01	; 1
     d6a:	38 2e       	mov	r3, r24
     d6c:	24 0c       	add	r2, r4
     d6e:	35 1c       	adc	r3, r5
	}else{
	  temp[2]=i;
	}
	
	
	WS2812B_Send_Pixel(temp[0],temp[1],temp[2]);
     d70:	6d 2c       	mov	r6, r13
     d72:	77 24       	eor	r7, r7
     d74:	8e 2c       	mov	r8, r14
     d76:	99 24       	eor	r9, r9
     d78:	af 2c       	mov	r10, r15
     d7a:	bb 24       	eor	r11, r11
     d7c:	43 c0       	rjmp	.+134    	; 0xe04 <RGB_Brightness_Inc+0x100>
  for(uint16_t i=0;i<loop_cnt;i+=RGB_INC_STEP){
    
	
    uint16_t idle_pix=pixel;
    for(uint16_t j=0;j<idle_pix;j++){
      if(RGBAnim.PixelBuf[j]){
     d7e:	eb 81       	ldd	r30, Y+3	; 0x03
     d80:	fc 81       	ldd	r31, Y+4	; 0x04
     d82:	85 81       	ldd	r24, Z+5	; 0x05
     d84:	88 23       	and	r24, r24
     d86:	21 f0       	breq	.+8      	; 0xd90 <RGB_Brightness_Inc+0x8c>
	    WS2812B_Send_Pixel(r,g,b);
     d88:	8d 2d       	mov	r24, r13
     d8a:	6e 2d       	mov	r22, r14
     d8c:	4f 2d       	mov	r20, r15
     d8e:	03 c0       	rjmp	.+6      	; 0xd96 <RGB_Brightness_Inc+0x92>
	  }else{
	    WS2812B_Send_Pixel(0,0,0);
     d90:	80 e0       	ldi	r24, 0x00	; 0
     d92:	60 e0       	ldi	r22, 0x00	; 0
     d94:	40 e0       	ldi	r20, 0x00	; 0
     d96:	0e 94 31 01 	call	0x262	; 0x262 <WS2812B_Send_Pixel>
     d9a:	2b 81       	ldd	r18, Y+3	; 0x03
     d9c:	3c 81       	ldd	r19, Y+4	; 0x04
     d9e:	2f 5f       	subi	r18, 0xFF	; 255
     da0:	3f 4f       	sbci	r19, 0xFF	; 255
     da2:	3c 83       	std	Y+4, r19	; 0x04
     da4:	2b 83       	std	Y+3, r18	; 0x03
  
  for(uint16_t i=0;i<loop_cnt;i+=RGB_INC_STEP){
    
	
    uint16_t idle_pix=pixel;
    for(uint16_t j=0;j<idle_pix;j++){
     da6:	8b 81       	ldd	r24, Y+3	; 0x03
     da8:	9c 81       	ldd	r25, Y+4	; 0x04
     daa:	82 15       	cp	r24, r2
     dac:	93 05       	cpc	r25, r3
     dae:	39 f7       	brne	.-50     	; 0xd7e <RGB_Brightness_Inc+0x7a>
	}else{
	  temp[2]=i;
	}
	
	
	WS2812B_Send_Pixel(temp[0],temp[1],temp[2]);
     db0:	20 2f       	mov	r18, r16
     db2:	60 16       	cp	r6, r16
     db4:	71 06       	cpc	r7, r17
     db6:	08 f4       	brcc	.+2      	; 0xdba <RGB_Brightness_Inc+0xb6>
     db8:	26 2d       	mov	r18, r6
     dba:	60 2f       	mov	r22, r16
     dbc:	80 16       	cp	r8, r16
     dbe:	91 06       	cpc	r9, r17
     dc0:	08 f4       	brcc	.+2      	; 0xdc4 <RGB_Brightness_Inc+0xc0>
     dc2:	68 2d       	mov	r22, r8
     dc4:	40 2f       	mov	r20, r16
     dc6:	a0 16       	cp	r10, r16
     dc8:	b1 06       	cpc	r11, r17
     dca:	08 f4       	brcc	.+2      	; 0xdce <RGB_Brightness_Inc+0xca>
     dcc:	4a 2d       	mov	r20, r10
     dce:	82 2f       	mov	r24, r18
     dd0:	0e 94 31 01 	call	0x262	; 0x262 <WS2812B_Send_Pixel>
     dd4:	5c 82       	std	Y+4, r5	; 0x04
     dd6:	4b 82       	std	Y+3, r4	; 0x03
     dd8:	0a c0       	rjmp	.+20     	; 0xdee <RGB_Brightness_Inc+0xea>
	
	for(uint16_t j=idle_pix;j<=WS2812B_ANIMATION_PIXELS;j++){
      WS2812B_Send_Pixel(0,0,0);
     dda:	80 e0       	ldi	r24, 0x00	; 0
     ddc:	60 e0       	ldi	r22, 0x00	; 0
     dde:	40 e0       	ldi	r20, 0x00	; 0
     de0:	0e 94 31 01 	call	0x262	; 0x262 <WS2812B_Send_Pixel>
	}
	
	
	WS2812B_Send_Pixel(temp[0],temp[1],temp[2]);
	
	for(uint16_t j=idle_pix;j<=WS2812B_ANIMATION_PIXELS;j++){
     de4:	eb 81       	ldd	r30, Y+3	; 0x03
     de6:	fc 81       	ldd	r31, Y+4	; 0x04
     de8:	31 96       	adiw	r30, 0x01	; 1
     dea:	fc 83       	std	Y+4, r31	; 0x04
     dec:	eb 83       	std	Y+3, r30	; 0x03
     dee:	2b 81       	ldd	r18, Y+3	; 0x03
     df0:	3c 81       	ldd	r19, Y+4	; 0x04
     df2:	2e 31       	cpi	r18, 0x1E	; 30
     df4:	31 05       	cpc	r19, r1
     df6:	88 f3       	brcs	.-30     	; 0xdda <RGB_Brightness_Inc+0xd6>
     df8:	8c e2       	ldi	r24, 0x2C	; 44
     dfa:	91 e0       	ldi	r25, 0x01	; 1
     dfc:	01 97       	sbiw	r24, 0x01	; 1
     dfe:	f1 f7       	brne	.-4      	; 0xdfc <RGB_Brightness_Inc+0xf8>
	RGBAnim.MaxVal-=temp;
  }
  
  uint16_t loop_cnt=RGBAnim.MaxVal/3;
  
  for(uint16_t i=0;i<loop_cnt;i+=RGB_INC_STEP){
     e00:	0f 5f       	subi	r16, 0xFF	; 255
     e02:	1f 4f       	sbci	r17, 0xFF	; 255
     e04:	89 81       	ldd	r24, Y+1	; 0x01
     e06:	9a 81       	ldd	r25, Y+2	; 0x02
     e08:	08 17       	cp	r16, r24
     e0a:	19 07       	cpc	r17, r25
     e0c:	28 f4       	brcc	.+10     	; 0xe18 <RGB_Brightness_Inc+0x114>
     e0e:	e4 e4       	ldi	r30, 0x44	; 68
     e10:	f1 e0       	ldi	r31, 0x01	; 1
     e12:	fc 83       	std	Y+4, r31	; 0x04
     e14:	eb 83       	std	Y+3, r30	; 0x03
     e16:	c7 cf       	rjmp	.-114    	; 0xda6 <RGB_Brightness_Inc+0xa2>
	for(uint16_t j=idle_pix;j<=WS2812B_ANIMATION_PIXELS;j++){
      WS2812B_Send_Pixel(0,0,0);
    }
	_delay_us(100);
  }
}
     e18:	0f 90       	pop	r0
     e1a:	0f 90       	pop	r0
     e1c:	0f 90       	pop	r0
     e1e:	0f 90       	pop	r0
     e20:	cf 91       	pop	r28
     e22:	df 91       	pop	r29
     e24:	1f 91       	pop	r17
     e26:	0f 91       	pop	r16
     e28:	ff 90       	pop	r15
     e2a:	ef 90       	pop	r14
     e2c:	df 90       	pop	r13
     e2e:	bf 90       	pop	r11
     e30:	af 90       	pop	r10
     e32:	9f 90       	pop	r9
     e34:	8f 90       	pop	r8
     e36:	7f 90       	pop	r7
     e38:	6f 90       	pop	r6
     e3a:	5f 90       	pop	r5
     e3c:	4f 90       	pop	r4
     e3e:	3f 90       	pop	r3
     e40:	2f 90       	pop	r2
     e42:	08 95       	ret

00000e44 <RGB_Animation_Slide_Fill>:
}




void RGB_Animation_Slide_Fill(uint8_t r, uint8_t g, uint8_t b){
     e44:	cf 92       	push	r12
     e46:	df 92       	push	r13
     e48:	ef 92       	push	r14
     e4a:	ff 92       	push	r15
     e4c:	0f 93       	push	r16
     e4e:	1f 93       	push	r17
     e50:	cf 93       	push	r28
     e52:	df 93       	push	r29
     e54:	d8 2e       	mov	r13, r24
     e56:	e6 2e       	mov	r14, r22
     e58:	f4 2e       	mov	r15, r20
     e5a:	09 e4       	ldi	r16, 0x49	; 73
     e5c:	11 e0       	ldi	r17, 0x01	; 1
     e5e:	c0 e0       	ldi	r28, 0x00	; 0
     e60:	d0 e0       	ldi	r29, 0x00	; 0
  for(uint16_t i=0;i<WS2812B_ANIMATION_PIXELS;i++){
    RGB_Brightness_Inc(r,g,b,i);
	RGBAnim.PixelBuf[i]=1;
     e62:	cc 24       	eor	r12, r12
     e64:	c3 94       	inc	r12



void RGB_Animation_Slide_Fill(uint8_t r, uint8_t g, uint8_t b){
  for(uint16_t i=0;i<WS2812B_ANIMATION_PIXELS;i++){
    RGB_Brightness_Inc(r,g,b,i);
     e66:	8d 2d       	mov	r24, r13
     e68:	6e 2d       	mov	r22, r14
     e6a:	4f 2d       	mov	r20, r15
     e6c:	9e 01       	movw	r18, r28
     e6e:	0e 94 82 06 	call	0xd04	; 0xd04 <RGB_Brightness_Inc>
	RGBAnim.PixelBuf[i]=1;
     e72:	f8 01       	movw	r30, r16
     e74:	c1 92       	st	Z+, r12
     e76:	8f 01       	movw	r16, r30




void RGB_Animation_Slide_Fill(uint8_t r, uint8_t g, uint8_t b){
  for(uint16_t i=0;i<WS2812B_ANIMATION_PIXELS;i++){
     e78:	21 96       	adiw	r28, 0x01	; 1
     e7a:	cd 31       	cpi	r28, 0x1D	; 29
     e7c:	d1 05       	cpc	r29, r1
     e7e:	99 f7       	brne	.-26     	; 0xe66 <RGB_Animation_Slide_Fill+0x22>
    RGB_Brightness_Inc(r,g,b,i);
	RGBAnim.PixelBuf[i]=1;
  }
}
     e80:	df 91       	pop	r29
     e82:	cf 91       	pop	r28
     e84:	1f 91       	pop	r17
     e86:	0f 91       	pop	r16
     e88:	ff 90       	pop	r15
     e8a:	ef 90       	pop	r14
     e8c:	df 90       	pop	r13
     e8e:	cf 90       	pop	r12
     e90:	08 95       	ret

00000e92 <RGB_Animation_Clear_All_Pixels>:
  for(uint16_t i=0;i<WS2812B_ANIMATION_PIXELS;i++){
	RGBAnim.PixelBuf[i]=0;
  }
}

void RGB_Animation_Clear_All_Pixels(void){
     e92:	cf 93       	push	r28
     e94:	df 93       	push	r29
     e96:	c0 e0       	ldi	r28, 0x00	; 0
     e98:	d0 e0       	ldi	r29, 0x00	; 0
  for(uint16_t j=0;j<WS2812B_TOTAL_PIXEL_CLEAR;j++){
	WS2812B_Send_Pixel(0,0,0);
     e9a:	80 e0       	ldi	r24, 0x00	; 0
     e9c:	60 e0       	ldi	r22, 0x00	; 0
     e9e:	40 e0       	ldi	r20, 0x00	; 0
     ea0:	0e 94 31 01 	call	0x262	; 0x262 <WS2812B_Send_Pixel>
	RGBAnim.PixelBuf[i]=0;
  }
}

void RGB_Animation_Clear_All_Pixels(void){
  for(uint16_t j=0;j<WS2812B_TOTAL_PIXEL_CLEAR;j++){
     ea4:	21 96       	adiw	r28, 0x01	; 1
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	cc 32       	cpi	r28, 0x2C	; 44
     eaa:	d8 07       	cpc	r29, r24
     eac:	b1 f7       	brne	.-20     	; 0xe9a <RGB_Animation_Clear_All_Pixels+0x8>
	WS2812B_Send_Pixel(0,0,0);
  }
}
     eae:	df 91       	pop	r29
     eb0:	cf 91       	pop	r28
     eb2:	08 95       	ret

00000eb4 <RGB_Animation_Init>:
  }
}


void RGB_Animation_Init(void){
  red=RED_MAX;
     eb4:	8f ef       	ldi	r24, 0xFF	; 255
     eb6:	80 93 36 01 	sts	0x0136, r24
  red_dir=HALT;
     eba:	82 e0       	ldi	r24, 0x02	; 2
     ebc:	80 93 39 01 	sts	0x0139, r24
  green_dir=HALT;
     ec0:	80 93 3a 01 	sts	0x013A, r24
  blue_dir=HALT;
     ec4:	80 93 3b 01 	sts	0x013B, r24
     ec8:	88 ee       	ldi	r24, 0xE8	; 232
     eca:	93 e0       	ldi	r25, 0x03	; 3
     ecc:	2c e2       	ldi	r18, 0x2C	; 44
     ece:	31 e0       	ldi	r19, 0x01	; 1
     ed0:	f9 01       	movw	r30, r18
     ed2:	31 97       	sbiw	r30, 0x01	; 1
     ed4:	f1 f7       	brne	.-4      	; 0xed2 <RGB_Animation_Init+0x1e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ed6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ed8:	d9 f7       	brne	.-10     	; 0xed0 <RGB_Animation_Init+0x1c>
  _delay_ms(100);
  RGB_Animation_Clear_All_Pixels();
     eda:	0e 94 49 07 	call	0xe92	; 0xe92 <RGB_Animation_Clear_All_Pixels>
     ede:	88 ee       	ldi	r24, 0xE8	; 232
     ee0:	93 e0       	ldi	r25, 0x03	; 3
     ee2:	2c e2       	ldi	r18, 0x2C	; 44
     ee4:	31 e0       	ldi	r19, 0x01	; 1
     ee6:	f9 01       	movw	r30, r18
     ee8:	31 97       	sbiw	r30, 0x01	; 1
     eea:	f1 f7       	brne	.-4      	; 0xee8 <RGB_Animation_Init+0x34>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eec:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eee:	d9 f7       	brne	.-10     	; 0xee6 <RGB_Animation_Init+0x32>
     ef0:	e9 e4       	ldi	r30, 0x49	; 73
     ef2:	f1 e0       	ldi	r31, 0x01	; 1

rgb_anim_t RGBAnim;

void RGB_Animation_Clear_Pixel_Buf(void){
  for(uint16_t i=0;i<WS2812B_ANIMATION_PIXELS;i++){
	RGBAnim.PixelBuf[i]=0;
     ef4:	11 92       	st	Z+, r1
}rgb_anim_t;

rgb_anim_t RGBAnim;

void RGB_Animation_Clear_Pixel_Buf(void){
  for(uint16_t i=0;i<WS2812B_ANIMATION_PIXELS;i++){
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	e6 36       	cpi	r30, 0x66	; 102
     efa:	f8 07       	cpc	r31, r24
     efc:	d9 f7       	brne	.-10     	; 0xef4 <RGB_Animation_Init+0x40>
  blue_dir=HALT;
  _delay_ms(100);
  RGB_Animation_Clear_All_Pixels();
  _delay_ms(100);
  RGB_Animation_Clear_Pixel_Buf(); 
}
     efe:	08 95       	ret

00000f00 <debug_struct_init>:
}debug_t;

debug_t debug;

void debug_struct_init(void){
  debug.error=0;
     f00:	10 92 dc 01 	sts	0x01DC, r1
  debug.datareg=0;
     f04:	10 92 dd 01 	sts	0x01DD, r1
  debug.databsy=1;
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	80 93 de 01 	sts	0x01DE, r24
     f0e:	80 e0       	ldi	r24, 0x00	; 0
     f10:	90 e0       	ldi	r25, 0x00	; 0
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
    debug.buf[i]=0;
     f12:	fc 01       	movw	r30, r24
     f14:	e4 52       	subi	r30, 0x24	; 36
     f16:	fe 4f       	sbci	r31, 0xFE	; 254
     f18:	13 82       	std	Z+3, r1	; 0x03
     f1a:	01 96       	adiw	r24, 0x01	; 1

void debug_struct_init(void){
  debug.error=0;
  debug.datareg=0;
  debug.databsy=1;
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
     f1c:	80 32       	cpi	r24, 0x20	; 32
     f1e:	91 05       	cpc	r25, r1
     f20:	c1 f7       	brne	.-16     	; 0xf12 <debug_struct_init+0x12>
    debug.buf[i]=0;
  }
  debug.bufindex=0;
     f22:	10 92 ff 01 	sts	0x01FF, r1
     f26:	e0 e0       	ldi	r30, 0x00	; 0
     f28:	f2 e0       	ldi	r31, 0x02	; 2
  for(uint8_t i=0;i<8;i++){
    debug.digits[i]=0;
     f2a:	11 92       	st	Z+, r1
  debug.databsy=1;
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
    debug.buf[i]=0;
  }
  debug.bufindex=0;
  for(uint8_t i=0;i<8;i++){
     f2c:	82 e0       	ldi	r24, 0x02	; 2
     f2e:	e8 30       	cpi	r30, 0x08	; 8
     f30:	f8 07       	cpc	r31, r24
     f32:	d9 f7       	brne	.-10     	; 0xf2a <debug_struct_init+0x2a>
    debug.digits[i]=0;
  }
  debug.input_num_digits=0;
     f34:	10 82       	st	Z, r1
}
     f36:	08 95       	ret

00000f38 <debug_timings_init>:

void debug_timings_init(void){
  #ifdef DEBUG_USE_TIMER0
  TCCR0A=0x00;
     f38:	14 bc       	out	0x24, r1	; 36
  TCCR0B=0x00;
     f3a:	15 bc       	out	0x25, r1	; 37
  TIMSK0=0x00;
     f3c:	10 92 6e 00 	sts	0x006E, r1
  TIFR0 =0xff;
     f40:	8f ef       	ldi	r24, 0xFF	; 255
     f42:	85 bb       	out	0x15, r24	; 21
  sei();
  #define ISR_PCINT_VECT PCINT0_vect
  #endif
  
  #ifdef DEBUG_RX_DDRC
  PCICR |=(1<<PCIE1);
     f44:	e8 e6       	ldi	r30, 0x68	; 104
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	82 60       	ori	r24, 0x02	; 2
     f4c:	80 83       	st	Z, r24
  PCMSK1|=(1<<DEBUG_RX_bp);
     f4e:	ec e6       	ldi	r30, 0x6C	; 108
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	80 64       	ori	r24, 0x40	; 64
     f56:	80 83       	st	Z, r24
  PCIFR |=(1<<PCIF1);
     f58:	d9 9a       	sbi	0x1b, 1	; 27
  sei();
     f5a:	78 94       	sei
  PCMSK2|=(1<<DEBUG_RX_bp);
  PCIFR |=(1<<PCIF2);
  sei();
  #define ISR_PCINT_VECT PCINT2_vect
  #endif
}
     f5c:	08 95       	ret

00000f5e <debug_timer_start>:

void debug_timer_start(void){
  #ifdef DEBUG_USE_TIMER0
  TIFR0 =0xff;
     f5e:	8f ef       	ldi	r24, 0xFF	; 255
     f60:	85 bb       	out	0x15, r24	; 21
  TIMSK0=0x00;
     f62:	ee e6       	ldi	r30, 0x6E	; 110
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	10 82       	st	Z, r1
  TCNT0 =200;
     f68:	88 ec       	ldi	r24, 0xC8	; 200
     f6a:	86 bd       	out	0x26, r24	; 38
  TCCR0B=(1<<CS02);
     f6c:	84 e0       	ldi	r24, 0x04	; 4
     f6e:	85 bd       	out	0x25, r24	; 37
  TIFR0 =(1<<TOV0);
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	85 bb       	out	0x15, r24	; 21
  TIMSK0=(1<<TOIE0);
     f74:	80 83       	st	Z, r24
  TCCR2B=(1<<CS22);
  TIFR2 =(1<<TOV2);
  TIMSK2=(1<<TOIE2);
  #define TIMER_OVF_VECT TIMER2_OVF_vect
  #endif
}
     f76:	08 95       	ret

00000f78 <debug_timer_stop>:

void debug_timer_stop(void){
  #ifdef DEBUG_USE_TIMER0
  TIMSK0=0;
     f78:	10 92 6e 00 	sts	0x006E, r1
  TCCR0B=0;
     f7c:	15 bc       	out	0x25, r1	; 37
  TCNT0 =0;
     f7e:	16 bc       	out	0x26, r1	; 38
  #ifdef DEBUG_USE_TIMER2
  TIMSK2=0;
  TCCR2B=0;
  TCNT2 =0;
  #endif
}
     f80:	08 95       	ret

00000f82 <debug_gpio_init>:

void debug_gpio_init(void){
  DEBUG_TX_DDR |= (1<<DEBUG_TX_bp);
     f82:	54 9a       	sbi	0x0a, 4	; 10
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
     f84:	5c 9a       	sbi	0x0b, 4	; 11
  DEBUG_RX_DDR &=~(1<<DEBUG_RX_bp);
     f86:	3e 98       	cbi	0x07, 6	; 7
  DEBUG_RX_PORT|= (1<<DEBUG_RX_bp);
     f88:	46 9a       	sbi	0x08, 6	; 8
  
  #ifdef DEBUG_GPIO_SWITCH_DEBUGGING
  DEBUG_TEST_DDR|=(1<<DEBUG_TEST_bp);
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
}
     f8a:	08 95       	ret

00000f8c <debug_tx_high>:

void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
     f8c:	5c 9a       	sbi	0x0b, 4	; 11
}
     f8e:	08 95       	ret

00000f90 <debug_tx_low>:

void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
     f90:	5c 98       	cbi	0x0b, 4	; 11
}
     f92:	08 95       	ret

00000f94 <debug_tx_set>:

void debug_tx_set(uint8_t pin_state){
  if(pin_state==1){
     f94:	81 30       	cpi	r24, 0x01	; 1
     f96:	11 f4       	brne	.+4      	; 0xf9c <debug_tx_set+0x8>
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
}

void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
     f98:	5c 9a       	sbi	0x0b, 4	; 11
     f9a:	08 95       	ret
}

void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
     f9c:	5c 98       	cbi	0x0b, 4	; 11
     f9e:	08 95       	ret

00000fa0 <debug_rx_get>:
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
     fa0:	86 b1       	in	r24, 0x06	; 6
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	26 e0       	ldi	r18, 0x06	; 6
     fa6:	96 95       	lsr	r25
     fa8:	87 95       	ror	r24
     faa:	2a 95       	dec	r18
     fac:	e1 f7       	brne	.-8      	; 0xfa6 <debug_rx_get+0x6>
    return 1;
  }else{
    return 0;
  }
}
     fae:	81 70       	andi	r24, 0x01	; 1
     fb0:	08 95       	ret

00000fb2 <debug_delay>:



////////////////////delay related functions//////////////////

void debug_delay(uint16_t val){
     fb2:	9c 01       	movw	r18, r24
  #ifdef DEBUG_USE_DELAY
  _delay_us(val);
  #endif
  
  #ifdef DEBUG_USE_TIMER0
  TCNT0=0;
     fb4:	16 bc       	out	0x26, r1	; 38
	
	#ifdef DEBUG_BAUD_RATE_19200
	#endif
	
	#ifdef DEBUG_BAUD_RATE_38400
	TCCR0B=(1<<CS00);
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	85 bd       	out	0x25, r24	; 37
	while(TCNT0<50){}
     fba:	86 b5       	in	r24, 0x26	; 38
     fbc:	82 33       	cpi	r24, 0x32	; 50
     fbe:	e8 f3       	brcs	.-6      	; 0xfba <debug_delay+0x8>
    TCNT0=0;
     fc0:	16 bc       	out	0x26, r1	; 38
	#endif
  
  while(TCNT0<val){}
     fc2:	86 b5       	in	r24, 0x26	; 38
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	82 17       	cp	r24, r18
     fc8:	93 07       	cpc	r25, r19
     fca:	d8 f3       	brcs	.-10     	; 0xfc2 <debug_delay+0x10>
  TCCR0B=0;
     fcc:	15 bc       	out	0x25, r1	; 37
  TCNT2=0;
  TCCR2B=(1<<CS20);
  while(TCNT2<val){}
  TCCR2B=0;
  #endif
}
     fce:	08 95       	ret

00000fd0 <debug_delay_index_0>:
    #ifdef DEBUG_BAUD_RATE_19200
    debug_delay(TIM0_BAUD_19200[0]);
    #endif
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM0_BAUD_38400[0]);
     fd0:	80 91 2c 01 	lds	r24, 0x012C
     fd4:	90 91 2d 01 	lds	r25, 0x012D
     fd8:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <debug_delay>
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM2_BAUD_38400[0]);
    #endif
  #endif
}
     fdc:	08 95       	ret

00000fde <debug_delay_index_1>:
    #ifdef DEBUG_BAUD_RATE_19200
    debug_delay(TIM0_BAUD_19200[1]);
    #endif
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM0_BAUD_38400[1]);
     fde:	80 91 2e 01 	lds	r24, 0x012E
     fe2:	90 91 2f 01 	lds	r25, 0x012F
     fe6:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <debug_delay>
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM2_BAUD_38400[1]);
    #endif
  #endif
}
     fea:	08 95       	ret

00000fec <debug_delay_index_2>:
    #ifdef DEBUG_BAUD_RATE_19200
    debug_delay(TIM0_BAUD_19200[2]);
    #endif
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM0_BAUD_38400[2]);
     fec:	80 91 30 01 	lds	r24, 0x0130
     ff0:	90 91 31 01 	lds	r25, 0x0131
     ff4:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <debug_delay>
	
    #ifdef DEBUG_BAUD_RATE_38400
    debug_delay(TIM2_BAUD_38400[2]);
    #endif
  #endif
}
     ff8:	08 95       	ret

00000ffa <debug_tx_byte>:




//////////////////tx-rx functions//////////////////
void debug_tx_byte(uint8_t val){
     ffa:	df 92       	push	r13
     ffc:	ef 92       	push	r14
     ffe:	ff 92       	push	r15
    1000:	0f 93       	push	r16
    1002:	1f 93       	push	r17
    1004:	df 93       	push	r29
    1006:	cf 93       	push	r28
    1008:	cd b7       	in	r28, 0x3d	; 61
    100a:	de b7       	in	r29, 0x3e	; 62
    100c:	2a 97       	sbiw	r28, 0x0a	; 10
    100e:	0f b6       	in	r0, 0x3f	; 63
    1010:	f8 94       	cli
    1012:	de bf       	out	0x3e, r29	; 62
    1014:	0f be       	out	0x3f, r0	; 63
    1016:	cd bf       	out	0x3d, r28	; 61
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
    1018:	fe 01       	movw	r30, r28
    101a:	31 96       	adiw	r30, 0x01	; 1
    101c:	9a e0       	ldi	r25, 0x0A	; 10
    101e:	df 01       	movw	r26, r30
    1020:	1d 92       	st	X+, r1
    1022:	9a 95       	dec	r25
    1024:	e9 f7       	brne	.-6      	; 0x1020 <debug_tx_byte+0x26>
    1026:	91 e0       	ldi	r25, 0x01	; 1
    1028:	9a 87       	std	Y+10, r25	; 0x0a
    102a:	fe 01       	movw	r30, r28
    102c:	32 96       	adiw	r30, 0x02	; 2
    102e:	20 e0       	ldi	r18, 0x00	; 0
    1030:	30 e0       	ldi	r19, 0x00	; 0
  for(uint8_t i=0;i<8;i++){
    if(val & (1<<i)){
    1032:	48 2f       	mov	r20, r24
    1034:	50 e0       	ldi	r21, 0x00	; 0
	  buf[i+1]=1;
    1036:	61 e0       	ldi	r22, 0x01	; 1

//////////////////tx-rx functions//////////////////
void debug_tx_byte(uint8_t val){
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
  for(uint8_t i=0;i<8;i++){
    if(val & (1<<i)){
    1038:	ca 01       	movw	r24, r20
    103a:	02 2e       	mov	r0, r18
    103c:	02 c0       	rjmp	.+4      	; 0x1042 <debug_tx_byte+0x48>
    103e:	95 95       	asr	r25
    1040:	87 95       	ror	r24
    1042:	0a 94       	dec	r0
    1044:	e2 f7       	brpl	.-8      	; 0x103e <debug_tx_byte+0x44>
    1046:	80 ff       	sbrs	r24, 0
    1048:	02 c0       	rjmp	.+4      	; 0x104e <debug_tx_byte+0x54>
	  buf[i+1]=1;
    104a:	60 83       	st	Z, r22
    104c:	01 c0       	rjmp	.+2      	; 0x1050 <debug_tx_byte+0x56>
	}else{
	  buf[i+1]=0;
    104e:	10 82       	st	Z, r1
    1050:	2f 5f       	subi	r18, 0xFF	; 255
    1052:	3f 4f       	sbci	r19, 0xFF	; 255
    1054:	31 96       	adiw	r30, 0x01	; 1


//////////////////tx-rx functions//////////////////
void debug_tx_byte(uint8_t val){
  uint8_t buf[10]={0,0,0,0,0,0,0,0,0,1};
  for(uint8_t i=0;i<8;i++){
    1056:	28 30       	cpi	r18, 0x08	; 8
    1058:	31 05       	cpc	r19, r1
    105a:	71 f7       	brne	.-36     	; 0x1038 <debug_tx_byte+0x3e>
	  buf[i+1]=1;
	}else{
	  buf[i+1]=0;
	}
  }
  uint8_t sreg=SREG;
    105c:	df b6       	in	r13, 0x3f	; 63
  cli();
    105e:	f8 94       	cli
    1060:	8e 01       	movw	r16, r28
    1062:	0f 5f       	subi	r16, 0xFF	; 255
    1064:	1f 4f       	sbci	r17, 0xFF	; 255
  for(uint8_t i=0;i<10;i++){
    1066:	3b e0       	ldi	r19, 0x0B	; 11
    1068:	e3 2e       	mov	r14, r19
    106a:	f1 2c       	mov	r15, r1
    106c:	ec 0e       	add	r14, r28
    106e:	fd 1e       	adc	r15, r29
void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
}

void debug_tx_set(uint8_t pin_state){
  if(pin_state==1){
    1070:	f8 01       	movw	r30, r16
    1072:	80 81       	ld	r24, Z
    1074:	81 30       	cpi	r24, 0x01	; 1
    1076:	11 f4       	brne	.+4      	; 0x107c <debug_tx_byte+0x82>
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
}

void debug_tx_high(void){
  DEBUG_TX_PORT|= (1<<DEBUG_TX_bp);
    1078:	5c 9a       	sbi	0x0b, 4	; 11
    107a:	01 c0       	rjmp	.+2      	; 0x107e <debug_tx_byte+0x84>
}

void debug_tx_low(void){
  DEBUG_TX_PORT&=~(1<<DEBUG_TX_bp);
    107c:	5c 98       	cbi	0x0b, 4	; 11
  uint8_t sreg=SREG;
  cli();
  for(uint8_t i=0;i<10;i++){
    debug_tx_set(buf[i]);
	
	debug_delay_index_0();    //tx one bit
    107e:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <debug_delay_index_0>
    1082:	0f 5f       	subi	r16, 0xFF	; 255
    1084:	1f 4f       	sbci	r17, 0xFF	; 255
	  buf[i+1]=0;
	}
  }
  uint8_t sreg=SREG;
  cli();
  for(uint8_t i=0;i<10;i++){
    1086:	0e 15       	cp	r16, r14
    1088:	1f 05       	cpc	r17, r15
    108a:	91 f7       	brne	.-28     	; 0x1070 <debug_tx_byte+0x76>
    debug_tx_set(buf[i]);
	
	debug_delay_index_0();    //tx one bit
  }
  SREG=sreg;
    108c:	df be       	out	0x3f, r13	; 63
}
    108e:	2a 96       	adiw	r28, 0x0a	; 10
    1090:	0f b6       	in	r0, 0x3f	; 63
    1092:	f8 94       	cli
    1094:	de bf       	out	0x3e, r29	; 62
    1096:	0f be       	out	0x3f, r0	; 63
    1098:	cd bf       	out	0x3d, r28	; 61
    109a:	cf 91       	pop	r28
    109c:	df 91       	pop	r29
    109e:	1f 91       	pop	r17
    10a0:	0f 91       	pop	r16
    10a2:	ff 90       	pop	r15
    10a4:	ef 90       	pop	r14
    10a6:	df 90       	pop	r13
    10a8:	08 95       	ret

000010aa <debug_rx_byte>:

uint8_t debug_rx_byte(void){
    10aa:	ff 92       	push	r15
    10ac:	0f 93       	push	r16
    10ae:	1f 93       	push	r17
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
    10b0:	36 9b       	sbis	0x06, 6	; 6
    10b2:	21 c0       	rjmp	.+66     	; 0x10f6 <debug_rx_byte+0x4c>
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
  }else{
    debug.error=0x02;
    10b4:	82 e0       	ldi	r24, 0x02	; 2
    10b6:	17 c0       	rjmp	.+46     	; 0x10e6 <debug_rx_byte+0x3c>
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
	st=debug_rx_get();
	for(uint8_t i=0;i<8;i++){
	  debug_delay_index_1();
    10b8:	0e 94 ef 07 	call	0xfde	; 0xfde <debug_delay_index_1>
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
    10bc:	36 99       	sbic	0x06, 6	; 6
	  #ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	  DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
      DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
      #endif
	  if(debug_rx_get()){
	    val|=0x80;
    10be:	00 68       	ori	r16, 0x80	; 128
	  }else{
	    dval|=0x80;
	  }
	  if(i<7){
    10c0:	17 30       	cpi	r17, 0x07	; 7
    10c2:	09 f0       	breq	.+2      	; 0x10c6 <debug_rx_byte+0x1c>
	    val>>=1;
    10c4:	06 95       	lsr	r16
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
	st=debug_rx_get();
	for(uint8_t i=0;i<8;i++){
    10c6:	1f 5f       	subi	r17, 0xFF	; 255
    10c8:	18 30       	cpi	r17, 0x08	; 8
    10ca:	b1 f7       	brne	.-20     	; 0x10b8 <debug_rx_byte+0xe>
	  }
	  if(i<7){
	    val>>=1;
	  }
	}
	debug_delay_index_1();
    10cc:	0e 94 ef 07 	call	0xfde	; 0xfde <debug_delay_index_1>
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
    10d0:	86 b1       	in	r24, 0x06	; 6
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
	DEBUG_TEST_PORT|=(1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
	sp=debug_rx_get();
	if( (st==0) && (sp==1) ){
    10d2:	f6 fc       	sbrc	r15, 6
    10d4:	07 c0       	rjmp	.+14     	; 0x10e4 <debug_rx_byte+0x3a>
    10d6:	86 ff       	sbrs	r24, 6
    10d8:	05 c0       	rjmp	.+10     	; 0x10e4 <debug_rx_byte+0x3a>
	  debug.datareg=val;
    10da:	00 93 dd 01 	sts	0x01DD, r16
	  debug.error=0x00;
    10de:	10 92 dc 01 	sts	0x01DC, r1
    10e2:	03 c0       	rjmp	.+6      	; 0x10ea <debug_rx_byte+0x40>
	}else{
	  debug.error=0x01;
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	80 93 dc 01 	sts	0x01DC, r24
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
  }else{
    debug.error=0x02;
  }
  return debug.datareg;
    10ea:	80 91 dd 01 	lds	r24, 0x01DD
}
    10ee:	1f 91       	pop	r17
    10f0:	0f 91       	pop	r16
    10f2:	ff 90       	pop	r15
    10f4:	08 95       	ret
}

uint8_t debug_rx_byte(void){
  if(debug_rx_get()==0){
    uint8_t val=0, dval=0, st=1, sp=0;
	debug_delay_index_2();    //half bit
    10f6:	0e 94 f6 07 	call	0xfec	; 0xfec <debug_delay_index_2>
}



uint8_t debug_rx_get(void){
  if(DEBUG_RX_PIN & (1<<DEBUG_RX_bp)){
    10fa:	f6 b0       	in	r15, 0x06	; 6
    10fc:	00 e0       	ldi	r16, 0x00	; 0
    10fe:	10 e0       	ldi	r17, 0x00	; 0
    1100:	db cf       	rjmp	.-74     	; 0x10b8 <debug_rx_byte+0xe>

00001102 <debug_rx_byte_get>:
  }
  return debug.datareg;
}

uint8_t debug_rx_byte_get(void){
  return debug.datareg;
    1102:	80 91 dd 01 	lds	r24, 0x01DD
}
    1106:	08 95       	ret

00001108 <debug_rx_byte_clear>:

void debug_rx_byte_clear(void){
  debug.datareg=0;
    1108:	10 92 dd 01 	sts	0x01DD, r1
}
    110c:	08 95       	ret

0000110e <debug_rx_byte_set>:

void debug_rx_byte_set(uint8_t val){
  debug.datareg=val;
    110e:	80 93 dd 01 	sts	0x01DD, r24
}
    1112:	08 95       	ret

00001114 <debug_tx_hex>:



///////////////////////hex and bin data tx///////////////////////

void debug_tx_hex(uint32_t val){
    1114:	bf 92       	push	r11
    1116:	cf 92       	push	r12
    1118:	df 92       	push	r13
    111a:	ef 92       	push	r14
    111c:	ff 92       	push	r15
    111e:	0f 93       	push	r16
    1120:	1f 93       	push	r17
    1122:	cf 93       	push	r28
    1124:	df 93       	push	r29
    1126:	7b 01       	movw	r14, r22
    1128:	8c 01       	movw	r16, r24
  uint16_t hex_digit, index=0, loop_counter=0;
  if(val <= 0xFF){
    112a:	8f ef       	ldi	r24, 0xFF	; 255
    112c:	e8 16       	cp	r14, r24
    112e:	f1 04       	cpc	r15, r1
    1130:	01 05       	cpc	r16, r1
    1132:	11 05       	cpc	r17, r1
    1134:	09 f0       	breq	.+2      	; 0x1138 <debug_tx_hex+0x24>
    1136:	30 f4       	brcc	.+12     	; 0x1144 <debug_tx_hex+0x30>
    1138:	c8 e0       	ldi	r28, 0x08	; 8
    113a:	d0 e0       	ldi	r29, 0x00	; 0
    113c:	62 e0       	ldi	r22, 0x02	; 2
    113e:	c6 2e       	mov	r12, r22
    1140:	d1 2c       	mov	r13, r1
    1142:	14 c0       	rjmp	.+40     	; 0x116c <debug_tx_hex+0x58>
    index=8;
    loop_counter=2;
  }else if(val <= 0xFFFF){
    1144:	80 e0       	ldi	r24, 0x00	; 0
    1146:	e8 16       	cp	r14, r24
    1148:	80 e0       	ldi	r24, 0x00	; 0
    114a:	f8 06       	cpc	r15, r24
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	08 07       	cpc	r16, r24
    1150:	80 e0       	ldi	r24, 0x00	; 0
    1152:	18 07       	cpc	r17, r24
    1154:	30 f0       	brcs	.+12     	; 0x1162 <debug_tx_hex+0x4e>
    1156:	c0 e2       	ldi	r28, 0x20	; 32
    1158:	d0 e0       	ldi	r29, 0x00	; 0
    115a:	58 e0       	ldi	r21, 0x08	; 8
    115c:	c5 2e       	mov	r12, r21
    115e:	d1 2c       	mov	r13, r1
    1160:	05 c0       	rjmp	.+10     	; 0x116c <debug_tx_hex+0x58>
    1162:	c0 e1       	ldi	r28, 0x10	; 16
    1164:	d0 e0       	ldi	r29, 0x00	; 0
    1166:	44 e0       	ldi	r20, 0x04	; 4
    1168:	c4 2e       	mov	r12, r20
    116a:	d1 2c       	mov	r13, r1
    loop_counter=4;     
  }else{
    index=32;
    loop_counter=8;
  }
  debug_tx_byte('0');
    116c:	80 e3       	ldi	r24, 0x30	; 48
    116e:	0e 94 fd 07 	call	0xffa	; 0xffa <debug_tx_byte>
  debug_tx_byte('x');
    1172:	88 e7       	ldi	r24, 0x78	; 120
    1174:	0e 94 fd 07 	call	0xffa	; 0xffa <debug_tx_byte>
    1178:	bb 24       	eor	r11, r11
    117a:	17 c0       	rjmp	.+46     	; 0x11aa <debug_tx_hex+0x96>
	for(uint8_t i=0;i<loop_counter;i++){
	  index-=4;
    117c:	24 97       	sbiw	r28, 0x04	; 4
	  hex_digit=(uint8_t)((val>>index) & 0x0F);
    117e:	d8 01       	movw	r26, r16
    1180:	c7 01       	movw	r24, r14
    1182:	0c 2e       	mov	r0, r28
    1184:	04 c0       	rjmp	.+8      	; 0x118e <debug_tx_hex+0x7a>
    1186:	b6 95       	lsr	r27
    1188:	a7 95       	ror	r26
    118a:	97 95       	ror	r25
    118c:	87 95       	ror	r24
    118e:	0a 94       	dec	r0
    1190:	d2 f7       	brpl	.-12     	; 0x1186 <debug_tx_hex+0x72>
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	8f 70       	andi	r24, 0x0F	; 15
    1196:	90 70       	andi	r25, 0x00	; 0
	  if(hex_digit>9){
    1198:	8a 30       	cpi	r24, 0x0A	; 10
    119a:	91 05       	cpc	r25, r1
    119c:	10 f0       	brcs	.+4      	; 0x11a2 <debug_tx_hex+0x8e>
	    hex_digit+=55;
    119e:	c7 96       	adiw	r24, 0x37	; 55
    11a0:	01 c0       	rjmp	.+2      	; 0x11a4 <debug_tx_hex+0x90>
	  }else {
	    hex_digit+=48;
    11a2:	c0 96       	adiw	r24, 0x30	; 48
	  }
	  debug_tx_byte((uint8_t)hex_digit);
    11a4:	0e 94 fd 07 	call	0xffa	; 0xffa <debug_tx_byte>
    index=32;
    loop_counter=8;
  }
  debug_tx_byte('0');
  debug_tx_byte('x');
	for(uint8_t i=0;i<loop_counter;i++){
    11a8:	b3 94       	inc	r11
    11aa:	8b 2d       	mov	r24, r11
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	8c 15       	cp	r24, r12
    11b0:	9d 05       	cpc	r25, r13
    11b2:	20 f3       	brcs	.-56     	; 0x117c <debug_tx_hex+0x68>
	  }else {
	    hex_digit+=48;
	  }
	  debug_tx_byte((uint8_t)hex_digit);
	}
}
    11b4:	df 91       	pop	r29
    11b6:	cf 91       	pop	r28
    11b8:	1f 91       	pop	r17
    11ba:	0f 91       	pop	r16
    11bc:	ff 90       	pop	r15
    11be:	ef 90       	pop	r14
    11c0:	df 90       	pop	r13
    11c2:	cf 90       	pop	r12
    11c4:	bf 90       	pop	r11
    11c6:	08 95       	ret

000011c8 <debug_tx_bin>:

void debug_tx_bin(uint32_t val){
    11c8:	af 92       	push	r10
    11ca:	bf 92       	push	r11
    11cc:	cf 92       	push	r12
    11ce:	df 92       	push	r13
    11d0:	ef 92       	push	r14
    11d2:	ff 92       	push	r15
    11d4:	0f 93       	push	r16
    11d6:	1f 93       	push	r17
    11d8:	cf 93       	push	r28
    11da:	df 93       	push	r29
    11dc:	7b 01       	movw	r14, r22
    11de:	8c 01       	movw	r16, r24
  uint8_t loop_counter=0;
  if(val <= 0xFF){
    11e0:	6f 3f       	cpi	r22, 0xFF	; 255
    11e2:	71 05       	cpc	r23, r1
    11e4:	81 05       	cpc	r24, r1
    11e6:	91 05       	cpc	r25, r1
    11e8:	09 f0       	breq	.+2      	; 0x11ec <debug_tx_bin+0x24>
    11ea:	18 f4       	brcc	.+6      	; 0x11f2 <debug_tx_bin+0x2a>
    11ec:	f7 e0       	ldi	r31, 0x07	; 7
    11ee:	df 2e       	mov	r13, r31
    11f0:	0d c0       	rjmp	.+26     	; 0x120c <debug_tx_bin+0x44>
    loop_counter=7;
  }else if(val <= 0xFFFF){
    11f2:	60 30       	cpi	r22, 0x00	; 0
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	73 07       	cpc	r23, r19
    11f8:	31 e0       	ldi	r19, 0x01	; 1
    11fa:	83 07       	cpc	r24, r19
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	93 07       	cpc	r25, r19
    1200:	18 f0       	brcs	.+6      	; 0x1208 <debug_tx_bin+0x40>
    1202:	ef e1       	ldi	r30, 0x1F	; 31
    1204:	de 2e       	mov	r13, r30
    1206:	02 c0       	rjmp	.+4      	; 0x120c <debug_tx_bin+0x44>
    1208:	7f e0       	ldi	r23, 0x0F	; 15
    120a:	d7 2e       	mov	r13, r23
    loop_counter=15;     
  }else{
    loop_counter=31;
  }
  
  debug_tx_byte('0');
    120c:	80 e3       	ldi	r24, 0x30	; 48
    120e:	0e 94 fd 07 	call	0xffa	; 0xffa <debug_tx_byte>
  debug_tx_byte('b');
    1212:	82 e6       	ldi	r24, 0x62	; 98
    1214:	0e 94 fd 07 	call	0xffa	; 0xffa <debug_tx_byte>
    1218:	c0 e0       	ldi	r28, 0x00	; 0
    121a:	d0 e0       	ldi	r29, 0x00	; 0
	  }
	  debug_tx_byte((uint8_t)hex_digit);
	}
}

void debug_tx_bin(uint32_t val){
    121c:	cd 2c       	mov	r12, r13
    121e:	dd 24       	eor	r13, r13
    loop_counter=31;
  }
  
  debug_tx_byte('0');
  debug_tx_byte('b');
  for(int i=loop_counter; i>=0; i--){
    1220:	56 01       	movw	r10, r12
    1222:	08 94       	sec
    1224:	a1 1c       	adc	r10, r1
    1226:	b1 1c       	adc	r11, r1
    if( (val>>i) & 1){
    1228:	c6 01       	movw	r24, r12
    122a:	8c 1b       	sub	r24, r28
    122c:	9d 0b       	sbc	r25, r29
    122e:	a8 01       	movw	r20, r16
    1230:	97 01       	movw	r18, r14
    1232:	04 c0       	rjmp	.+8      	; 0x123c <debug_tx_bin+0x74>
    1234:	56 95       	lsr	r21
    1236:	47 95       	ror	r20
    1238:	37 95       	ror	r19
    123a:	27 95       	ror	r18
    123c:	8a 95       	dec	r24
    123e:	d2 f7       	brpl	.-12     	; 0x1234 <debug_tx_bin+0x6c>
    1240:	da 01       	movw	r26, r20
    1242:	c9 01       	movw	r24, r18
    1244:	81 70       	andi	r24, 0x01	; 1
    1246:	90 70       	andi	r25, 0x00	; 0
    1248:	89 2b       	or	r24, r25
    124a:	11 f0       	breq	.+4      	; 0x1250 <debug_tx_bin+0x88>
      debug_tx_byte( 49 );   
    124c:	81 e3       	ldi	r24, 0x31	; 49
    124e:	01 c0       	rjmp	.+2      	; 0x1252 <debug_tx_bin+0x8a>
    }else{
      debug_tx_byte( 48 );         
    1250:	80 e3       	ldi	r24, 0x30	; 48
    1252:	0e 94 fd 07 	call	0xffa	; 0xffa <debug_tx_byte>
    1256:	21 96       	adiw	r28, 0x01	; 1
    loop_counter=31;
  }
  
  debug_tx_byte('0');
  debug_tx_byte('b');
  for(int i=loop_counter; i>=0; i--){
    1258:	ca 15       	cp	r28, r10
    125a:	db 05       	cpc	r29, r11
    125c:	29 f7       	brne	.-54     	; 0x1228 <debug_tx_bin+0x60>
      debug_tx_byte( 49 );   
    }else{
      debug_tx_byte( 48 );         
    }
  }
}
    125e:	df 91       	pop	r29
    1260:	cf 91       	pop	r28
    1262:	1f 91       	pop	r17
    1264:	0f 91       	pop	r16
    1266:	ff 90       	pop	r15
    1268:	ef 90       	pop	r14
    126a:	df 90       	pop	r13
    126c:	cf 90       	pop	r12
    126e:	bf 90       	pop	r11
    1270:	af 90       	pop	r10
    1272:	08 95       	ret

00001274 <debug_tx_nl>:


/////////////////end char functions//////////////////////

void debug_tx_nl(void){
  debug_tx_byte('\r');
    1274:	8d e0       	ldi	r24, 0x0D	; 13
    1276:	0e 94 fd 07 	call	0xffa	; 0xffa <debug_tx_byte>
  debug_tx_byte('\n');
    127a:	8a e0       	ldi	r24, 0x0A	; 10
    127c:	0e 94 fd 07 	call	0xffa	; 0xffa <debug_tx_byte>
}
    1280:	08 95       	ret

00001282 <debug_tx_sp>:

void debug_tx_sp(void){
  debug_tx_byte(' ');
    1282:	80 e2       	ldi	r24, 0x20	; 32
    1284:	0e 94 fd 07 	call	0xffa	; 0xffa <debug_tx_byte>
}
    1288:	08 95       	ret

0000128a <debug_tx_cm>:

void debug_tx_cm(void){
  debug_tx_byte(',');
    128a:	8c e2       	ldi	r24, 0x2C	; 44
    128c:	0e 94 fd 07 	call	0xffa	; 0xffa <debug_tx_byte>
}
    1290:	08 95       	ret

00001292 <debug_tx_text>:



/////////////////tx text functions//////////////////////

void debug_tx_text(char *str){
    1292:	1f 93       	push	r17
    1294:	cf 93       	push	r28
    1296:	df 93       	push	r29
    1298:	ec 01       	movw	r28, r24
    129a:	10 e0       	ldi	r17, 0x00	; 0
    129c:	03 c0       	rjmp	.+6      	; 0x12a4 <debug_tx_text+0x12>
    uint8_t i=0;
    while(str[i]!='\0'){
        debug_tx_byte(str[i]);
    129e:	0e 94 fd 07 	call	0xffa	; 0xffa <debug_tx_byte>
        i++;
    12a2:	1f 5f       	subi	r17, 0xFF	; 255

/////////////////tx text functions//////////////////////

void debug_tx_text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
    12a4:	fe 01       	movw	r30, r28
    12a6:	e1 0f       	add	r30, r17
    12a8:	f1 1d       	adc	r31, r1
    12aa:	80 81       	ld	r24, Z
    12ac:	88 23       	and	r24, r24
    12ae:	b9 f7       	brne	.-18     	; 0x129e <debug_tx_text+0xc>
        debug_tx_byte(str[i]);
        i++;
    }
}
    12b0:	df 91       	pop	r29
    12b2:	cf 91       	pop	r28
    12b4:	1f 91       	pop	r17
    12b6:	08 95       	ret

000012b8 <debug_tx_text_nl>:

void debug_tx_text_nl(char *str){
  debug_tx_text(str);
    12b8:	0e 94 49 09 	call	0x1292	; 0x1292 <debug_tx_text>
  debug_tx_nl();
    12bc:	0e 94 3a 09 	call	0x1274	; 0x1274 <debug_tx_nl>
}
    12c0:	08 95       	ret

000012c2 <debug_tx_text_sp>:

void debug_tx_text_sp(char *str){
  debug_tx_text(str);
    12c2:	0e 94 49 09 	call	0x1292	; 0x1292 <debug_tx_text>
  debug_tx_sp();
    12c6:	0e 94 41 09 	call	0x1282	; 0x1282 <debug_tx_sp>
}
    12ca:	08 95       	ret

000012cc <debug_tx_text_cm>:

void debug_tx_text_cm(char *str){
  debug_tx_text(str);
    12cc:	0e 94 49 09 	call	0x1292	; 0x1292 <debug_tx_text>
  debug_tx_cm();
    12d0:	0e 94 45 09 	call	0x128a	; 0x128a <debug_tx_cm>
}
    12d4:	08 95       	ret

000012d6 <debug_determine_digit_numbers>:



//////////////////number tx functions///////////////////

void debug_determine_digit_numbers(uint32_t num){
    12d6:	bf 92       	push	r11
    12d8:	cf 92       	push	r12
    12da:	df 92       	push	r13
    12dc:	ef 92       	push	r14
    12de:	ff 92       	push	r15
    12e0:	0f 93       	push	r16
    12e2:	1f 93       	push	r17
    12e4:	6b 01       	movw	r12, r22
    12e6:	7c 01       	movw	r14, r24
  uint8_t i=0;
  if(num==0){
    12e8:	61 15       	cp	r22, r1
    12ea:	71 05       	cpc	r23, r1
    12ec:	81 05       	cpc	r24, r1
    12ee:	91 05       	cpc	r25, r1
    12f0:	31 f4       	brne	.+12     	; 0x12fe <debug_determine_digit_numbers+0x28>
    debug.digits[0]=0;
    12f2:	10 92 00 02 	sts	0x0200, r1
    debug.input_num_digits=1;
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	80 93 08 02 	sts	0x0208, r24
    12fc:	23 c0       	rjmp	.+70     	; 0x1344 <debug_determine_digit_numbers+0x6e>
    12fe:	bb 24       	eor	r11, r11
  }else{
    while(num!=0){
      debug.digits[i]=num%10;
    1300:	0b 2d       	mov	r16, r11
    1302:	10 e0       	ldi	r17, 0x00	; 0
    1304:	04 52       	subi	r16, 0x24	; 36
    1306:	1e 4f       	sbci	r17, 0xFE	; 254
    1308:	c7 01       	movw	r24, r14
    130a:	b6 01       	movw	r22, r12
    130c:	2a e0       	ldi	r18, 0x0A	; 10
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	40 e0       	ldi	r20, 0x00	; 0
    1312:	50 e0       	ldi	r21, 0x00	; 0
    1314:	0e 94 45 0b 	call	0x168a	; 0x168a <__udivmodsi4>
    1318:	f8 01       	movw	r30, r16
    131a:	64 a3       	std	Z+36, r22	; 0x24
      num/=10;
    131c:	c7 01       	movw	r24, r14
    131e:	b6 01       	movw	r22, r12
    1320:	2a e0       	ldi	r18, 0x0A	; 10
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	40 e0       	ldi	r20, 0x00	; 0
    1326:	50 e0       	ldi	r21, 0x00	; 0
    1328:	0e 94 45 0b 	call	0x168a	; 0x168a <__udivmodsi4>
    132c:	c9 01       	movw	r24, r18
    132e:	da 01       	movw	r26, r20
    1330:	6c 01       	movw	r12, r24
    1332:	7d 01       	movw	r14, r26
      i++;
    1334:	b3 94       	inc	r11
  uint8_t i=0;
  if(num==0){
    debug.digits[0]=0;
    debug.input_num_digits=1;
  }else{
    while(num!=0){
    1336:	c1 14       	cp	r12, r1
    1338:	d1 04       	cpc	r13, r1
    133a:	e1 04       	cpc	r14, r1
    133c:	f1 04       	cpc	r15, r1
    133e:	01 f7       	brne	.-64     	; 0x1300 <debug_determine_digit_numbers+0x2a>
      debug.digits[i]=num%10;
      num/=10;
      i++;
    }
	debug.input_num_digits=i;
    1340:	b0 92 08 02 	sts	0x0208, r11
  }
}
    1344:	1f 91       	pop	r17
    1346:	0f 91       	pop	r16
    1348:	ff 90       	pop	r15
    134a:	ef 90       	pop	r14
    134c:	df 90       	pop	r13
    134e:	cf 90       	pop	r12
    1350:	bf 90       	pop	r11
    1352:	08 95       	ret

00001354 <debug_tx_number_digits>:

void debug_tx_number_digits(void){
    1354:	1f 93       	push	r17
  for(uint8_t i=debug.input_num_digits; i>0; i--){
    1356:	10 91 08 02 	lds	r17, 0x0208
    135a:	09 c0       	rjmp	.+18     	; 0x136e <debug_tx_number_digits+0x1a>
    uint8_t temp=i;
    temp-=1;
    135c:	11 50       	subi	r17, 0x01	; 1
    temp=debug.digits[temp];
    135e:	e1 2f       	mov	r30, r17
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	e4 52       	subi	r30, 0x24	; 36
    1364:	fe 4f       	sbci	r31, 0xFE	; 254
    1366:	84 a1       	ldd	r24, Z+36	; 0x24
    temp+=48;
    debug_tx_byte(temp);
    1368:	80 5d       	subi	r24, 0xD0	; 208
    136a:	0e 94 fd 07 	call	0xffa	; 0xffa <debug_tx_byte>
	debug.input_num_digits=i;
  }
}

void debug_tx_number_digits(void){
  for(uint8_t i=debug.input_num_digits; i>0; i--){
    136e:	11 23       	and	r17, r17
    1370:	a9 f7       	brne	.-22     	; 0x135c <debug_tx_number_digits+0x8>
    temp-=1;
    temp=debug.digits[temp];
    temp+=48;
    debug_tx_byte(temp);
  }
}
    1372:	1f 91       	pop	r17
    1374:	08 95       	ret

00001376 <debug_tx_number>:

void debug_tx_number(int32_t num){
    1376:	ef 92       	push	r14
    1378:	ff 92       	push	r15
    137a:	0f 93       	push	r16
    137c:	1f 93       	push	r17
    137e:	7b 01       	movw	r14, r22
    1380:	8c 01       	movw	r16, r24
  if(num<0){
    1382:	97 ff       	sbrs	r25, 7
    1384:	0b c0       	rjmp	.+22     	; 0x139c <debug_tx_number+0x26>
    debug_tx_byte('-');
    1386:	8d e2       	ldi	r24, 0x2D	; 45
    1388:	0e 94 fd 07 	call	0xffa	; 0xffa <debug_tx_byte>
	num=-num;
    138c:	10 95       	com	r17
    138e:	00 95       	com	r16
    1390:	f0 94       	com	r15
    1392:	e0 94       	com	r14
    1394:	e1 1c       	adc	r14, r1
    1396:	f1 1c       	adc	r15, r1
    1398:	01 1d       	adc	r16, r1
    139a:	11 1d       	adc	r17, r1
  }
  debug_determine_digit_numbers((uint32_t)num);
    139c:	c8 01       	movw	r24, r16
    139e:	b7 01       	movw	r22, r14
    13a0:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <debug_determine_digit_numbers>
  debug_tx_number_digits();
    13a4:	0e 94 aa 09 	call	0x1354	; 0x1354 <debug_tx_number_digits>
}
    13a8:	1f 91       	pop	r17
    13aa:	0f 91       	pop	r16
    13ac:	ff 90       	pop	r15
    13ae:	ef 90       	pop	r14
    13b0:	08 95       	ret

000013b2 <debug_tx_number_nl>:



/////////////////////number with end functions/////////////
void debug_tx_number_nl(int32_t num){
  debug_tx_number(num);
    13b2:	0e 94 bb 09 	call	0x1376	; 0x1376 <debug_tx_number>
  debug_tx_nl();
    13b6:	0e 94 3a 09 	call	0x1274	; 0x1274 <debug_tx_nl>
}
    13ba:	08 95       	ret

000013bc <debug_tx_number_sp>:

void debug_tx_number_sp(int32_t num){
  debug_tx_number(num);
    13bc:	0e 94 bb 09 	call	0x1376	; 0x1376 <debug_tx_number>
  debug_tx_sp();
    13c0:	0e 94 41 09 	call	0x1282	; 0x1282 <debug_tx_sp>
}
    13c4:	08 95       	ret

000013c6 <debug_tx_number_cm>:

void debug_tx_number_cm(int32_t num){
  debug_tx_number(num);
    13c6:	0e 94 bb 09 	call	0x1376	; 0x1376 <debug_tx_number>
  debug_tx_text(",");
    13ca:	8e e1       	ldi	r24, 0x1E	; 30
    13cc:	91 e0       	ldi	r25, 0x01	; 1
    13ce:	0e 94 49 09 	call	0x1292	; 0x1292 <debug_tx_text>
}
    13d2:	08 95       	ret

000013d4 <debug_tx_number_hex_nl>:


///////////////hex number with end functions/////////////

void debug_tx_number_hex_nl(int32_t num){
  debug_tx_hex(num);
    13d4:	0e 94 8a 08 	call	0x1114	; 0x1114 <debug_tx_hex>
  debug_tx_nl();
    13d8:	0e 94 3a 09 	call	0x1274	; 0x1274 <debug_tx_nl>
}
    13dc:	08 95       	ret

000013de <debug_tx_number_hex_sp>:

void debug_tx_number_hex_sp(int32_t num){
  debug_tx_hex(num);
    13de:	0e 94 8a 08 	call	0x1114	; 0x1114 <debug_tx_hex>
  debug_tx_sp();
    13e2:	0e 94 41 09 	call	0x1282	; 0x1282 <debug_tx_sp>
}
    13e6:	08 95       	ret

000013e8 <debug_tx_number_hex_cm>:

void debug_tx_number_hex_cm(int32_t num){
  debug_tx_hex(num);
    13e8:	0e 94 8a 08 	call	0x1114	; 0x1114 <debug_tx_hex>
  debug_tx_text(",");
    13ec:	8e e1       	ldi	r24, 0x1E	; 30
    13ee:	91 e0       	ldi	r25, 0x01	; 1
    13f0:	0e 94 49 09 	call	0x1292	; 0x1292 <debug_tx_text>
}
    13f4:	08 95       	ret

000013f6 <debug_tx_number_bin_nl>:


///////////////bin number with end functions/////////////

void debug_tx_number_bin_nl(int32_t num){
  debug_tx_bin(num);
    13f6:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <debug_tx_bin>
  debug_tx_nl();
    13fa:	0e 94 3a 09 	call	0x1274	; 0x1274 <debug_tx_nl>
}
    13fe:	08 95       	ret

00001400 <debug_tx_number_bin_sp>:

void debug_tx_number_bin_sp(int32_t num){
  debug_tx_bin(num);
    1400:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <debug_tx_bin>
  debug_tx_sp();
    1404:	0e 94 41 09 	call	0x1282	; 0x1282 <debug_tx_sp>
}
    1408:	08 95       	ret

0000140a <debug_tx_number_bin_cm>:

void debug_tx_number_bin_cm(int32_t num){
  debug_tx_bin(num);
    140a:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <debug_tx_bin>
  debug_tx_text(",");
    140e:	8e e1       	ldi	r24, 0x1E	; 30
    1410:	91 e0       	ldi	r25, 0x01	; 1
    1412:	0e 94 49 09 	call	0x1292	; 0x1292 <debug_tx_text>
}
    1416:	08 95       	ret

00001418 <debug_tx_parameter_nl>:



///////////////parameter & number with end functions/////////////

void debug_tx_parameter_nl(char *name, int32_t num){
    1418:	ef 92       	push	r14
    141a:	ff 92       	push	r15
    141c:	0f 93       	push	r16
    141e:	1f 93       	push	r17
    1420:	7a 01       	movw	r14, r20
    1422:	8b 01       	movw	r16, r22
  debug_tx_text(name);
    1424:	0e 94 49 09 	call	0x1292	; 0x1292 <debug_tx_text>
  debug_tx_sp();
    1428:	0e 94 41 09 	call	0x1282	; 0x1282 <debug_tx_sp>
  debug_tx_number_nl(num);
    142c:	c8 01       	movw	r24, r16
    142e:	b7 01       	movw	r22, r14
    1430:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <debug_tx_number_nl>
}
    1434:	1f 91       	pop	r17
    1436:	0f 91       	pop	r16
    1438:	ff 90       	pop	r15
    143a:	ef 90       	pop	r14
    143c:	08 95       	ret

0000143e <debug_tx_parameter_sp>:

void debug_tx_parameter_sp(char *name, int32_t num){
    143e:	ef 92       	push	r14
    1440:	ff 92       	push	r15
    1442:	0f 93       	push	r16
    1444:	1f 93       	push	r17
    1446:	7a 01       	movw	r14, r20
    1448:	8b 01       	movw	r16, r22
  debug_tx_text(name);
    144a:	0e 94 49 09 	call	0x1292	; 0x1292 <debug_tx_text>
  debug_tx_sp();
    144e:	0e 94 41 09 	call	0x1282	; 0x1282 <debug_tx_sp>
  debug_tx_number_sp(num);
    1452:	c8 01       	movw	r24, r16
    1454:	b7 01       	movw	r22, r14
    1456:	0e 94 de 09 	call	0x13bc	; 0x13bc <debug_tx_number_sp>
}
    145a:	1f 91       	pop	r17
    145c:	0f 91       	pop	r16
    145e:	ff 90       	pop	r15
    1460:	ef 90       	pop	r14
    1462:	08 95       	ret

00001464 <debug_tx_parameter_cm>:

void debug_tx_parameter_cm(char *name, int32_t num){
    1464:	ef 92       	push	r14
    1466:	ff 92       	push	r15
    1468:	0f 93       	push	r16
    146a:	1f 93       	push	r17
    146c:	7a 01       	movw	r14, r20
    146e:	8b 01       	movw	r16, r22
  debug_tx_text(name);
    1470:	0e 94 49 09 	call	0x1292	; 0x1292 <debug_tx_text>
  debug_tx_sp();
    1474:	0e 94 41 09 	call	0x1282	; 0x1282 <debug_tx_sp>
  debug_tx_number_cm(num);
    1478:	c8 01       	movw	r24, r16
    147a:	b7 01       	movw	r22, r14
    147c:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <debug_tx_number_cm>
}
    1480:	1f 91       	pop	r17
    1482:	0f 91       	pop	r16
    1484:	ff 90       	pop	r15
    1486:	ef 90       	pop	r14
    1488:	08 95       	ret

0000148a <debug_tx_parameter_hex_nl>:


///////////parameter & hex number with end functions///////////

void debug_tx_parameter_hex_nl(char *name, int32_t num){
    148a:	ef 92       	push	r14
    148c:	ff 92       	push	r15
    148e:	0f 93       	push	r16
    1490:	1f 93       	push	r17
    1492:	7a 01       	movw	r14, r20
    1494:	8b 01       	movw	r16, r22
  debug_tx_text(name);
    1496:	0e 94 49 09 	call	0x1292	; 0x1292 <debug_tx_text>
  debug_tx_sp();
    149a:	0e 94 41 09 	call	0x1282	; 0x1282 <debug_tx_sp>
  debug_tx_number_hex_nl(num);
    149e:	c8 01       	movw	r24, r16
    14a0:	b7 01       	movw	r22, r14
    14a2:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <debug_tx_number_hex_nl>
}
    14a6:	1f 91       	pop	r17
    14a8:	0f 91       	pop	r16
    14aa:	ff 90       	pop	r15
    14ac:	ef 90       	pop	r14
    14ae:	08 95       	ret

000014b0 <debug_tx_parameter_hex_sp>:

void debug_tx_parameter_hex_sp(char *name, int32_t num){
    14b0:	ef 92       	push	r14
    14b2:	ff 92       	push	r15
    14b4:	0f 93       	push	r16
    14b6:	1f 93       	push	r17
    14b8:	7a 01       	movw	r14, r20
    14ba:	8b 01       	movw	r16, r22
  debug_tx_text(name);
    14bc:	0e 94 49 09 	call	0x1292	; 0x1292 <debug_tx_text>
  debug_tx_sp();
    14c0:	0e 94 41 09 	call	0x1282	; 0x1282 <debug_tx_sp>
  debug_tx_number_hex_sp(num);
    14c4:	c8 01       	movw	r24, r16
    14c6:	b7 01       	movw	r22, r14
    14c8:	0e 94 ef 09 	call	0x13de	; 0x13de <debug_tx_number_hex_sp>
}
    14cc:	1f 91       	pop	r17
    14ce:	0f 91       	pop	r16
    14d0:	ff 90       	pop	r15
    14d2:	ef 90       	pop	r14
    14d4:	08 95       	ret

000014d6 <Debug_tx_parameter_hex_cm>:

void Debug_tx_parameter_hex_cm(char *name, int32_t num){
    14d6:	ef 92       	push	r14
    14d8:	ff 92       	push	r15
    14da:	0f 93       	push	r16
    14dc:	1f 93       	push	r17
    14de:	7a 01       	movw	r14, r20
    14e0:	8b 01       	movw	r16, r22
  debug_tx_text(name);
    14e2:	0e 94 49 09 	call	0x1292	; 0x1292 <debug_tx_text>
  debug_tx_sp();
    14e6:	0e 94 41 09 	call	0x1282	; 0x1282 <debug_tx_sp>
  debug_tx_number_hex_cm(num);
    14ea:	c8 01       	movw	r24, r16
    14ec:	b7 01       	movw	r22, r14
    14ee:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <debug_tx_number_hex_cm>
}
    14f2:	1f 91       	pop	r17
    14f4:	0f 91       	pop	r16
    14f6:	ff 90       	pop	r15
    14f8:	ef 90       	pop	r14
    14fa:	08 95       	ret

000014fc <debug_tx_parameter_bin_nl>:


///////////parameter & bin number with end functions///////////

void debug_tx_parameter_bin_nl(char *name, int32_t num){
    14fc:	ef 92       	push	r14
    14fe:	ff 92       	push	r15
    1500:	0f 93       	push	r16
    1502:	1f 93       	push	r17
    1504:	7a 01       	movw	r14, r20
    1506:	8b 01       	movw	r16, r22
  debug_tx_text(name);
    1508:	0e 94 49 09 	call	0x1292	; 0x1292 <debug_tx_text>
  debug_tx_sp();
    150c:	0e 94 41 09 	call	0x1282	; 0x1282 <debug_tx_sp>
  debug_tx_number_bin_nl(num);
    1510:	c8 01       	movw	r24, r16
    1512:	b7 01       	movw	r22, r14
    1514:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <debug_tx_number_bin_nl>
}
    1518:	1f 91       	pop	r17
    151a:	0f 91       	pop	r16
    151c:	ff 90       	pop	r15
    151e:	ef 90       	pop	r14
    1520:	08 95       	ret

00001522 <debug_tx_parameter_bin_sp>:

void debug_tx_parameter_bin_sp(char *name, int32_t num){
    1522:	ef 92       	push	r14
    1524:	ff 92       	push	r15
    1526:	0f 93       	push	r16
    1528:	1f 93       	push	r17
    152a:	7a 01       	movw	r14, r20
    152c:	8b 01       	movw	r16, r22
  debug_tx_text(name);
    152e:	0e 94 49 09 	call	0x1292	; 0x1292 <debug_tx_text>
  debug_tx_sp();
    1532:	0e 94 41 09 	call	0x1282	; 0x1282 <debug_tx_sp>
  debug_tx_number_bin_sp(num);
    1536:	c8 01       	movw	r24, r16
    1538:	b7 01       	movw	r22, r14
    153a:	0e 94 00 0a 	call	0x1400	; 0x1400 <debug_tx_number_bin_sp>
}
    153e:	1f 91       	pop	r17
    1540:	0f 91       	pop	r16
    1542:	ff 90       	pop	r15
    1544:	ef 90       	pop	r14
    1546:	08 95       	ret

00001548 <Debug_tx_parameter_bin_cm>:

void Debug_tx_parameter_bin_cm(char *name, int32_t num){
    1548:	ef 92       	push	r14
    154a:	ff 92       	push	r15
    154c:	0f 93       	push	r16
    154e:	1f 93       	push	r17
    1550:	7a 01       	movw	r14, r20
    1552:	8b 01       	movw	r16, r22
  debug_tx_text(name);
    1554:	0e 94 49 09 	call	0x1292	; 0x1292 <debug_tx_text>
  debug_tx_sp();
    1558:	0e 94 41 09 	call	0x1282	; 0x1282 <debug_tx_sp>
  debug_tx_number_bin_cm(num);
    155c:	c8 01       	movw	r24, r16
    155e:	b7 01       	movw	r22, r14
    1560:	0e 94 05 0a 	call	0x140a	; 0x140a <debug_tx_number_bin_cm>
}
    1564:	1f 91       	pop	r17
    1566:	0f 91       	pop	r16
    1568:	ff 90       	pop	r15
    156a:	ef 90       	pop	r14
    156c:	08 95       	ret

0000156e <debug_buf_get>:



uint8_t debug_buf_get(uint8_t index){
  return debug.buf[index];
    156e:	ec ed       	ldi	r30, 0xDC	; 220
    1570:	f1 e0       	ldi	r31, 0x01	; 1
    1572:	e8 0f       	add	r30, r24
    1574:	f1 1d       	adc	r31, r1
    1576:	83 81       	ldd	r24, Z+3	; 0x03
}
    1578:	08 95       	ret

0000157a <debug_buf_index_get>:

uint8_t debug_buf_index_get(void){
  return debug.bufindex;
    157a:	80 91 ff 01 	lds	r24, 0x01FF
}
    157e:	08 95       	ret

00001580 <debug_flush_buf>:

void debug_flush_buf(void){
    1580:	80 e0       	ldi	r24, 0x00	; 0
    1582:	90 e0       	ldi	r25, 0x00	; 0
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
    debug.buf[i]=0;
    1584:	fc 01       	movw	r30, r24
    1586:	e4 52       	subi	r30, 0x24	; 36
    1588:	fe 4f       	sbci	r31, 0xFE	; 254
    158a:	13 82       	std	Z+3, r1	; 0x03
    158c:	01 96       	adiw	r24, 0x01	; 1
uint8_t debug_buf_index_get(void){
  return debug.bufindex;
}

void debug_flush_buf(void){
  for(uint8_t i=0;i<DEBUG_RX_BUF_SIZE;i++){
    158e:	80 32       	cpi	r24, 0x20	; 32
    1590:	91 05       	cpc	r25, r1
    1592:	c1 f7       	brne	.-16     	; 0x1584 <debug_flush_buf+0x4>
    debug.buf[i]=0;
  }
  debug.bufindex=0;
    1594:	10 92 ff 01 	sts	0x01FF, r1
}
    1598:	08 95       	ret

0000159a <debug_databsy_get>:

uint8_t debug_databsy_get(void){
  return debug.databsy;
    159a:	80 91 de 01 	lds	r24, 0x01DE
}
    159e:	08 95       	ret

000015a0 <debug_data_available_rx_buf>:
  }
  debug.bufindex=0;
}

uint8_t debug_databsy_get(void){
  return debug.databsy;
    15a0:	80 91 de 01 	lds	r24, 0x01DE
}

uint8_t debug_data_available_rx_buf(void){
  if( (debug_databsy_get()==0) && (debug_buf_index_get()!=0) ){
    15a4:	88 23       	and	r24, r24
    15a6:	11 f0       	breq	.+4      	; 0x15ac <debug_data_available_rx_buf+0xc>
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	08 c0       	rjmp	.+16     	; 0x15bc <debug_data_available_rx_buf+0x1c>
uint8_t debug_buf_get(uint8_t index){
  return debug.buf[index];
}

uint8_t debug_buf_index_get(void){
  return debug.bufindex;
    15ac:	80 91 ff 01 	lds	r24, 0x01FF
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	88 23       	and	r24, r24
    15b4:	09 f4       	brne	.+2      	; 0x15b8 <debug_data_available_rx_buf+0x18>
    15b6:	91 e0       	ldi	r25, 0x01	; 1
    15b8:	81 e0       	ldi	r24, 0x01	; 1
    15ba:	98 27       	eor	r25, r24
  if( (debug_databsy_get()==0) && (debug_buf_index_get()!=0) ){
    return 1;
  }else{
    return 0;
  }
}
    15bc:	89 2f       	mov	r24, r25
    15be:	08 95       	ret

000015c0 <debug_available_bytes_rx_buf>:
uint8_t debug_buf_get(uint8_t index){
  return debug.buf[index];
}

uint8_t debug_buf_index_get(void){
  return debug.bufindex;
    15c0:	80 91 ff 01 	lds	r24, 0x01FF
  }
}

uint8_t debug_available_bytes_rx_buf(void){
  return debug_buf_index_get();
}
    15c4:	08 95       	ret

000015c6 <debug_init>:

void debug_init(void){
  debug_struct_init();
    15c6:	0e 94 80 07 	call	0xf00	; 0xf00 <debug_struct_init>
  debug_timings_init();
    15ca:	0e 94 9c 07 	call	0xf38	; 0xf38 <debug_timings_init>
  debug_gpio_init();
    15ce:	0e 94 c1 07 	call	0xf82	; 0xf82 <debug_gpio_init>
}
    15d2:	08 95       	ret

000015d4 <__vector_4>:


ISR(ISR_PCINT_VECT){
    15d4:	1f 92       	push	r1
    15d6:	0f 92       	push	r0
    15d8:	0f b6       	in	r0, 0x3f	; 63
    15da:	0f 92       	push	r0
    15dc:	11 24       	eor	r1, r1
    15de:	2f 93       	push	r18
    15e0:	3f 93       	push	r19
    15e2:	4f 93       	push	r20
    15e4:	5f 93       	push	r21
    15e6:	6f 93       	push	r22
    15e8:	7f 93       	push	r23
    15ea:	8f 93       	push	r24
    15ec:	9f 93       	push	r25
    15ee:	af 93       	push	r26
    15f0:	bf 93       	push	r27
    15f2:	ef 93       	push	r30
    15f4:	ff 93       	push	r31
  debug.databsy=1;
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	80 93 de 01 	sts	0x01DE, r24
  uint8_t val=debug_rx_byte();
    15fc:	0e 94 55 08 	call	0x10aa	; 0x10aa <debug_rx_byte>
    1600:	98 2f       	mov	r25, r24
  if(debug.error==0){
    1602:	80 91 dc 01 	lds	r24, 0x01DC
    1606:	88 23       	and	r24, r24
    1608:	99 f4       	brne	.+38     	; 0x1630 <__vector_4+0x5c>
    debug.buf[debug.bufindex]=val;
    160a:	e0 91 ff 01 	lds	r30, 0x01FF
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	e4 52       	subi	r30, 0x24	; 36
    1612:	fe 4f       	sbci	r31, 0xFE	; 254
    1614:	93 83       	std	Z+3, r25	; 0x03
	debug.bufindex++;
    1616:	80 91 ff 01 	lds	r24, 0x01FF
    161a:	8f 5f       	subi	r24, 0xFF	; 255
    161c:	80 93 ff 01 	sts	0x01FF, r24
	if(debug.bufindex>DEBUG_RX_BUF_SIZE){
    1620:	80 91 ff 01 	lds	r24, 0x01FF
    1624:	81 32       	cpi	r24, 0x21	; 33
    1626:	10 f0       	brcs	.+4      	; 0x162c <__vector_4+0x58>
	  debug.bufindex=0;
    1628:	10 92 ff 01 	sts	0x01FF, r1
	}
    debug_timer_start();
    162c:	0e 94 af 07 	call	0xf5e	; 0xf5e <debug_timer_start>
	#ifdef DEBUG_GPIO_SWITCH_DEBUGGING
    DEBUG_TEST_PORT|= (1<<DEBUG_TEST_bp);
    DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
    #endif
  }
}
    1630:	ff 91       	pop	r31
    1632:	ef 91       	pop	r30
    1634:	bf 91       	pop	r27
    1636:	af 91       	pop	r26
    1638:	9f 91       	pop	r25
    163a:	8f 91       	pop	r24
    163c:	7f 91       	pop	r23
    163e:	6f 91       	pop	r22
    1640:	5f 91       	pop	r21
    1642:	4f 91       	pop	r20
    1644:	3f 91       	pop	r19
    1646:	2f 91       	pop	r18
    1648:	0f 90       	pop	r0
    164a:	0f be       	out	0x3f, r0	; 63
    164c:	0f 90       	pop	r0
    164e:	1f 90       	pop	r1
    1650:	18 95       	reti

00001652 <__vector_16>:

ISR(TIMER_OVF_VECT){
    1652:	1f 92       	push	r1
    1654:	0f 92       	push	r0
    1656:	0f b6       	in	r0, 0x3f	; 63
    1658:	0f 92       	push	r0
    165a:	11 24       	eor	r1, r1
  #endif
}

void debug_timer_stop(void){
  #ifdef DEBUG_USE_TIMER0
  TIMSK0=0;
    165c:	10 92 6e 00 	sts	0x006E, r1
  TCCR0B=0;
    1660:	15 bc       	out	0x25, r1	; 37
  TCNT0 =0;
    1662:	16 bc       	out	0x26, r1	; 38
  debug_timer_stop();
  #ifdef DEBUG_GPIO_SWITCH_DEBUGGING
  DEBUG_TEST_PORT|= (1<<DEBUG_TEST_bp);
  DEBUG_TEST_PORT&=~(1<<DEBUG_TEST_bp);
  #endif
  debug.databsy=0;
    1664:	10 92 de 01 	sts	0x01DE, r1
}
    1668:	0f 90       	pop	r0
    166a:	0f be       	out	0x3f, r0	; 63
    166c:	0f 90       	pop	r0
    166e:	1f 90       	pop	r1
    1670:	18 95       	reti

00001672 <__udivmodqi4>:
    1672:	99 1b       	sub	r25, r25
    1674:	79 e0       	ldi	r23, 0x09	; 9
    1676:	04 c0       	rjmp	.+8      	; 0x1680 <__udivmodqi4_ep>

00001678 <__udivmodqi4_loop>:
    1678:	99 1f       	adc	r25, r25
    167a:	96 17       	cp	r25, r22
    167c:	08 f0       	brcs	.+2      	; 0x1680 <__udivmodqi4_ep>
    167e:	96 1b       	sub	r25, r22

00001680 <__udivmodqi4_ep>:
    1680:	88 1f       	adc	r24, r24
    1682:	7a 95       	dec	r23
    1684:	c9 f7       	brne	.-14     	; 0x1678 <__udivmodqi4_loop>
    1686:	80 95       	com	r24
    1688:	08 95       	ret

0000168a <__udivmodsi4>:
    168a:	a1 e2       	ldi	r26, 0x21	; 33
    168c:	1a 2e       	mov	r1, r26
    168e:	aa 1b       	sub	r26, r26
    1690:	bb 1b       	sub	r27, r27
    1692:	fd 01       	movw	r30, r26
    1694:	0d c0       	rjmp	.+26     	; 0x16b0 <__udivmodsi4_ep>

00001696 <__udivmodsi4_loop>:
    1696:	aa 1f       	adc	r26, r26
    1698:	bb 1f       	adc	r27, r27
    169a:	ee 1f       	adc	r30, r30
    169c:	ff 1f       	adc	r31, r31
    169e:	a2 17       	cp	r26, r18
    16a0:	b3 07       	cpc	r27, r19
    16a2:	e4 07       	cpc	r30, r20
    16a4:	f5 07       	cpc	r31, r21
    16a6:	20 f0       	brcs	.+8      	; 0x16b0 <__udivmodsi4_ep>
    16a8:	a2 1b       	sub	r26, r18
    16aa:	b3 0b       	sbc	r27, r19
    16ac:	e4 0b       	sbc	r30, r20
    16ae:	f5 0b       	sbc	r31, r21

000016b0 <__udivmodsi4_ep>:
    16b0:	66 1f       	adc	r22, r22
    16b2:	77 1f       	adc	r23, r23
    16b4:	88 1f       	adc	r24, r24
    16b6:	99 1f       	adc	r25, r25
    16b8:	1a 94       	dec	r1
    16ba:	69 f7       	brne	.-38     	; 0x1696 <__udivmodsi4_loop>
    16bc:	60 95       	com	r22
    16be:	70 95       	com	r23
    16c0:	80 95       	com	r24
    16c2:	90 95       	com	r25
    16c4:	9b 01       	movw	r18, r22
    16c6:	ac 01       	movw	r20, r24
    16c8:	bd 01       	movw	r22, r26
    16ca:	cf 01       	movw	r24, r30
    16cc:	08 95       	ret

000016ce <_exit>:
    16ce:	f8 94       	cli

000016d0 <__stop_program>:
    16d0:	ff cf       	rjmp	.-2      	; 0x16d0 <__stop_program>
